<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://aken5887.github.io/jekyll-theme-yat/feed.xml" rel="self" type="application/atom+xml" /><link href="https://aken5887.github.io/jekyll-theme-yat/" rel="alternate" type="text/html" /><updated>2023-08-14T04:14:18+00:00</updated><id>https://aken5887.github.io/jekyll-theme-yat/feed.xml</id><title type="html">AK’s Dev Wiki</title><subtitle>Jud's Dev Blog - Spring &amp; Java Backend Developer - Today I learn</subtitle><author><name>aken5887</name></author><entry><title type="html">Maven 3.8.1 이후부터 HTTP 저장소는 차단됩니다.</title><link href="https://aken5887.github.io/jekyll-theme-yat/troubleshooting/2023/08/14/TroubleShooting1.html" rel="alternate" type="text/html" title="Maven 3.8.1 이후부터 HTTP 저장소는 차단됩니다." /><published>2023-08-14T00:00:00+00:00</published><updated>2023-08-14T00:00:00+00:00</updated><id>https://aken5887.github.io/jekyll-theme-yat/troubleshooting/2023/08/14/TroubleShooting1</id><content type="html" xml:base="https://aken5887.github.io/jekyll-theme-yat/troubleshooting/2023/08/14/TroubleShooting1.html"><![CDATA[<p>전자정부 프레임워크를 가져와 intellij에서 maven을 새로 빌드하였을 때 해당 오류 발생하였다.</p>

<p>maven 3.8.1 버전 이후에는 http에 대한 외부 연결을 기본적으로 막는다고 한다.</p>

<h1 id="에러-내용">에러 내용</h1>

<hr />

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>org.terracotta.forge:forge-parent:pom:2.0 failed to transfer from http://0.0.0.0/ during a previous attempt. This failure was cached in the local repository and resolution is not reattempted until the update interval of maven-default-http-blocker has elapsed or updates are forced. Original error: Could not transfer artifact org.terracotta.forge:forge-parent:pom:2.0 from/to maven-default-http-blocker (http://0.0.0.0/): Blocked mirror for repositories: [terracotta-repository (http://www.terracotta.org/download/reflector/releases, default, releases+snapshots)]

Maven 3.8.1 이후부터 HTTP 저장소는 차단됩니다.

가능한 해결법:
- Maven settings.xml에 HTTP 저장소가 없는지 확인
- Maven POM 파일에 HTTP 저장소 http://www.terracotta.org/download/reflector/releases이(가) 없는지 확인
- Maven settings.xml에서 HTTP URL을 허용하는 http://www.terracotta.org/download/reflector/releases의 미러를 추가
- 설정에서 Maven을 3.8.1 이전의 버전으로 다운그레이드
</code></pre></div></div>

<h1 id="해결-방법">해결 방법</h1>

<hr />

<p>maven의 settings.xml 파일에 http url 을 허용하는 코드를 삽입하였다.</p>

<h3 id="settingsxml"><code class="language-plaintext highlighter-rouge">settings.xml</code></h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;settings</span> <span class="na">xmlns=</span><span class="s">"http://maven.apache.org/SETTINGS/1.0.0"</span>
	<span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
	<span class="na">xsi:schemaLocation=</span><span class="s">"http://maven.apache.org/SETTINGS/1.0.0
	http://maven.apache.org/xsd/settings-1.0.0.xsd"</span><span class="nt">&gt;</span>
<span class="nt">&lt;mirrors&gt;</span>
	<span class="nt">&lt;mirror&gt;</span>
		<span class="nt">&lt;id&gt;</span>maven-default-http-blocker<span class="nt">&lt;/id&gt;</span>
		<span class="nt">&lt;mirrorOf&gt;</span>external:dont-match-anything-mate:*<span class="nt">&lt;/mirrorOf&gt;</span>
		<span class="nt">&lt;name&gt;</span>Pseudo repository to mirror external repositories initially using HTTP.<span class="nt">&lt;/name&gt;</span>
		<span class="nt">&lt;url&gt;</span>http://www.terracotta.org/download/reflector/releases<span class="nt">&lt;/url&gt;</span>
	<span class="nt">&lt;/mirror&gt;</span>
<span class="nt">&lt;/mirrors&gt;</span>
<span class="nt">&lt;/settings&gt;</span>
</code></pre></div></div>]]></content><author><name>aken5887</name></author><category term="TroubleShooting" /><category term="전자정부프레임워크" /><summary type="html"><![CDATA[전자정부 프레임워크를 가져와 intellij에서 maven을 새로 빌드하였을 때 해당 오류 발생하였다.]]></summary></entry><entry><title type="html">JSP EL(Expression Language)이 동작하지 않을 때</title><link href="https://aken5887.github.io/jekyll-theme-yat/troubleshooting/2023/08/14/TroubleShooting2.html" rel="alternate" type="text/html" title="JSP EL(Expression Language)이 동작하지 않을 때" /><published>2023-08-14T00:00:00+00:00</published><updated>2023-08-14T00:00:00+00:00</updated><id>https://aken5887.github.io/jekyll-theme-yat/troubleshooting/2023/08/14/TroubleShooting2</id><content type="html" xml:base="https://aken5887.github.io/jekyll-theme-yat/troubleshooting/2023/08/14/TroubleShooting2.html"><![CDATA[<h1 id="에러-내용">에러 내용</h1>

<hr />

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, ${greeting}
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">JSP</code> 페이지에 <code class="language-plaintext highlighter-rouge">EL</code>이 동작하지 않고 ${} 문자열이 그대로 출력하는 현상 발생하였다.</p>

<h1 id="원인">원인</h1>

<hr />

<p><code class="language-plaintext highlighter-rouge">web.xml</code>의 web-app 태그 안의 버전에 서블릿 버전이 2.3 이하로 표시될 경우에 <code class="language-plaintext highlighter-rouge">EL</code>문이 동작하지 않을 수 있다.</p>

<h2 id="webxml"><strong><code class="language-plaintext highlighter-rouge">web.xml</code></strong></h2>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE web-app PUBLIC
 "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
 "http://java.sun.com/dtd/web-app_2_3.dtd" &gt;</span>
<span class="nt">&lt;web-app&gt;</span>
  <span class="nt">&lt;display-name&gt;</span>Spring Study Application<span class="nt">&lt;/display-name&gt;</span>
<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>

<h1 id="해결-방법">해결 방법</h1>

<hr />
<h2 id="1-iselignoredfalse-를-jsp-상단에-추가">1. isELIgnored=”false” 를 jsp 상단에 추가</h2>

<h2 id="2-webxml-스키마-헤더-변경">2. web.xml 스키마 헤더 변경</h2>

<p>Servlet 4.0에 해당하는 <code class="language-plaintext highlighter-rouge">web.xml</code> 스키마 헤더로 변경해주었다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;web-app</span> <span class="na">xmlns=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee"</span>
  <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
  <span class="na">xsi:schemaLocation=</span><span class="s">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span>
  <span class="na">version=</span><span class="s">"4.0"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;display-name&gt;</span>Spring Study Application<span class="nt">&lt;/display-name&gt;</span>
<span class="nt">&lt;/web-app&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">web.xml</code>을 변경 한 후에 해결 되었다.</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, World
</code></pre></div></div>

<h1 id="참고">참고</h1>

<hr />

<p><strong>Tomcat &amp; Servlet &amp; JSP 스펙</strong></p>

<p><img src="/assets/images/posts/2023-08-14/tomcat-servlet-jsp.png" alt="Untitled" /></p>

<p><em>출처 : <a href="https://zetawiki.com/wiki/%ED%86%B0%EC%BA%A3_%EB%B2%84%EC%A0%84%EB%B3%84_%EC%84%9C%EB%B8%94%EB%A6%BF_%EC%8A%A4%ED%8E%99">https://zetawiki.com/wiki/톰캣_버전별_서블릿_스펙</a></em></p>

<p>예) tomcat 9.0.26 버전을 사용 하는 경우 maven 설정</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>4.0.1<span class="nt">&lt;/version&gt;</span>
  <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
  <span class="nt">&lt;groupId&gt;</span>javax.servlet.jsp<span class="nt">&lt;/groupId&gt;</span>
  <span class="nt">&lt;artifactId&gt;</span>javax.servlet.jsp-api<span class="nt">&lt;/artifactId&gt;</span>
  <span class="nt">&lt;version&gt;</span>2.3.3<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
</code></pre></div></div>]]></content><author><name>aken5887</name></author><category term="TroubleShooting" /><category term="JSP," /><category term="EL" /><summary type="html"><![CDATA[에러 내용]]></summary></entry><entry><title type="html">전자정부 프레임워크 분석</title><link href="https://aken5887.github.io/jekyll-theme-yat/spring/2023/07/05/post1.html" rel="alternate" type="text/html" title="전자정부 프레임워크 분석" /><published>2023-07-05T00:00:00+00:00</published><updated>2023-07-05T00:00:00+00:00</updated><id>https://aken5887.github.io/jekyll-theme-yat/spring/2023/07/05/post1</id><content type="html" xml:base="https://aken5887.github.io/jekyll-theme-yat/spring/2023/07/05/post1.html"><![CDATA[<h1 id="목적">목적</h1>
<p>그 동안 프로젝트 하면서 사용한 전자정부프레임워크 XML기반 스프링 설정을 정리 해보았다.</p>

<p>web.xml 설정 부터 시작해서 Root WebApplicationContext 관련 XML 설정 Servlet WebApplicationContext 관련 XML 설정 까지 정리하였다.</p>

<h1 id="전자정부프레임워크-구성">전자정부프레임워크 구성</h1>
<ul>
  <li>전자정부프레임워크 버전 : 3.5.1</li>
  <li>스프링 버전 : 4.0.9</li>
  <li>JDK 버전 : 1.8</li>
</ul>

<h1 id="web-application-설정">web application 설정</h1>

<hr />
<p>deployment descriptor</p>

<h2 id="webxml">web.xml</h2>

<hr />

<h3 id="characterencodingfilter">CharacterEncodingFilter</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;filter&gt;</span>
  <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
  <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="nt">&lt;/filter-class&gt;</span>
  <span class="nt">&lt;init-param&gt;</span>
      <span class="nt">&lt;param-name&gt;</span>encoding<span class="nt">&lt;/param-name&gt;</span>
      <span class="nt">&lt;param-value&gt;</span>utf-8<span class="nt">&lt;/param-value&gt;</span>
  <span class="nt">&lt;/init-param&gt;</span>
<span class="nt">&lt;/filter&gt;</span>

<span class="nt">&lt;filter-mapping&gt;</span>
  <span class="nt">&lt;filter-name&gt;</span>encodingFilter<span class="nt">&lt;/filter-name&gt;</span>
  <span class="nt">&lt;url-pattern&gt;</span>*.do<span class="nt">&lt;/url-pattern&gt;</span>
<span class="nt">&lt;/filter-mapping&gt;</span>
</code></pre></div></div>

<h3 id="htmltagfilter">HTMLTagFilter</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;filter&gt;</span>
  <span class="nt">&lt;filter-name&gt;</span>HTMLTagFilter<span class="nt">&lt;/filter-name&gt;</span>
  <span class="nt">&lt;filter-class&gt;</span>egovframework.com.cmm.filter.HTMLTagFilter<span class="nt">&lt;/filter-class&gt;</span>
<span class="nt">&lt;/filter&gt;</span>

<span class="nt">&lt;filter-mapping&gt;</span>
  <span class="nt">&lt;filter-name&gt;</span>HTMLTagFilter<span class="nt">&lt;/filter-name&gt;</span>
  <span class="nt">&lt;url-pattern&gt;</span>*.do<span class="nt">&lt;/url-pattern&gt;</span>
<span class="nt">&lt;/filter-mapping&gt;</span>
</code></pre></div></div>

<h3 id="delegatingfilterproxy">DelegatingFilterProxy</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;filter&gt;</span>
  <span class="nt">&lt;filter-name&gt;</span>springSecurityFilterChain<span class="nt">&lt;/filter-name&gt;</span>
  <span class="nt">&lt;filter-class&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="nt">&lt;/filter-class&gt;</span>
<span class="nt">&lt;/filter&gt;</span>

<span class="nt">&lt;filter-mapping&gt;</span>
  <span class="nt">&lt;filter-name&gt;</span>springSecurityFilterChain<span class="nt">&lt;/filter-name&gt;</span>
  <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
<span class="nt">&lt;/filter-mapping&gt;</span>
</code></pre></div></div>

<h3 id="root-webapplicationcontext에-대한-설정">Root WebApplicationContext에 대한 설정</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;context-param&gt;</span>
  <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
  <span class="nt">&lt;param-value&gt;</span>**classpath*:egovframework/spring/com/context-*.xml**<span class="nt">&lt;/param-value&gt;</span>
<span class="nt">&lt;/context-param&gt;</span>
</code></pre></div></div>

<h3 id="contextloaderlistener">ContextLoaderListener</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;listener&gt;</span>
    <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="nt">&lt;/listener-class&gt;</span>
<span class="nt">&lt;/listener&gt;</span>
</code></pre></div></div>

<h3 id="httpsessioncheckinglistener">HttpSessionCheckingListener</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;listener&gt;</span>
  <span class="nt">&lt;listener-class&gt;</span>egovframework.com.cmm.HttpSessionCheckingListener<span class="nt">&lt;/listener-class&gt;</span>
<span class="nt">&lt;/listener&gt;</span>
</code></pre></div></div>

<h3 id="dispatcherservlet-servlet-webapplicationcontext">DispatcherServlet (Servlet WebApplicationContext)</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;servlet&gt;</span>
  <span class="nt">&lt;servlet-name&gt;</span>action<span class="nt">&lt;/servlet-name&gt;</span>
  <span class="nt">&lt;servlet-class&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="nt">&lt;/servlet-class&gt;</span>
  <span class="nt">&lt;init-param&gt;</span>
      <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
      <span class="nt">&lt;param-value&gt;</span>**/WEB-INF/config/egovframework/springmvc/egov-com-*.xml**<span class="nt">&lt;/param-value&gt;</span>
  <span class="nt">&lt;/init-param&gt;</span>
  <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
<span class="nt">&lt;/servlet&gt;</span>
<span class="nt">&lt;servlet-mapping&gt;</span>
  <span class="nt">&lt;servlet-name&gt;</span>action<span class="nt">&lt;/servlet-name&gt;</span>
  <span class="nt">&lt;url-pattern&gt;</span>*.do<span class="nt">&lt;/url-pattern&gt;</span>
<span class="nt">&lt;/servlet-mapping&gt;</span>
</code></pre></div></div>

<h3 id="datasource-리소스-정의">DataSource 리소스 정의</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;resource-ref&gt;</span>
  <span class="nt">&lt;description&gt;</span>Connection<span class="nt">&lt;/description&gt;</span>
  <span class="nt">&lt;res-ref-name&gt;</span>jdbc/eams<span class="nt">&lt;/res-ref-name&gt;</span>
  <span class="nt">&lt;res-type&gt;</span>javax.sql.DataSource<span class="nt">&lt;/res-type&gt;</span>
  <span class="nt">&lt;res-auth&gt;</span>Container<span class="nt">&lt;/res-auth&gt;</span>
<span class="nt">&lt;/resource-ref&gt;</span>
</code></pre></div></div>

<h3 id="시작-페이지">시작 페이지</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;welcome-file-list&gt;</span>
  <span class="nt">&lt;welcome-file&gt;</span>index.html<span class="nt">&lt;/welcome-file&gt;</span>
<span class="nt">&lt;/welcome-file-list&gt;</span>
</code></pre></div></div>

<h3 id="세션-타임아웃-설정">세션 타임아웃 설정</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;session-config&gt;</span>
  <span class="nt">&lt;session-timeout&gt;</span>60<span class="nt">&lt;/session-timeout&gt;</span>
<span class="nt">&lt;/session-config&gt;</span>
</code></pre></div></div>

<h3 id="에러-페이지">에러 페이지</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;error-page&gt;</span>
  <span class="nt">&lt;error-code&gt;</span>404<span class="nt">&lt;/error-code&gt;</span>
  <span class="nt">&lt;location&gt;</span>/code404.jsp<span class="nt">&lt;/location&gt;</span>
<span class="nt">&lt;/error-page&gt;</span>
<span class="nt">&lt;error-page&gt;</span>
  <span class="nt">&lt;error-code&gt;</span>500<span class="nt">&lt;/error-code&gt;</span>
  <span class="nt">&lt;location&gt;</span>/code500.jsp<span class="nt">&lt;/location&gt;</span>
<span class="nt">&lt;/error-page&gt;</span>
</code></pre></div></div>

<h1 id="root-applicationcontext">Root ApplicationContext</h1>

<hr />

<p><code class="language-plaintext highlighter-rouge">egoframework/spring/com/context-*.xml</code> 파일 들</p>

<h2 id="context-commonxml">context-common.xml</h2>

<hr />

<h3 id="component-scan-설정">component-scan 설정</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">"egovframework"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;context:include-filter</span> <span class="na">type=</span><span class="s">"annotation"</span> <span class="na">expression=</span><span class="s">"org.springframework.stereotype.Service"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;context:include-filter</span> <span class="na">type=</span><span class="s">"annotation"</span> <span class="na">expression=</span><span class="s">"org.springframework.stereotype.Repository"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;context:exclude-filter</span> <span class="na">type=</span><span class="s">"annotation"</span> <span class="na">expression=</span><span class="s">"org.springframework.stereotype.Controller"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/context:component-scan&gt;</span> 
</code></pre></div></div>

<h3 id="reloadableresourcebundlemessagesource">ReloadableResourceBundleMessageSource</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"messageSource"</span> <span class="na">class=</span><span class="s">"org.springframework.context.support.ReloadableResourceBundleMessageSource"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"basenames"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;value&gt;</span>classpath:/egovframework/message/com/message-common<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>classpath:/egovframework/rte/fdl/idgnr/messages/idgnr<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>classpath:/egovframework/rte/fdl/property/messages/properties<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>classpath:/egovframework/egovProps/globals<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"cacheSeconds"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;value&gt;</span>60<span class="nt">&lt;/value&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="egovmessagesource">EgovMessageSource</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egovMessageSource"</span> <span class="na">class=</span><span class="s">"egovframework.com.cmm.EgovMessageSource"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"reloadableResourceBundleMessageSource"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"messageSource"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="leaveatrace">LeaveaTrace</h3>

<p><em>실행환경에서 빈 이름을 참조할 수 있는 빈</em></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"leaveaTrace"</span> <span class="na">class=</span><span class="s">"egovframework.rte.fdl.cmmn.trace.LeaveaTrace"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"traceHandlerServices"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"egov.traceHandlerService"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="defaulttracehandlemanager">DefaultTraceHandleManager</h3>

<p><code class="language-plaintext highlighter-rouge">*LeaveaTrace</code> 빈 에서 참조*</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egov.traceHandlerService"</span> 
  <span class="na">class=</span><span class="s">"egovframework.rte.fdl.cmmn.trace.manager.DefaultTraceHandleManager"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"reqExpMatcher"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"egov.antPathMater"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"patterns"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;value&gt;</span>*<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"handlers"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"egov.defaultTraceHandler"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="antpathmatcher">AntPathMatcher</h3>

<p><code class="language-plaintext highlighter-rouge">*DefaultTraceHandleManager</code>빈 에서 참조*</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egov.antPathMater"</span> <span class="na">class=</span><span class="s">"org.springframework.util.AntPathMatcher"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<h3 id="defaulttracehandler">DefaultTraceHandler</h3>

<p><code class="language-plaintext highlighter-rouge">*DefaultTraceHandleManager</code> 빈 에서 참조*</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egov.defaultTraceHandler"</span> <span class="na">class=</span><span class="s">"egovframework.rte.fdl.cmmn.trace.handler.DefaultTraceHandler"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<h3 id="commonsmultipartresolver">CommonsMultipartResolver</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"spring.RegularCommonsMultipartResolver"</span> <span class="na">class=</span><span class="s">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"maxUploadSize"</span> <span class="na">value=</span><span class="s">"500000000"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"maxInMemorySize"</span> <span class="na">value=</span><span class="s">"500000000"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="egovmultipartresolver">EgovMultipartResolver</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"local.MultiCommonsMultipartResolver"</span> <span class="na">class=</span><span class="s">"egovframework.com.cmm.web.EgovMultipartResolver"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"maxUploadSize"</span> <span class="na">value=</span><span class="s">"500000000"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"maxInMemorySize"</span> <span class="na">value=</span><span class="s">"500000000"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="multipartresolver">MultipartResolver</h3>

<p><code class="language-plaintext highlighter-rouge">*CommonsMultipartResolver</code> 빈을 사용함*</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">"spring.RegularCommonsMultipartResolver"</span> <span class="na">alias=</span><span class="s">"multipartResolver"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<h2 id="context-aspectxml">context-aspect.xml</h2>

<hr />

<h3 id="aop-설정">AOP 설정</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">pointcut</code> : <code class="language-plaintext highlighter-rouge">execution(* egovframework..impl.*Impl.*(..))</code></li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;aop:config&gt;</span>
  <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">"egov.serviceMethod"</span> <span class="na">expression=</span><span class="s">"execution(* egovframework..impl.*Impl.*(..))"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;aop:aspect</span> <span class="na">ref=</span><span class="s">"egov.exceptionTransfer"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;aop:after-throwing</span> <span class="na">throwing=</span><span class="s">"exception"</span> <span class="na">pointcut-ref=</span><span class="s">"egov.serviceMethod"</span> <span class="na">method=</span><span class="s">"transfer"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/aop:aspect&gt;</span>
<span class="nt">&lt;/aop:config&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p>method :  예외가 발생한 메소드에서 예외를 던지고 종료될 때 호출 할 메소드*</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">transfer</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">exception</span><span class="o">)</span> <span class="o">{</span>
  <span class="o">...</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="exceptiontransfer">ExceptionTransfer</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egov.exceptionTransfer"</span> <span class="na">class=</span><span class="s">"egovframework.rte.fdl.cmmn.aspect.ExceptionTransfer"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"exceptionHandlerService"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"defaultExceptionHandleManager"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"otherExceptionHandleManager"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="defaultexceptionhandlemanager">DefaultExceptionHandleManager</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"defaultExceptionHandleManager"</span> 
  <span class="na">class=</span><span class="s">"egovframework.rte.fdl.cmmn.exception.manager.DefaultExceptionHandleManager"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"reqExpMatcher"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"egov.antPathMater"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"patterns"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;value&gt;</span>**service.impl.*<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"handlers"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"egovHandler"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="egovcomexcephndlr">EgovComExcepHndlr</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egovHandler"</span> <span class="na">class=</span><span class="s">"egovframework.com.cmm.EgovComExcepHndlr"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<h3 id="defaultexceptionhandlemanager-1">DefaultExceptionHandleManager</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"otherExceptionHandleManager"</span> 
  <span class="na">class=</span><span class="s">"egovframework.rte.fdl.cmmn.exception.manager.DefaultExceptionHandleManager"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"reqExpMatcher"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"egov.antPathMater"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"patterns"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;value&gt;</span>**service.impl.*<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"handlers"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"otherHandler"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="egovcomothersexcephndlr">EgovComOthersExcepHndlr</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"otherHandler"</span> <span class="na">class=</span><span class="s">"egovframework.com.cmm.EgovComOthersExcepHndlr"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<h2 id="context-datasourcexml">context-datasource.xml</h2>

<hr />

<h3 id="propertyplaceholderconfigurer">PropertyPlaceholderConfigurer</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egov.propertyConfigurer"</span> <span class="na">class=</span><span class="s">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"locations"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;list&gt;</span>
          <span class="nt">&lt;value&gt;</span>classpath:/egovframework/egovProps/globals.properties<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="alias">Alias</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">"dataSource-oracle"</span> <span class="na">alias=</span><span class="s">"egov.dataSource"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">"dataSource-oracle"</span> <span class="na">alias=</span><span class="s">"dataSource"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">"dataSource-common"</span> <span class="na">alias=</span><span class="s">"egov.dataSourceCommon"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">"dataSource-common"</span> <span class="na">alias=</span><span class="s">"dataSourceCommon"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">"dataSource-sms"</span> <span class="na">alias=</span><span class="s">"egov.dataSourceSms"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;alias</span> <span class="na">name=</span><span class="s">"dataSource-sms"</span> <span class="na">alias=</span><span class="s">"dataSourceSms"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<h3 id="jndiobjectfactorybean">JndiObjectFactoryBean</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource-oracle"</span> <span class="na">class=</span><span class="s">"org.springframework.jndi.JndiObjectFactoryBean"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"jndiName"</span> <span class="na">value=</span><span class="s">"jdbc/eams"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"resourceRef"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>

<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource-common"</span> <span class="na">class=</span><span class="s">"org.springframework.jndi.JndiObjectFactoryBean"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"jndiName"</span> <span class="na">value=</span><span class="s">"jdbc/common"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"resourceRef"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>

<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource-sms"</span> <span class="na">class=</span><span class="s">"org.springframework.jndi.JndiObjectFactoryBean"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"jndiName"</span> <span class="na">value=</span><span class="s">"jdbc/sms"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"resourceRef"</span> <span class="na">value=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h2 id="context-egovuserdetailshelperxml">context-egovuserdetailshelper.xml</h2>

<hr />

<h3 id="egovuserdetailshelper">EgovUserDetailsHelper</h3>

<p><em>인증된 유저의 <code class="language-plaintext highlighter-rouge">LoginVO</code>, 권한, 인증 여부를 확인 할 수 있는 서비스 클래스</em></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egovUserDetailsHelper"</span> <span class="na">class=</span><span class="s">"egovframework.com.cmm.util.EgovUserDetailsHelper"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"egovUserDetailsService"</span><span class="nt">&gt;</span> 
    <span class="c">&lt;!-- 원하는 bean id를 아래에 ref 태그에 적용한다 --&gt;</span>
    <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"egovUserDetailsSessionService"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="egovuserdetailssessionserviceimpl">EgovUserDetailsSessionServiceImpl</h3>

<p><em>세션을 이용한 인증을 사용하는 빈 (chosen)</em></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egovUserDetailsSessionService"</span> <span class="na">class=</span><span class="s">"egovframework.com.cmm.service.impl.EgovUserDetailsSessionServiceImpl"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">EgovUserDetailsSessionServiceImpl</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">EgovUserDetailsSessionServiceImpl</span> 
    <span class="kd">extends</span> <span class="nc">EgovAbstractServiceImpl</span> <span class="kd">implements</span> <span class="nc">EgovUserDetailsService</span> <span class="o">{</span>
  
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">getAuthenticatedUser</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nc">RequestContextHolder</span><span class="o">.</span><span class="na">getRequestAttributes</span><span class="o">().</span><span class="na">getAttribute</span><span class="o">(</span><span class="s">"loginVO"</span><span class="o">,</span> <span class="nc">RequestAttributes</span><span class="o">.</span><span class="na">SCOPE_SESSION</span><span class="o">);</span>
    <span class="o">}</span>
  
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getAuthorities</span><span class="o">()</span> <span class="o">{</span>
      <span class="c1">// 권한 설정을 리턴한다.</span>
      <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">listAuth</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;();</span>
      <span class="k">return</span> <span class="n">listAuth</span><span class="o">;</span>
    <span class="o">}</span>
  
    <span class="kd">public</span> <span class="nc">Boolean</span> <span class="nf">isAuthenticated</span><span class="o">()</span> <span class="o">{</span>
      <span class="c1">// 인증된 유저인지 확인한다.</span>
      <span class="k">if</span> <span class="o">(</span><span class="nc">RequestContextHolder</span><span class="o">.</span><span class="na">getRequestAttributes</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
     <span class="k">if</span> <span class="o">(</span><span class="nc">RequestContextHolder</span><span class="o">.</span><span class="na">getRequestAttributes</span><span class="o">().</span><span class="na">getAttribute</span><span class="o">(</span>
      <span class="s">"loginVO"</span><span class="o">,</span> <span class="nc">RequestAttributes</span><span class="o">.</span><span class="na">SCOPE_SESSION</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
     <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
   <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="egovuserdetailssecurityserviceimpl">EgovUserDetailsSecurityServiceImpl</h3>

<p><em>스프링 시큐리티를 이용한 인증을 사용할 빈 (Unchosen)</em></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">bean</span> <span class="n">id</span><span class="o">=</span><span class="s">"egovUserDetailsSecurityService"</span> <span class="kd">class</span><span class="err">="</span><span class="nc">egovframework</span><span class="o">.</span><span class="na">com</span><span class="o">.</span><span class="na">sec</span><span class="o">.</span><span class="na">ram</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">impl</span><span class="o">.</span><span class="na">EgovUserDetailsSecurityServiceImpl</span><span class="err">"</span><span class="o">/&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">EgovUserDetailsSecurityServiceImpl</code>
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EgovUserDetailsSecurityServiceImpl</span> 
          <span class="kd">extends</span> <span class="nc">EgovAbstractServiceImpl</span> <span class="kd">implements</span> <span class="nc">EgovUserDetailsService</span> <span class="o">{</span>
    <span class="cm">/**
     * 인증된 사용자객체를 VO형식으로 가져온다.
     * @return Object - 사용자 ValueObject
     */</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">getAuthenticatedUser</span><span class="o">()</span> <span class="o">{</span>
        
      <span class="c1">// 이 메소드의 경우 인증이 되지 않더라고 null을 리턴하지 않기 때문에 </span>
      <span class="c1">// 명시적으로 인증되지 않은 경우 null을 리턴하도록 수정함</span>
      <span class="k">if</span> <span class="o">(</span><span class="nc">EgovUserDetailsHelper</span><span class="o">.</span><span class="na">isAuthenticated</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">EgovUserDetailsHelper</span><span class="o">.</span><span class="na">getAuthenticatedUser</span><span class="o">();</span>	
      <span class="o">}</span>
      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 인증된 사용자의 권한 정보를 가져온다.
     * 예) [ROLE_ADMIN, ROLE_USER, ROLE_A, ROLE_B, ROLE_RESTRICTED, IS_AUTHENTICATED_FULLY, IS_AUTHENTICATED_REMEMBERED, IS_AUTHENTICATED_ANONYMOUSLY]
     * @return List - 사용자 권한정보 목록
     */</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getAuthorities</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nc">EgovUserDetailsHelper</span><span class="o">.</span><span class="na">getAuthorities</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="cm">/**
     * 인증된 사용자 여부를 체크한다.
     * @return Boolean - 인증된 사용자 여부(TRUE / FALSE)	
     */</span>
    <span class="kd">public</span> <span class="nc">Boolean</span> <span class="nf">isAuthenticated</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="nc">EgovUserDetailsHelper</span><span class="o">.</span><span class="na">isAuthenticated</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="context-propertiesxml">context-properties.xml</h2>

<hr />

<h3 id="egovpropertyserviceimpl">EgovPropertyServiceImpl</h3>
<p><em>공통 프로퍼티 관리를 위한 서비스 빈</em></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">name=</span><span class="s">"propertiesService"</span> <span class="na">class=</span><span class="s">"egovframework.rte.fdl.property.impl.EgovPropertyServiceImpl"</span> <span class="na">destroy-method=</span><span class="s">"destroy"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"properties"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;map&gt;</span>
      <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"pageUnit"</span> <span class="na">value=</span><span class="s">"100"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"pageSize"</span> <span class="na">value=</span><span class="s">"10"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/map&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">EgovPropertyServiceImpl</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">EgovPropertyServiceImpl</span> <span class="kd">implements</span> <span class="nc">EgovPropertyService</span><span class="o">,</span> <span class="nc">ApplicationContextAware</span><span class="o">,</span>
                <span class="nc">InitializingBean</span><span class="o">,</span> <span class="nc">DisposableBean</span><span class="o">,</span> <span class="nc">ResourceLoaderAware</span> <span class="o">{</span>
    
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">Logger</span> <span class="no">LOGGER</span> <span class="o">=</span> <span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="nc">EgovPropertyServiceImpl</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
    <span class="kd">private</span> <span class="nc">ExtendedProperties</span> <span class="n">egovProperties</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">ResourceLoader</span> <span class="n">resourceLoader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    
    <span class="kd">private</span> <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Set</span><span class="o">&lt;?&gt;</span> <span class="n">extFileName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;?,</span> <span class="o">?&gt;</span> <span class="n">properties</span><span class="o">;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="context-scheduling-sym-log-ulgxml">context-scheduling-sym-log-ulg.xml</h2>

<hr />

<p>스케쥴링 관련 빈 설정</p>

<h3 id="methodinvokingjobdetailfactorybean">MethodInvokingJobDetailFactoryBean</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userLogging"</span> <span class="na">class=</span><span class="s">"org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"targetObject"</span> <span class="na">ref=</span><span class="s">"egovUserLogScheduling"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"targetMethod"</span> <span class="na">value=</span><span class="s">"userLogInsert"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"concurrent"</span> <span class="na">value=</span><span class="s">"false"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="simpletriggerbean">SimpleTriggerBean</h3>

<p><code class="language-plaintext highlighter-rouge">startDelay</code>와 <code class="language-plaintext highlighter-rouge">repeatInterval</code> 프로퍼티를 가지는 <code class="language-plaintext highlighter-rouge">Trigger</code></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userLogTrigger"</span> <span class="na">class=</span><span class="s">"org.springframework.scheduling.quartz.SimpleTriggerBean"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"jobDetail"</span> <span class="na">ref=</span><span class="s">"userLogging"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"startDelay"</span> <span class="na">value=</span><span class="s">"60000"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"repeatInterval"</span> <span class="na">value=</span><span class="s">"3600000"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="crontriggerbean">CronTriggerBean</h3>

<p><code class="language-plaintext highlighter-rouge">cronExpression</code> 크론 표현식을 사용하는 <code class="language-plaintext highlighter-rouge">Trigger</code></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userLogTrigger"</span> <span class="na">class=</span><span class="s">"org.springframework.scheduling.quartz.CronTriggerBean"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"jobDetail"</span> <span class="na">ref=</span><span class="s">"planProcure"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"cronExpression"</span> <span class="na">value=</span><span class="s">"0 0 3 * * ?"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="schedulerfactorybean"><code class="language-plaintext highlighter-rouge">SchedulerFactoryBean</code></h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userLogScheduler"</span> <span class="na">class=</span><span class="s">"org.springframework.scheduling.quartz.SchedulerFactoryBean"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"triggers"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"userLogTrigger"</span> <span class="nt">/&gt;</span>				
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SchedulerAccessor</code></p>

    <blockquote>
      <p>Quartz Scheduler에 액세스하기 위한 공통 기본 클래스, 즉 인스턴스에 작업, 트리거 및 리스너를 등록하기 위한 클래스입니다*</p>

    </blockquote>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">SchedulerAccessor</span> <span class="kd">implements</span> <span class="nc">ResourceLoaderAware</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">JobDetail</span><span class="o">&gt;</span> <span class="n">jobDetails</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Trigger</span><span class="o">&gt;</span> <span class="n">triggers</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setTriggers</span><span class="o">(</span><span class="nc">Trigger</span><span class="o">...</span> <span class="n">triggers</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">triggers</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">triggers</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">SchedulerFactoryBean</code></p>

    <blockquote>
      <p><code class="language-plaintext highlighter-rouge">FactoryBean Quartz Scheduler</code>를 생성 및 구성하고, Spring 애플리케이션 컨텍스트의 일부로 라이프 사이클을 관리하고, 종속성 주입을위한 빈 참조로 Scheduler를 노출합니다.
  <code class="language-plaintext highlighter-rouge">JobDetails</code>, <code class="language-plaintext highlighter-rouge">Calendars</code> 및 <code class="language-plaintext highlighter-rouge">Triggers</code>를 등록할 수 있으며, 초기화 시 스케줄러를 자동으로 시작하고 소멸 시 종료할 수 있습니다. 시작 시 작업의 정적 등록만 필요한 시나리오에서는 응용 프로그램 코드에서 Scheduler 인스턴스 자체에 액세스할 필요가 없습니다.
  런타임에 작업을 동적으로 등록하려면 이 <code class="language-plaintext highlighter-rouge">SchedulerFactoryBean</code>에 대한 Bean 참조를 사용하여 Quartz Scheduler(org.quartz.Scheduler)에 직접 액세스할 수 있습니다. 이를 통해 새 작업 및 트리거를 만들고 전체 스케줄러를 제어하고 모니터링할 수 있습니다.*</p>

    </blockquote>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">SchedulerFactoryBean</span> <span class="kd">extends</span> <span class="nc">SchedulerAccessor</span> <span class="kd">implements</span> <span class="nc">FactoryBean</span><span class="o">&lt;</span><span class="nc">Scheduler</span><span class="o">&gt;,</span> <span class="nc">BeanNameAware</span><span class="o">,</span>
      <span class="nc">ApplicationContextAware</span><span class="o">,</span> <span class="nc">InitializingBean</span><span class="o">,</span> <span class="nc">DisposableBean</span><span class="o">,</span> <span class="nc">SmartLifecycle</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">SchedulingException</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">scheduler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
          <span class="n">startScheduler</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">scheduler</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">startupDelay</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">catch</span> <span class="o">(</span><span class="nc">SchedulerException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nf">SchedulingException</span><span class="o">(</span><span class="s">"Could not start Quartz Scheduler"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">SchedulingException</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">scheduler</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
          <span class="k">this</span><span class="o">.</span><span class="na">scheduler</span><span class="o">.</span><span class="na">standby</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">catch</span> <span class="o">(</span><span class="nc">SchedulerException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nf">SchedulingException</span><span class="o">(</span><span class="s">"Could not stop Quartz Scheduler"</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
        <span class="o">}</span>
      <span class="o">}</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">(</span><span class="nc">Runnable</span> <span class="n">callback</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SchedulingException</span> <span class="o">{</span>
      <span class="n">stop</span><span class="o">();</span>
      <span class="n">callback</span><span class="o">.</span><span class="na">run</span><span class="o">();</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="context-securityxml">context-security.xml</h2>

<hr />

<h3 id="-설정"><security:http security="none"></security:http> 설정</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;security:http</span> <span class="na">pattern=</span><span class="s">"/css/**"</span> <span class="na">security=</span><span class="s">"none"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;security:http</span> <span class="na">pattern=</span><span class="s">"/html/**"</span> <span class="na">security=</span><span class="s">"none"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;security:http</span> <span class="na">pattern=</span><span class="s">"/images/**"</span> <span class="na">security=</span><span class="s">"none"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;security:http</span> <span class="na">pattern=</span><span class="s">"/js/**"</span> <span class="na">security=</span><span class="s">"none"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;security:http</span> <span class="na">pattern=</span><span class="s">"/resource/**"</span> <span class="na">security=</span><span class="s">"none"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;security:http</span> <span class="na">pattern=</span><span class="s">"\A/WEB-INF/jsp/.*\Z"</span> <span class="na">request-matcher=</span><span class="s">"regex"</span> <span class="na">security=</span><span class="s">"none"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<h3 id="전자정부-프레임워크-security-태그">전자정부 프레임워크 security 태그</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;egov-security:config</span> <span class="na">id=</span><span class="s">"securityConfig"</span>
    <span class="na">loginUrl=</span><span class="s">"/uat/uia/egovLoginUsr.do"</span>
    <span class="na">logoutSuccessUrl=</span><span class="s">"/EgovContent.do"</span>
    <span class="na">loginFailureUrl=</span><span class="s">"/uat/uia/egovLoginUsrFail.do?login_error=1"</span>
    <span class="na">accessDeniedUrl=</span><span class="s">"/sec/ram/accessDenied.do"</span>

    <span class="na">dataSource=</span><span class="s">"egov.dataSource"</span>
    <span class="na">jdbcUsersByUsernameQuery=</span><span class="s">"SELECT USER_ID, ESNTL_ID AS PASSWORD, 1 ENABLED, USER_NM, USER_ZIP,
                                                              USER_ADRES, USER_EMAIL, USER_SE, ORGNZT_ID, ESNTL_ID,
                                                              (select a.ORGNZT_NM from COMTNORGNZTINFO a where a.ORGNZT_ID = m.ORGNZT_ID) ORGNZT_NM
                                                       FROM COMVNUSERMASTER m WHERE CONCAT(USER_SE, USER_ID) = ?"</span>
    <span class="na">jdbcAuthoritiesByUsernameQuery=</span><span class="s">"SELECT A.SCRTY_DTRMN_TRGET_ID USER_ID, A.AUTHOR_CODE AUTHORITY
                                                             FROM COMTNEMPLYRSCRTYESTBS A, COMVNUSERMASTER B
                                                             WHERE A.SCRTY_DTRMN_TRGET_ID = B.ESNTL_ID AND B.USER_ID = ?"</span>
    <span class="na">jdbcMapClass=</span><span class="s">"egovframework.com.sec.security.common.EgovSessionMapping"</span>

    <span class="na">requestMatcherType=</span><span class="s">"regex"</span>
    <span class="na">hash=</span><span class="s">"plaintext"</span>
    <span class="na">hashBase64=</span><span class="s">"false"</span>

    <span class="na">concurrentMaxSessons=</span><span class="s">"1"</span>
    <span class="na">concurrentExpiredUrl=</span><span class="s">"/EgovContent.do"</span>

    <span class="na">defaultTargetUrl=</span><span class="s">"/EgovContent.do"</span>
<span class="nt">/&gt;</span>

<span class="nt">&lt;egov-security:initializer</span> <span class="na">id=</span><span class="s">"initializer"</span>
    <span class="na">supportMethod=</span><span class="s">"true"</span>
    <span class="na">supportPointcut=</span><span class="s">"false"</span>
  <span class="nt">/&gt;</span>
</code></pre></div></div>

<h2 id="context-sqlmapxml">context-sqlMap.xml</h2>

<hr />

<h3 id="propertyplaceholderconfigurer-1">PropertyPlaceholderConfigurer</h3>

<p><em>외부 설정 프로퍼티</em></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egov.propertyConfigurer"</span> <span class="na">class=</span><span class="s">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"locations"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;list&gt;</span>
          <span class="nt">&lt;value&gt;</span>classpath:/egovframework/egovProps/globals.properties<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="defaultlobhandler">DefaultLobHandler</h3>

<p><em>이 <code class="language-plaintext highlighter-rouge">LobHandler</code> 는 간단한 BLOB 및 CLOB 처리에 관한 사양의 제안 사항 측면에서 JDBC를 준수하는 모든 JDBC 드라이버에서 작동한다.</em></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egov.lobHandler"</span> <span class="na">class=</span><span class="s">"org.springframework.jdbc.support.lob.DefaultLobHandler"</span> <span class="na">lazy-init=</span><span class="s">"true"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<h3 id="ibatissqlmapclientfactorybean">ibatis.SqlMapClientFactoryBean</h3>

<p><code class="language-plaintext highlighter-rouge">*ibatis</code>를 사용하기 위한 설정*</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egov.sqlMapClient"</span> <span class="na">class=</span><span class="s">"org.springframework.orm.ibatis.SqlMapClientFactoryBean"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"configLocations"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;value&gt;</span>classpath:/egovframework/sqlmap/config/${Globals.DbType}/*.xml<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"egov.dataSource"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"lobHandler"</span> <span class="na">ref=</span><span class="s">"egov.lobHandler"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">EgovComAbstractDAO</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">EgovComAbstractDAO</span> <span class="kd">extends</span> <span class="nc">EgovAbstractDAO</span><span class="o">{</span>
    <span class="nd">@Resource</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"egov.sqlMapClient"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSuperSqlMapClient</span><span class="o">(</span><span class="nc">SqlMapClient</span> <span class="n">sqlMapClient</span><span class="o">)</span> <span class="o">{</span>
          <span class="kd">super</span><span class="o">.</span><span class="na">setSuperSqlMapClient</span><span class="o">(</span><span class="n">sqlMapClient</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="context-transactionxml">context-transaction.xml</h2>

<hr />

<h3 id="datasourcetransactionmanager">DataSourceTransactionManager</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"txManager"</span> <span class="na">class=</span><span class="s">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"egov.dataSource"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="txadvice">txAdvice</h3>

<p><em>transaction <code class="language-plaintext highlighter-rouge">Advice</code> 설정</em></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;tx:advice</span> <span class="na">id=</span><span class="s">"txAdvice"</span> <span class="na">transaction-manager=</span><span class="s">"txManager"</span><span class="nt">&gt;</span>
   <span class="nt">&lt;tx:attributes&gt;</span>	 
     <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"*"</span> <span class="na">propagation=</span><span class="s">"REQUIRED"</span> <span class="na">rollback-for=</span><span class="s">"Exception"</span><span class="nt">/&gt;</span>
   <span class="nt">&lt;/tx:attributes&gt;</span>
<span class="nt">&lt;/tx:advice&gt;</span>
</code></pre></div></div>

<h3 id="txadvisor--txadvice--pointcut">txAdvisor = txAdvice + pointcut</h3>

<p><code class="language-plaintext highlighter-rouge">Pointcut</code>, <code class="language-plaintext highlighter-rouge">Advisor</code> 설정</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;aop:config&gt;</span>
  <span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">"requiredTx"</span> 
      <span class="na">expression=</span><span class="s">"execution(* egovframework.com..*Impl.*(..)) or
                  execution(* egovframework.rte.fdl.excel.impl.*Impl.*(..))"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;aop:advisor</span> <span class="na">advice-ref=</span><span class="s">"txAdvice"</span> <span class="na">pointcut-ref=</span><span class="s">"requiredTx"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/aop:config&gt;</span>
</code></pre></div></div>

<h2 id="context-validatorxml">context-validator.xml</h2>

<hr />

<h3 id="defaultbeanvalidator">DefaultBeanValidator</h3>

<blockquote>
  <ol>
    <li><code class="language-plaintext highlighter-rouge">DefaultBeanValidator</code>은 사용되는 모든 규칙을 가지고 있는 <code class="language-plaintext highlighter-rouge">validator-rules.xml</code> 파일과 입력 폼에서 규칙이 어떻게 적용되는지 정보를 가지고 있는 <code class="language-plaintext highlighter-rouge">validator.xml</code> 파일을 받아서 필요한 <code class="language-plaintext highlighter-rouge">Commons Validator</code>들의 인스턴스를 생성한다.</li>
    <li><code class="language-plaintext highlighter-rouge">DefaultBeanValidator</code> 는 <code class="language-plaintext highlighter-rouge">validationFactory</code>로 부터 가져온 기본 인스턴스를 이용해 실제 검증을 수행한다.</li>
  </ol>

</blockquote>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"beanValidator"</span> <span class="na">class=</span><span class="s">"org.springmodules.validation.commons.DefaultBeanValidator"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"validatorFactory"</span> <span class="na">ref=</span><span class="s">"validatorFactory"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="defaultvalidatorfactory">DefaultValidatorFactory</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"validatorFactory"</span> <span class="na">class=</span><span class="s">"org.springmodules.validation.commons.DefaultValidatorFactory"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"validationConfigLocations"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;value&gt;</span>classpath:/egovframework/validator/com-rules.xml<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>classpath:/egovframework/validator/validator-rules.xml<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>classpath:/egovframework/validator/**/*.xml<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">com-rules.xml</code></p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">&lt;!DOCTYPE form-validation PUBLIC
     "-//Apache Software Foundation//DTD Commons Validator Rules Configuration 1.0//EN"
     "http://jakarta.apache.org/commons/dtds/validator_1_0.dtd"&gt;</span>
<span class="nt">&lt;form-validation&gt;</span>
<span class="nt">&lt;global&gt;</span>
   <span class="nt">&lt;validator</span> <span class="na">name=</span><span class="s">"password1"</span>
      <span class="na">classname=</span><span class="s">"egovframework.rte.ptl.mvc.validation.RteFieldChecks"</span>
      <span class="na">method=</span><span class="s">"validatePassword1"</span>
      <span class="na">methodParams=</span><span class="s">"java.lang.Object,
               org.apache.commons.validator.ValidatorAction,
               org.apache.commons.validator.Field,
               org.springframework.validation.Errors"</span>
  
      <span class="na">depends=</span><span class="s">""</span> <span class="na">msg=</span><span class="s">"errors.password1"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;javascript&gt;</span><span class="cp">&lt;![CDATA[
      function validatePassword1(form) {
         var focusField = null;
         var i = 0;
         var fields = new Array();
         oPassword = new password1();
         for (x in oPassword) {
            var field = form[oPassword[x][0]];
            if (field.type == 'password') {
               if (trim(field.value).length==0 || !checkPassword1(field)) {
                  if (i == 0) {
                     focusField = field;
                  }
                  fields[i++] = oPassword[x][1];
                  return false;
               }
            }
         }
         if (fields.length &gt;</span> 0) {
            focusField.focus();
            alert(fields.join('\n'));
         }
         return true;
               }
      ]]&gt;
      <span class="nt">&lt;/javascript&gt;</span>
   <span class="nt">&lt;/validator&gt;</span>
<span class="nt">&lt;/global&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">validator.jsp</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/sec/rnc/validator.do"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">validate</span><span class="o">(){</span>
    <span class="k">return</span> <span class="s">"egovframework/com/cmm/validator"</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;</span><span class="err">%@</span> <span class="na">taglib</span> <span class="na">prefix=</span><span class="s">"c"</span> <span class="na">uri=</span><span class="s">"http://java.sun.com/jsp/jstl/core"</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%@</span> <span class="na">page</span> <span class="na">language=</span><span class="s">"java"</span> <span class="na">contentType=</span><span class="s">"javascript/x-javascript"</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;</span><span class="err">%@</span> <span class="na">taglib</span> <span class="na">prefix=</span><span class="s">"validator"</span> <span class="na">uri=</span><span class="s">"http://www.springmodules.org/tags/commons-validator"</span> <span class="err">%</span><span class="nt">&gt;</span>
  <span class="nt">&lt;validator:javascript</span> <span class="na">dynamicJavascript=</span><span class="s">"false"</span> <span class="na">staticJavascript=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">validator</code>를 사용하는 <code class="language-plaintext highlighter-rouge">jsp</code></p>

    <div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">&lt;!-- valitor-rules.xml 파일의 모든 자바스크립트 라이브러리 입니다. --&gt;</span>
  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span> <span class="na">src=</span><span class="s">"&lt;c:url value="</span><span class="err">/</span><span class="na">sec</span><span class="err">/</span><span class="na">rnc</span><span class="err">/</span><span class="na">validator.do</span><span class="err">"</span><span class="nt">/&gt;</span><span class="dl">"</span><span class="s2">&gt;</span><span class="nt">&lt;/script&gt;</span>
  <span class="c">&lt;!-- validator.xml의 entrprsManageVO 를 검증하기위한 스크립트를 생성합니다. --&gt;</span>
  <span class="nt">&lt;validator:javascript</span> <span class="na">formName=</span><span class="s">"entrprsManageVO"</span> <span class="na">staticJavascript=</span><span class="s">"false"</span> <span class="na">xhtml=</span><span class="s">"true"</span> <span class="na">cdata=</span><span class="s">"false"</span><span class="nt">/&gt;</span>
    
  function fnSbscrb(){
    if(validateEntrprsManageVO(document.entrprsManageVO)){
      if(document.entrprsManageVO.entrprsMberPassword.value != document.entrprsManageVO.entrprsMberPassword2.value){
              alert("<span class="nt">&lt;spring:message</span> <span class="na">code=</span><span class="s">"fail.user.passwordUpdate2"</span> <span class="nt">/&gt;</span>");
              return;
          }
          document.entrprsManageVO.submit();
      }
  }
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="webapplicationcontext">WebApplicationContext</h1>

<hr />

<h2 id="egov-com-servletxml">egov-com-servlet.xml</h2>

<hr />

<h3 id="component-scan">component-scan</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;context:component-scan</span> <span class="na">base-package=</span><span class="s">"egovframework"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;context:include-filter</span> <span class="na">expression=</span><span class="s">"org.springframework.stereotype.Controller"</span> <span class="na">type=</span><span class="s">"annotation"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;context:exclude-filter</span> <span class="na">expression=</span><span class="s">"org.springframework.stereotype.Service"</span> <span class="na">type=</span><span class="s">"annotation"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;context:exclude-filter</span> <span class="na">expression=</span><span class="s">"org.springframework.stereotype.Repository"</span> <span class="na">type=</span><span class="s">"annotation"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/context:component-scan&gt;</span>
</code></pre></div></div>

<h3 id="imagepaginationrenderer">ImagePaginationRenderer</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"egovframework.com.cmm.ImagePaginationRenderer"</span> <span class="na">id=</span><span class="s">"imageRenderer"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<h3 id="defaultpaginationmanager">DefaultPaginationManager</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"egovframework.rte.ptl.mvc.tags.ui.pagination.DefaultPaginationManager"</span> <span class="na">id=</span><span class="s">"paginationManager"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"rendererType"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;map&gt;</span>
      <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"image"</span> <span class="na">value-ref=</span><span class="s">"imageRenderer"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/map&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="annotationmethodhandleradapter">AnnotationMethodHandlerAdapter</h3>

<p>Controller에서 화면 JSP 입력 값을 받기 위해, 일반적으로 Command(VO Class)객체를 사용하지만, Map객체를 사용하는 것을 선호할 수 있다.
<code class="language-plaintext highlighter-rouge">org.springframework.web.bind.support.WebArgumentResolver</code> 의 구현 클래스인 <code class="language-plaintext highlighter-rouge">CommandMapArgumentResolver</code>는 HTTP request 객체에 있는 파라미터 이름과 값을 Map 객체에 담아 Controller에서 사용하도록 제공한다.  파라미터 이름으로 <code class="language-plaintext highlighter-rouge">commandMap</code>으로 사용하면 Map 객체에 담아준다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"webBindingInitializer"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"egovframework.com.cmm.web.EgovBindingInitializer"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"customArgumentResolvers"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"egovframework.rte.ptl.mvc.bind.CommandMapArgumentResolver"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">CommandMapArgumentResolver</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CommandMapArgumentResolver</span> <span class="kd">implements</span> <span class="nc">WebArgumentResolver</span><span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">methodParameter</span><span class="o">,</span>
          <span class="nc">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
          
        <span class="nc">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">methodParameter</span><span class="o">.</span><span class="na">getParameterType</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">paramName</span> <span class="o">=</span> <span class="o">**</span><span class="n">methodParameter</span><span class="o">.</span><span class="na">getParameterName</span><span class="o">();**</span>
          
        <span class="k">if</span><span class="o">(</span><span class="n">clazz</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">paramName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"commandMap"</span><span class="o">)){</span>
            
          <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">commandMap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;();</span>
          <span class="nc">HttpServletRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HttpServletRequest</span><span class="o">)</span> <span class="n">webRequest</span><span class="o">.</span><span class="na">getNativeRequest</span><span class="o">();</span>			
          <span class="nc">Enumeration</span><span class="o">&lt;?&gt;</span> <span class="n">enumeration</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">();</span>
            
          <span class="k">while</span><span class="o">(</span><span class="n">enumeration</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">()){</span>
            <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">enumeration</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
            <span class="nc">String</span><span class="o">[]</span> <span class="n">values</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterValues</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">values</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
              <span class="n">commandMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="o">(</span><span class="n">values</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="o">)</span> <span class="o">?</span> <span class="nl">values:</span><span class="n">values</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">);</span>
            <span class="o">}</span>
          <span class="o">}</span>
          <span class="k">return</span> <span class="n">commandMap</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="no">UNRESOLVED</span><span class="o">;</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">CommandMap</code>을 사용하는 <code class="language-plaintext highlighter-rouge">Controller</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/sec/cmt/SiteCodeGroupMstInsertView.do"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">insertSiteCodeGroupMstView</span><span class="o">(**</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">commandMap</span><span class="o">**,</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span><span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="n">init</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">commandMap</span><span class="o">);</span>
    <span class="k">return</span> <span class="s">"egovframework/com/sec/cmt/SiteCodeGroupMstView"</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="simpleurlannotationhandlermapping">SimpleUrlAnnotationHandlerMapping</h3>

<p><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>에 Client로부터 Http Request가 들어 오면 HandlerMapping은 요청처리를 담당할 Controller를 매핑한다.*</p>

<p><em>Spring MVC는 interface인 HandlerMapping의 구현 클래스도 가지고 있는데, 용도에 따라 여러 개의 HandlerMapping을 사용하는 것도 가능하다.</em></p>

<p><em>빈 정의 파일에 HandlerMapping에 대한 정의가 없다면 Spring MVC는 기본(default) HandlerMapping을 사용한다.</em></p>

<p><em>기본 HandlerMapping은 <code class="language-plaintext highlighter-rouge">BeanNameUrlHandlerMapping</code>이며, jdk 1.5 이상의 실행환경이면, <code class="language-plaintext highlighter-rouge">DefaultAnnotationHandlerMapping</code>도 기본 HandlerMapping이다.</em></p>

<p><em>Spring MVC가 제공하는 주요 HandlerMapping 구현 클래스는 아래와 같다.</em></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">*BeanNameUrlHandlerMapping*</code></li>
  <li><code class="language-plaintext highlighter-rouge">~~*DefaultAnnotationHandlerMapping</code>~~ → (<code class="language-plaintext highlighter-rouge">**Spring 3.1 이상**</code>) <strong><code class="language-plaintext highlighter-rouge">RequestMappingHandlerMapping</code></strong>*</li>
  <li><code class="language-plaintext highlighter-rouge">*ControllerClassNameHandlerMapping*</code></li>
  <li><code class="language-plaintext highlighter-rouge">*SimpleUrlHandlerMapping*</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">*@MVC</code>에서 <code class="language-plaintext highlighter-rouge">DefaultAnnotationHandlerMapping</code>은 URL 단위로 interceptor를 적용할 수 없기에 전자정부프레임워크에서 아래와 같은 HandlerMapping 구현 클래스를 추가했다.*</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">*SimpleUrlAnnotationHandlerMapping</code> ← <code class="language-plaintext highlighter-rouge">DefaultAnnotationHandlerMapping 상속</code>*</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"selectAnnotaionMapper"</span> <span class="na">class=</span><span class="s">"egovframework.rte.ptl.mvc.handler.SimpleUrlAnnotationHandlerMapping"</span> <span class="na">p:order=</span><span class="s">"1"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"interceptors"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;ref</span> <span class="na">local=</span><span class="s">"authenticInterceptor"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"urls"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;set&gt;</span>
      <span class="nt">&lt;value&gt;</span>/**/*.do<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/set&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="참고-전자정부-프레임워크-41버전-설정">[참고] 전자정부 프레임워크 4.1버전 설정</h3>

<p><em><code class="language-plaintext highlighter-rouge">org.springframework.web.servlet.handler.MappedInterceptor</code> (<code class="language-plaintext highlighter-rouge">HandlerInterceptor</code> 구현 클래스)</em></p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mvc:interceptors&gt;</span>
  <span class="nt">&lt;mvc:interceptor&gt;</span>
    <span class="nt">&lt;mvc:mapping</span> <span class="na">path=</span><span class="s">"/**/*.do"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">"/uat/uia/**"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;mvc:exclude-mapping</span> <span class="na">path=</span><span class="s">"/index.do"</span> <span class="nt">/&gt;</span>
    <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"egovframework.com.cmm.interceptor.AuthenticInterceptor"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"adminAuthPatternList"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;list&gt;</span>
          <span class="nt">&lt;value&gt;</span>/sec/ram/*.do<span class="nt">&lt;/value&gt;</span>
        <span class="nt">&lt;/list&gt;</span>
      <span class="nt">&lt;/property&gt;</span>
    <span class="nt">&lt;/bean&gt;</span>
  <span class="nt">&lt;/mvc:interceptor&gt;</span>
<span class="nt">&lt;/mvc:interceptor&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">MappedInterceptor</code> 생성자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nf">MappedInterceptor</span><span class="o">(</span><span class="nd">@Nullable</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">includePatterns</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">String</span><span class="o">[]</span> <span class="n">excludePatterns</span><span class="o">,</span>
      <span class="nc">HandlerInterceptor</span> <span class="n">interceptor</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">this</span><span class="o">(</span><span class="n">includePatterns</span><span class="o">,</span> <span class="n">excludePatterns</span><span class="o">,</span> <span class="k">new</span> <span class="nc">WebRequestHandlerInterceptorAdapter</span><span class="o">(</span><span class="n">interceptor</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="authenticinterceptor">AuthenticInterceptor</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"authenticInterceptor"</span> <span class="na">class=</span><span class="s">"egovframework.com.cmm.interceptor.AuthenticInterceptor"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"permittedURL"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;set&gt;</span>
      <span class="nt">&lt;value&gt;</span>/uat/uia/[a-zA-Z]+\.do<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>/EgovLeft.do<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>/uat/uia/actionLogin.do<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>/lxLoginUser.do<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>/test/lxLoginUser.do<span class="nt">&lt;/value&gt;</span>
      <span class="nt">&lt;value&gt;</span>/uss/umt/userSearch.do<span class="nt">&lt;/value&gt;</span>
    <span class="nt">&lt;/set&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="simplemappingexceptionresolver">SimpleMappingExceptionResolver</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"defaultErrorView"</span> <span class="na">value=</span><span class="s">"egovframework/com/cmm/error/egovError"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"exceptionMappings"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;props&gt;</span>
      <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"org.springframework.dao.DataAccessException"</span><span class="nt">&gt;</span>egovframework/com/cmm/error/dataAccessFailure<span class="nt">&lt;/prop&gt;</span>
      <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"org.springframework.transaction.TransactionException"</span><span class="nt">&gt;</span>egovframework/com/cmm/error/dataAccessFailure<span class="nt">&lt;/prop&gt;</span>
      <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"egovframework.rte.fdl.cmmn.exception.EgovBizException"</span><span class="nt">&gt;</span>egovframework/com/cmm/error/egovBizException<span class="nt">&lt;/prop&gt;</span>
      <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"org.springframework.web.HttpSessionRequiredException"</span><span class="nt">&gt;</span>egovframework/com/uat/uia/EgovLoginUsr<span class="nt">&lt;/prop&gt;</span>
    <span class="nt">&lt;/props&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="viewresolver">ViewResolver</h3>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">BeanNameViewResolver</code></p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"org.springframework.web.servlet.view.BeanNameViewResolver"</span> <span class="na">p:order=</span><span class="s">"0"</span><span class="nt">/&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">UrlBasedViewResolver</code></p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"org.springframework.web.servlet.view.UrlBasedViewResolver"</span> <span class="na">p:order=</span><span class="s">"1"</span> <span class="na">p:prefix=</span><span class="s">"/WEB-INF/jsp/"</span> <span class="na">p:suffix=</span><span class="s">".jsp"</span> <span class="na">p:viewClass=</span><span class="s">"org.springframework.web.servlet.view.JstlView"</span><span class="nt">/&gt;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="egov-com-loginaopxml">egov-com-loginaop.xml</h2>

<hr />

<h3 id="egovloginlogaspect">EgovLoginLogAspect</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"egov.loginlog"</span> <span class="na">class=</span><span class="s">"egovframework.com.sym.log.clg.service.EgovLoginLogAspect"</span> <span class="nt">/&gt;</span>
</code></pre></div></div>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">EgovLoginLogAspect.java</code></p>

    <p><em>로그인 로그 정보 생성</em></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">logLogin</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
  	<span class="nc">String</span> <span class="n">uniqId</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
  	<span class="nc">String</span> <span class="n">ip</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
    
  	<span class="cm">/* Authenticated  */</span>
        <span class="nc">Boolean</span> <span class="n">isAuthenticated</span> <span class="o">=</span> <span class="nc">EgovUserDetailsHelper</span><span class="o">.</span><span class="na">isAuthenticated</span><span class="o">();</span>
    	<span class="k">if</span><span class="o">(</span><span class="n">isAuthenticated</span><span class="o">.</span><span class="na">booleanValue</span><span class="o">())</span> <span class="o">{</span>
  		<span class="nc">LoginVO</span> <span class="n">user</span> <span class="o">=</span> <span class="o">(</span><span class="nc">LoginVO</span><span class="o">)</span><span class="nc">EgovUserDetailsHelper</span><span class="o">.</span><span class="na">getAuthenticatedUser</span><span class="o">();</span>
  		<span class="n">uniqId</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
  		<span class="n">ip</span> <span class="o">=</span> <span class="n">user</span><span class="o">.</span><span class="na">getIp</span><span class="o">();</span>
    	<span class="o">}</span>
    
    	<span class="nc">LoginLog</span> <span class="n">loginLog</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LoginLog</span><span class="o">();</span>
    	<span class="n">loginLog</span><span class="o">.</span><span class="na">setLoginId</span><span class="o">(</span><span class="n">uniqId</span><span class="o">);</span>
        <span class="n">loginLog</span><span class="o">.</span><span class="na">setLoginIp</span><span class="o">(</span><span class="n">ip</span><span class="o">);</span>
        <span class="n">loginLog</span><span class="o">.</span><span class="na">setLoginMthd</span><span class="o">(</span><span class="s">"I"</span><span class="o">);</span> <span class="c1">// 로그인:I, 로그아웃:O</span>
        <span class="n">loginLog</span><span class="o">.</span><span class="na">setErrOccrrAt</span><span class="o">(</span><span class="s">"N"</span><span class="o">);</span>
        <span class="n">loginLog</span><span class="o">.</span><span class="na">setErrorCode</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
        <span class="n">loginLogService</span><span class="o">.</span><span class="na">logInsertLoginLog</span><span class="o">(</span><span class="n">loginLog</span><span class="o">);</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="login-aspect">Login Aspect</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;aop:config&gt;</span>
  <span class="nt">&lt;aop:aspect</span> <span class="na">id=</span><span class="s">"egov.loginLogAspect"</span> <span class="na">ref=</span><span class="s">"egov.loginlog"</span><span class="nt">&gt;</span>
    <span class="c">&lt;!--  로그인 Method --&gt;</span>
    <span class="nt">&lt;aop:before</span> <span class="na">pointcut=</span><span class="s">"execution(public * egovframework.com.uat.uia.web.EgovLoginController.actionMain(..))"</span> <span class="na">method=</span><span class="s">"logLogin"</span> <span class="nt">/&gt;</span>
    <span class="c">&lt;!--  로그아웃 Method --&gt;</span>
    <span class="nt">&lt;aop:before</span> <span class="na">pointcut=</span><span class="s">"execution(public * egovframework.com.uat.uia.web.EgovLoginController.actionLogout(..))"</span> <span class="na">method=</span><span class="s">"logLogout"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;/aop:aspect&gt;</span>
<span class="nt">&lt;/aop:config&gt;</span>
</code></pre></div></div>

<h2 id="비지니스-로직-내-transaction-관리">비지니스 로직 내 Transaction 관리</h2>

<hr />

<h3 id="platformtransactionmanager">PlatformTransactionManager</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">...</span>
<span class="nd">@Resource</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">"txManager"</span><span class="o">)</span>
<span class="kd">private</span> <span class="nc">PlatformTransactionManager</span> <span class="n">txManager</span><span class="o">;</span>
<span class="o">..</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">insert</span><span class="o">()</span> <span class="o">{</span>
  <span class="c1">// 트랜잭션 선언</span>
  <span class="nc">DefaultTransactionDefinition</span> <span class="n">txDefinition</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">();</span>
  <span class="n">txDefinition</span><span class="o">.</span><span class="na">setPropagationBehavior</span><span class="o">(</span><span class="nc">TransactionDefinition</span><span class="o">.</span><span class="na">PROPAGATION_REQUIRED</span><span class="o">);</span>
  <span class="nc">TransactionStatus</span> <span class="n">txStatus</span> <span class="o">=</span> <span class="n">txManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="n">txDefinition</span><span class="o">);</span>
  <span class="k">try</span><span class="o">{</span>
    <span class="n">select</span><span class="o">();</span>
    <span class="c1">//transaction 1</span>
    <span class="n">delete</span><span class="o">();</span>
    <span class="c1">//transaction 2</span>
    <span class="n">insert</span><span class="o">();</span>
    <span class="c1">//커밋</span>
    <span class="n">txManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">txStatus</span><span class="o">);</span>
  <span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
    <span class="n">txManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">txStatus</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>aken5887</name></author><category term="Spring" /><category term="전자정부프레임워크" /><summary type="html"><![CDATA[목적 그 동안 프로젝트 하면서 사용한 전자정부프레임워크 XML기반 스프링 설정을 정리 해보았다.]]></summary></entry><entry><title type="html">토비의 스프링 - 2-4장 스프링 @MVC 2</title><link href="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/14/post1.html" rel="alternate" type="text/html" title="토비의 스프링 - 2-4장 스프링 @MVC 2" /><published>2023-06-14T00:00:00+00:00</published><updated>2023-06-14T00:00:00+00:00</updated><id>https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/14/post1</id><content type="html" xml:base="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/14/post1.html"><![CDATA[<h1 id="45-메세지-컨버터와-ajax">4.5 메세지 컨버터와 AJAX</h1>

<hr />

<p>GET - <code class="language-plaintext highlighter-rouge">@RequestParam</code>, <code class="language-plaintext highlighter-rouge">@ModelAttribute</code></p>

<p>POST - <code class="language-plaintext highlighter-rouge">@RequestBody</code></p>

<h2 id="451-메시지-컨버터-종류">4.5.1 메시지 컨버터 종류</h2>

<hr />

<p>메세지 컨버터는 <code class="language-plaintext highlighter-rouge">RequestMappingHandlerAdpater</code>를 통해 등록된다.</p>

<h3 id="스프링">스프링</h3>

<p>스프링은 classpath에 해당 라이브러리가 존재하면 <code class="language-plaintext highlighter-rouge">MessageConverter</code>를 자동으로 등록해준다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Jaxb2RootElementHttpMessageConverter</code>, <code class="language-plaintext highlighter-rouge">MappingJackson2HttpMessageConverter</code> 등</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="o">{</span>
  <span class="nc">ClassLoader</span> <span class="n">classLoader</span> <span class="o">=</span> <span class="nc">WebMvcConfigurationSupport</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">();</span>
  <span class="n">romePresent</span> <span class="o">=</span> <span class="nc">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">"com.rometools.rome.feed.WireFeed"</span><span class="o">,</span> <span class="n">classLoader</span><span class="o">);</span>
  <span class="n">jaxb2Present</span> <span class="o">=</span> <span class="nc">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">"javax.xml.bind.Binder"</span><span class="o">,</span> <span class="n">classLoader</span><span class="o">);</span>
  <span class="n">jackson2Present</span> <span class="o">=</span> <span class="nc">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">"com.fasterxml.jackson.databind.ObjectMapper"</span><span class="o">,</span> <span class="n">classLoader</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
      <span class="nc">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">"com.fasterxml.jackson.core.JsonGenerator"</span><span class="o">,</span> <span class="n">classLoader</span><span class="o">);</span>
  <span class="n">jackson2XmlPresent</span> <span class="o">=</span> <span class="nc">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">"com.fasterxml.jackson.dataformat.xml.XmlMapper"</span><span class="o">,</span> <span class="n">classLoader</span><span class="o">);</span>
  <span class="n">jackson2SmilePresent</span> <span class="o">=</span> <span class="nc">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">"com.fasterxml.jackson.dataformat.smile.SmileFactory"</span><span class="o">,</span> <span class="n">classLoader</span><span class="o">);</span>
  <span class="n">jackson2CborPresent</span> <span class="o">=</span> <span class="nc">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">"com.fasterxml.jackson.dataformat.cbor.CBORFactory"</span><span class="o">,</span> <span class="n">classLoader</span><span class="o">);</span>
  <span class="n">gsonPresent</span> <span class="o">=</span> <span class="nc">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">"com.google.gson.Gson"</span><span class="o">,</span> <span class="n">classLoader</span><span class="o">);</span>
  <span class="n">jsonbPresent</span> <span class="o">=</span> <span class="nc">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">"javax.json.bind.Jsonb"</span><span class="o">,</span> <span class="n">classLoader</span><span class="o">);</span>
  <span class="n">kotlinSerializationJsonPresent</span> <span class="o">=</span> <span class="nc">ClassUtils</span><span class="o">.</span><span class="na">isPresent</span><span class="o">(</span><span class="s">"kotlinx.serialization.json.Json"</span><span class="o">,</span> <span class="n">classLoader</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="스프링-부트">스프링 부트</h3>

<p>Jackson 라이브러리가 기본으로 포함되어 있어 자동으로 <code class="language-plaintext highlighter-rouge">MappingJackson2HttpMessageConverter</code> 를 사용하여 http 요청본문을 JSON으로 변환해 줄 수 있다.</p>

<ul>
  <li>
    <p>스프링 부트의 <code class="language-plaintext highlighter-rouge">WebMvcAutoConfiguration</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpMessageConverters</span> <span class="kd">implements</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="nc">HttpMessageConverter</span><span class="o">&lt;?&gt;&gt;</span> <span class="o">{</span>
  <span class="o">....</span>
  <span class="kd">static</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Class</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">nonReplacingConverters</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="n">addClassIfExists</span><span class="o">(</span><span class="n">nonReplacingConverters</span><span class="o">,</span>
        <span class="s">"org.springframework.hateoas.server.mvc.TypeConstrainedMappingJackson2HttpMessageConverter"</span><span class="o">);</span>
    <span class="no">NON_REPLACING_CONVERTERS</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableList</span><span class="o">(</span><span class="n">nonReplacingConverters</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="o">...</span>
  <span class="kd">static</span> <span class="o">{</span>
    <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Class</span><span class="o">&lt;?&gt;,</span> <span class="nc">Class</span><span class="o">&lt;?&gt;&gt;</span> <span class="n">equivalentConverters</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
    <span class="n">putIfExists</span><span class="o">(</span><span class="n">equivalentConverters</span><span class="o">,</span> 
    <span class="s">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span><span class="o">,</span>
        <span class="s">"org.springframework.http.converter.json.GsonHttpMessageConverter"</span><span class="o">);</span>
    <span class="no">EQUIVALENT_CONVERTERS</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">unmodifiableMap</span><span class="o">(</span><span class="n">equivalentConverters</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="mappingjackson2httpmessageconverter"><code class="language-plaintext highlighter-rouge">MappingJackson2HttpMessageConverter</code></h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Jackson ObjectMapper</code>를 이용해서 자바오브젝트와 JSON을 자동변환해주는 메세지 컨버터</li>
  <li>지원 미디어 타입은 <code class="language-plaintext highlighter-rouge">application/json</code></li>
  <li>자바 타입에 제한은 없지만, 프로퍼티를 가진 자바 빈이거나 HashMap을 이용해야 정확한 변환 결과를 얻을 수 있다.</li>
  <li>날짜, 숫자 등에서 포맷을 적용하는 부가적인 변환 기능이 필요하면 <code class="language-plaintext highlighter-rouge">ObjectMapper</code>를 확장해서 적용할 수 있다.</li>
</ul>

<h1 id="46-mvc-네임스페이스">4.6 MVC 네임스페이스</h1>

<hr />

<h2 id="mvc-스키마의-태그">mvc 스키마의 태그</h2>

<hr />

<h3 id="mvcannotation-driven">mvc:annotation-driven</h3>

<ul>
  <li>이 태그는 애노테이션 방식의 컨트롤러를 사용할 때, 필요한 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code> 전략빈을 자동으로 등록 해준다.
    <ul>
      <li><strong>전용 태그에 의해 인프라 빈이 등록 되므로 기본 전략은 무시된다!</strong>
-<code class="language-plaintext highlighter-rouge"> &lt;mvc:annotation-driven&gt;</code>에 의해 자동으로 등록되는 빈 정보</li>
      <li>핸들러 매핑
        <ul>
          <li><code class="language-plaintext highlighter-rouge">RequestMappingHandlerMapping</code> 를 빈으로 등록한다.</li>
          <li>다른 디폴트 핸들러 매핑 전략은 등록되지 않는다.</li>
        </ul>
      </li>
      <li>핸들러 어댑터
        <ul>
          <li><code class="language-plaintext highlighter-rouge">RequestMappingHanlderAdapter</code>를 빈으로 등록한다.</li>
          <li>다른 디폴트 핸들러 어댑터 전략은 자동 등록되지 않는다.</li>
        </ul>
      </li>
      <li>메세지 컨버터
        <ul>
          <li><code class="language-plaintext highlighter-rouge">HandlerMappingHandlerAdapter</code>의 <code class="language-plaintext highlighter-rouge">messageConverters</code> 프로퍼티로 메세지 컨버터들이 등록된다.</li>
          <li>4개의 기본 전략의 메세지 컨버터와 함께 클래스 패스에 jaxb2와 jackson 라이브러리가 존재하면 <code class="language-plaintext highlighter-rouge">Jaxb2RootElementHttpMessageConverter</code>, <code class="language-plaintext highlighter-rouge">MappingJackson2HttpMessageConverter</code>가 추가로 등록된다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">RequestMappingHandlerAdpater</code>와 <code class="language-plaintext highlighter-rouge">RequestMappingHandlerMapping</code> 등의 설정을 변경해야 할때는 <code class="language-plaintext highlighter-rouge">mvc:annotation-driven</code> 태그를 사용할 수 없다. 이때는 필요한 빈을 등록하고 프로퍼티를 통해 설정 해줘야 한다.</li>
</ul>

<h3 id="mvcinterceptors">mvc:interceptors</h3>

<ul>
  <li>모든 핸들러 매핑에 일괄적용되는 인터셉터를 한 번에 설정할 수 있다.</li>
  <li>
    <p>URL 패턴을 지정할 수 있다.</p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;mvc:interceptors&gt;</span>
    <span class="nt">&lt;mvc:interceptor&gt;</span>
      <span class="nt">&lt;mvc:mapping</span> <span class="na">path=</span><span class="s">"/admin/*"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"..AdminInterceptor"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/mvc:interceptor&gt;</span>
  <span class="nt">&lt;/mvc:interceptors&gt;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="mvcview-controller">mvc:view-controller</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;mvc:view-controller</span> <span class="na">path=</span><span class="s">"/"</span> <span class="na">view-name=</span><span class="s">"/index"</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;mvc:view-controller&gt;</code>를 하나라도 등록하면 <code class="language-plaintext highlighter-rouge">SimplelUrlHandlerMapping</code>과 <code class="language-plaintext highlighter-rouge">SimpleControllerHandlerAdapter</code>를 자동으로 등록한다.</li>
</ul>

<h1 id="49-스프링-31의-mvc">4.9 스프링 3.1의 @MVC</h1>

<hr />

<h3 id="requestmapping을-지원하는-dispatcherservlet-전략의-변화">@RequestMapping을 지원하는 DispatcherServlet 전략의 변화</h3>

<ul>
  <li>핸들러 매핑
    <ul>
      <li><code class="language-plaintext highlighter-rouge">DefaultAnnotationHandlerMapping</code> → <code class="language-plaintext highlighter-rouge">RequestMappingHandlerMapping</code></li>
      <li><code class="language-plaintext highlighter-rouge">@RequestMapping</code> 지원 핸들러 매핑</li>
    </ul>
  </li>
  <li>핸들러 어댑터
    <ul>
      <li><code class="language-plaintext highlighter-rouge">AnnotationMethodHandlerAdpater</code> → <code class="language-plaintext highlighter-rouge">RequestMappingHandlerAdpater</code></li>
      <li><code class="language-plaintext highlighter-rouge">@RequestMapping</code> 지원 핸들러 어댑터</li>
    </ul>
  </li>
  <li>핸들러 익셉션 리졸버
    <ul>
      <li><code class="language-plaintext highlighter-rouge">AnnotationMethodHandlerExceptionResolver</code> → <code class="language-plaintext highlighter-rouge">ExceptionHandlerExceptionResolver</code></li>
      <li><code class="language-plaintext highlighter-rouge">@ExceptionHanlder</code>를 지원하는 전략 클래스</li>
    </ul>
  </li>
</ul>

<h3 id="스프링-31-mvc-변화의-가장-큰-특징">스프링 3.1 @MVC 변화의 가장 큰 특징</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code> 전략이 아주 유연한 확장성을 가질 수 있도록 아키텍쳐가 개선되었다.</li>
</ul>

<h3 id="requestmapping-메소드와-핸들러-매핑-전략의-불일치">@RequestMapping 메소드와 핸들러 매핑 전략의 불일치</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@RequestMapping</code>을 담당하는 <code class="language-plaintext highlighter-rouge">DefaultAnnoationHandlerMapping</code> 같은 전략 클래스가 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code> 전략의 설계 의도와 맞지 않는 부분이 존재 하였다.</li>
  <li><code class="language-plaintext highlighter-rouge">@RequestMapping</code>은 웹 요청을 컨트롤러 오브젝트가 아닌 오브젝트 내 특정 메소드에 매핑하도록 설계되어 있다. (메소드 레벨에 매핑정보를 넣는 전략)</li>
  <li><code class="language-plaintext highlighter-rouge">@RequestMapping</code> 방식에선 리플렉션과 같은 메타 프로그래밍 API를 이용해야만 메소드 호출이 가능하다.</li>
  <li>자바의 메소드는 오브젝트로 취급되지 않기 때문에 빈이 될수 없다.
    <ul>
      <li>메소드 레벨의 핸들러에 직접 매핑할 방법이 없다는 문제가 발생하였다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">DefaultAnnotationHandlerMapping</code> 전략
    <ul>
      <li>매핑 결과가 요청을 담당할 메소드가 속해있는 컨트롤러 오브젝트이다.</li>
      <li><code class="language-plaintext highlighter-rouge">AnnoationHandlerAdpater</code>가 실행된 메소드를 찾는 매핑 작업을 추가로 해야 했었다.</li>
      <li>🧨 <strong>핸들러 어댑터가 매핑 역할을 부분적으로 가지고 있는 이상한 구조이다.</strong></li>
      <li>핸들러 매핑 전략에서 설정된 핸들러 정보만 가지고 어떤 메소드가 사용될지 알 수 없기 때문에 핸들러 인터셉터의 활용도 제한 되었다.
        <ul>
          <li>핸들러 인터셉터는 핸들러 매핑이 끝나고, 실제 핸들러 실행되기 전후에 동작한다.</li>
        </ul>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(..</span><span class="na">Object</span> <span class="nc">Handler</span><span class="o">){</span>
      <span class="c1">// 여기서 넘어오는 handler는 컨트롤러 오브젝트임</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li>
    <p>스프링 3.1 부터는 예전처럼 컨트롤러 오브젝트가 아니라 <code class="language-plaintext highlighter-rouge">HandlerMethod</code>라는 새로운 타입의 오브젝트를 핸들러로 넘겨준다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">preHandle</span><span class="o">(...</span><span class="na">Object</span> <span class="n">handler</span><span class="o">){</span>
      <span class="nc">HandlerMethod</span> <span class="n">hm</span> <span class="o">=</span> <span class="o">(</span><span class="nc">HandlerMethod</span><span class="o">)</span> <span class="n">handler</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="handlermethod">HandlerMethod</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">RequestMappingHandlerMapping</code>
    <ul>
      <li>웹 요청을 <code class="language-plaintext highlighter-rouge">HandlerMethod</code> 오브젝트에 매핑한다.</li>
      <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>가 초기화 될 때 모든 컨트롤러 빈의 메소드를 살펴서 매핑 후보가 될 메소드를 추출하여 이를 <code class="language-plaintext highlighter-rouge">HandlerMethod</code> 형태로 저장한다.</li>
      <li>실제 요청이 들어오면 저장해둔 목록에서 요청 조건에 맞는 <code class="language-plaintext highlighter-rouge">HandlerMethod</code> 오브젝트를 찾아 돌려준다.</li>
      <li>매핑의 결과가 <code class="language-plaintext highlighter-rouge">HandlerMethod</code> 타입의 추상화된 오브젝트 형태로 만들어진다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">&lt;mvc:annotation-driven&gt;</code> 사용시  기본적으로 등록되는 전략 빈</li>
</ul>

<h2 id="494-enablewebmvc와-webmvcconfigurationsupport를-이용한-mvc-설정">4.9.4 @EnableWebMvc와 WebMvcConfigurationSupport를 이용한 @MVC 설정</h2>
<p>자바 코드를 이용한 @MVC 빈 등록 및 설정 방식</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>o.s.context.annotation.internalConfigurationAnnotationProcessor
o.s.context.annotation.internalAutowiredAnnotationProcessor
o.s.context.event.internalEventListenerProcessor
o.s.context.event.internalEventListenerFactory

o.s.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping

o.s.format.support.FormattingConversionServiceFactoryBean#0
o.s.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter

o.s.web.servlet.handler.MappedInterceptor#0
o.s.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0
o.s.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0
o.s.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0
o.s.web.servlet.handler.BeanNameUrlHandlerMapping
o.s.web.servlet.mvc.HttpRequestHandlerAdapter
o.s.web.servlet.mvc.SimpleControllerHandlerAdapter
</code></pre></div></div>

<hr />

<h3 id="enablewebmvc와-webmvcconfigurer">@EnableWebMvc와 WebMvcConfigurer</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableWebMvc</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConfig</span> <span class="kd">extends</span> <span class="nc">WebMvcConfigurerAdpater</span> <span class="o">{</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebMvcConfigurerAdpater</span> <span class="kd">implements</span> <span class="nc">WebMvcConfigurer</span> <span class="o">{</span>
<span class="o">}</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebMvcConfigurerAdpater2</span> <span class="kd">extends</span> <span class="nc">WebMvcConfigurationSupport</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">WebConfig</code>는 웹 계층용 컨텍스트에 들어갈 내용이기 때문에 서블릿 컨텍스트에서 사용하는 설정정보로 적합하다.</li>
  <li><code class="language-plaintext highlighter-rouge">WebMvcConfigurationSupport</code> 클래스를 상속하는 빈을 등록
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@EnableWebMVC</code>에 의해 등록되는 모든 전략빈의 내용을 <code class="language-plaintext highlighter-rouge">@Bean</code> 메소드로 갖고 있는 클래스 이다. (반면 <code class="language-plaintext highlighter-rouge">WebMVCConfigurer</code>는 직접 @MVC 관련 빈을 생성하는 기능은 없다)</li>
      <li><code class="language-plaintext highlighter-rouge">RequestMappingHandlerMapping</code> 전략 빈이나 <code class="language-plaintext highlighter-rouge">RequestMappingHandlerAdpater</code> 전략 빈 등을 직접 정의하고 있는 @Bean 메소드가 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="mvc-전략용-설정-빈-등록">@MVC 전략용 설정 빈 등록</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">WebConfigurer</code>를 통해서는 등록되지 않은 @MVC 관련 빈도 존재</li>
  <li>대표적으로 <code class="language-plaintext highlighter-rouge">InternalResourceViewResolver</code> 빈이다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebConifg</span> <span class="o">{</span>
  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">InternalResourceViewResolver</span> <span class="nf">viewResolver</span><span class="o">()</span> <span class="o">{</span>
      <span class="nc">InternalResourceViewResolver</span> <span class="n">resolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InternalResourceViewResolver</span><span class="o">();</span>
      <span class="n">resolver</span><span class="o">.</span><span class="na">setPrefix</span><span class="o">(</span><span class="s">"/WEB-INF/views/"</span><span class="o">);</span>
      <span class="n">resolver</span><span class="o">.</span><span class="na">setSuffix</span><span class="o">(</span><span class="s">".jsp"</span><span class="o">);</span>
      <span class="k">return</span> <span class="n">resolver</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<h3 id="참고">[참고]</h3>
<p>뷰, 뷰 리졸버, 지역정보 리졸버, 멀티파트 리졸버, 메세지 소스 처럼 서블릿 컨텍스트에 빈 형태로 등록해줘야 하는 것들은 모두 @Bean 메소드를 이용해 등록할 수있다.</p>]]></content><author><name>aken5887</name></author><category term="Spring" /><category term="토비의스프링" /><summary type="html"><![CDATA[4.5 메세지 컨버터와 AJAX]]></summary></entry><entry><title type="html">토비의 스프링 - 2-4장 스프링 @MVC</title><link href="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/12/post1.html" rel="alternate" type="text/html" title="토비의 스프링 - 2-4장 스프링 @MVC" /><published>2023-06-12T00:00:00+00:00</published><updated>2023-06-12T00:00:00+00:00</updated><id>https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/12/post1</id><content type="html" xml:base="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/12/post1.html"><![CDATA[<h1 id="스프링-mvc와-dispatcherservlet">스프링 MVC와 DispatcherServlet</h1>

<ul>
  <li>스프링은 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>과 7가지의 전략을 기반으로 한 MVC 프레임워크를 제공한다.
    <ol>
      <li><code class="language-plaintext highlighter-rouge">HandlerMapping</code></li>
      <li><code class="language-plaintext highlighter-rouge">HandlerAdapter</code></li>
      <li><code class="language-plaintext highlighter-rouge">ViewResolver</code></li>
      <li><code class="language-plaintext highlighter-rouge">HandlerExceptionResolver</code></li>
      <li><code class="language-plaintext highlighter-rouge">ThemeResolver</code></li>
      <li><code class="language-plaintext highlighter-rouge">LocaleResolver</code></li>
      <li><code class="language-plaintext highlighter-rouge">RequestToViewNameTranslator</code></li>
    </ol>
  </li>
  <li>스프링 MVC 프레임워크의 장점은 유연한 확장이 가능하도록 설계된 MVC 엔진인 <strong><code class="language-plaintext highlighter-rouge">DispatcherServlet</code></strong>이다.</li>
</ul>

<h1 id="41-requestmapping-핸들러-매핑">4.1 @RequestMapping 핸들러 매핑</h1>

<hr />

<ul>
  <li>@MVC의 가장 큰 특징
    <ul>
      <li>핸들러 매핑과 핸들러 어댑터의 대상이 오브젝트가 아니라 메소드이다.</li>
    </ul>
  </li>
  <li>@MVC 등장이전
    <ul>
      <li>컨트롤러 타입을 비교해서 컨트롤러를 선택, 타입에 정의된 메소드를 통해 실행한다.</li>
    </ul>
  </li>
  <li>@MVC 등장이후
    <ul>
      <li>애노테이션으로 대체 하였다.</li>
    </ul>
  </li>
  <li>@MVC 핸들러 매핑을 위해서는 <strong><code class="language-plaintext highlighter-rouge">RequestMappingHandlerMapping</code></strong>이 필요하다.
    <ul>
      <li><strong><code class="language-plaintext highlighter-rouge">RequestMappingHandlerMapping</code></strong>은 핸들러 매핑의 기본 전략 중 하나이다.</li>
    </ul>
  </li>
</ul>

<h2 id="411-클래스메소드-결합-매핑정보">4.1.1 클래스/메소드 결합 매핑정보</h2>

<ul>
  <li><strong><code class="language-plaintext highlighter-rouge">RequestMappingHandlerMapping</code></strong>의 핵심은 매핑정보로 <code class="language-plaintext highlighter-rouge">@RequestMapping</code> 애노티에션을 활용한다는 점이다.</li>
  <li>타입과 메소드 레벨에 붙은 정보를 결합하여 최종 매핑 정보를 생성한다.</li>
</ul>

<h3 id="requestmapping-애노테이션"><code class="language-plaintext highlighter-rouge">@RequestMapping</code> 애노테이션</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">String[] value()</code> : URL 패턴
    <ul>
      <li>하나 이상의 URL 패턴을 지정할 수 있다.</li>
      <li>디폴트 접미어 패턴이 적용 된다.
        <ul>
          <li>확장자가 붙지 않고, / 로 끝나지도 않은 URL 패턴</li>
          <li>@RequestMapping(“/hello”)
            <ul>
              <li>/helllo.do, /hello.html, /hello/ .. 모두 매핑됨</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>
  </li>
  <li>매핑조건을 만족하는 경우가 여러 개가 있을 때는 좀 더 많은 조건을 만족시키는 쪽이 우선된다.</li>
</ul>

<h2 id="412-타입-상속과-매핑">4.1.2 타입 상속과 매핑</h2>

<hr />

<ul>
  <li>서브 클래스에서 재정의하지 않는 한 <code class="language-plaintext highlighter-rouge">@RequesetMapping</code> 정보는 상속되며 유지된다.</li>
  <li><code class="language-plaintext highlighter-rouge">@RequestMapping</code>을 인터페이스 레벨에서 부여하면, 타입 상속(인터페이스 구현)을 통해 공통 매핑정보를 일괄적으로 적용할 수 있다.</li>
</ul>

<h1 id="42-controller">4.2 Controller</h1>

<hr />

<ul>
  <li>
    <p><del>DefaultAnnotationHandlerMapping</del> → <strong><code class="language-plaintext highlighter-rouge">RequestMappingHandlerMapping</code></strong></p>

    <p><img src="/assets/images/posts/2023-06-12-post1/Untitled.png" alt="Untitled" /></p>

    <p>사용자 요청을 <code class="language-plaintext highlighter-rouge">@RequestMapping</code> 정보를 활용해서 컨트롤러 빈의 메소드에 매핑한다.</p>
  </li>
  <li>
    <p><strong><del>AnnotationMethodHandlerAdapter</del> -&gt; <code class="language-plaintext highlighter-rouge">RequestMappingHandlerAdpater</code></strong></p>

    <p><img src="/assets/images/posts/2023-06-12-post1/Untitled%201.png" alt="Untitled" /></p>

    <p>매핑된 메소드를 실제로 호출하는 역할을 담당한다.</p>
  </li>
</ul>

<p>💡 <strong>컨트롤러가 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>으로부터 실행되는 과정</strong></p>

<p>핸들러 어댑터는 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code> 로 부터 <code class="language-plaintext highlighter-rouge">HttpServletRequest</code> 와 <code class="language-plaintext highlighter-rouge">HttpServletResponse</code> 를 제공 받아 컨트롤러가 사용하는 파라미터 타입으로 변환해서 제공해 준다. 그리고 컨트롤러 로부터 받은 결과를 <code class="language-plaintext highlighter-rouge">ModelAndview</code> 타입의 오브젝트에 담아서 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>에 넘겨준다.</p>

<p>💡 최적화된 메소드 설계</p>

<p>스프링은 메소드의 파라미터와 리턴 값이 어떻게 선언되었는지 살펴보고, 이를 이용해 적절한 파라미터 값을 준비해서 호출해준다.</p>

<p>리턴 값도 타입에 따라 적절한 방식으로 사용한다.</p>

<h2 id="421-메소드-파라미터-종류">4.2.1 메소드 파라미터 종류</h2>

<hr />

<p>스프링은 파라미터의 타입과 이름, 애노테이션 정보를 참고해서 그에 맞는 파라미터 값을 제공해준다.</p>

<h3 id="httpservletrequest-httpservletresponse">HttpServletRequest, HttpServletResponse</h3>

<h3 id="httpsession">HttpSession</h3>

<h3 id="inputstream-reader-outputstream-writer">InputStream, Reader, OutputStream, Writer</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">HttpServletRequest</code>의 <code class="language-plaintext highlighter-rouge">getOutputStrem(…)</code>으로 가져올 수 있는 출력용 콘텐트 스트림 또는 Writer 타입 오브젝트를 받을 수 있다.</li>
</ul>

<h3 id="pathvariable">@PathVariable</h3>

<h3 id="requestparam">@RequestParam</h3>

<ul>
  <li>선언된 인자는 기본적으로 필수 값으로 설정된다. 인자 값이 선택인 경우 <code class="language-plaintext highlighter-rouge">required=false</code> 를 사용한다.</li>
  <li>애노테이션은 생략이 가능하다.</li>
</ul>

<h3 id="cookievalue">@CookieValue</h3>

<ul>
  <li>선언된 인자는 기본적으로 필수 값으로 설정된다. 인자 값이 선택인 경우 <code class="language-plaintext highlighter-rouge">required=false</code> 를 사용한다.</li>
</ul>

<h3 id="requestheader">@RequestHeader</h3>

<ul>
  <li>헤더 정보를 메소드 파라미터에 바인딩 한다.</li>
  <li>선언된 인자는 기본적으로 필수 값으로 설정된다. 인자 값이 선택인 경우 <code class="language-plaintext highlighter-rouge">required=false</code> 를 사용한다.</li>
</ul>

<h3 id="map-model-modelmap">Map, Model, ModelMap</h3>

<ul>
  <li>모두 모델정보를 담는 데 사용할 수 있는 오브젝트가 전달된다.</li>
  <li>파라미터로 정의하여 <strong>핸들러 어댑터에서 미리 만들어 제공해주는 것</strong>을 사용하는 것이 편리하다.</li>
  <li><code class="language-plaintext highlighter-rouge">Model</code>, <code class="language-plaintext highlighter-rouge">ModelMap</code> 모두 <code class="language-plaintext highlighter-rouge">addAttribute(…)</code> 메소드를 제공해 준다.</li>
</ul>

<h3 id="modelattribute">@ModelAttribute</h3>

<ul>
  <li>메소드 레벨, 메소드 파라미터에도 부여할 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">@ModelAttribute</code>가 붙은 인자는 모델 맵에 담겨서 뷰에 전달되는 모델 오브젝트의 한가지로서, 별도의 설정 없이도 자동으로 뷰에 전달된다.</li>
  <li>스프링은 <code class="language-plaintext highlighter-rouge">@ModelAttribute</code>가 붙은 파라미터 타입의 오브젝트를 만들고 프로퍼티를 통해 요청 파라미터를 넣어준다.</li>
  <li><strong>@ModelAttribute 애노테이션도 생략이 가능하다!!…</strong>
    <ul>
      <li>스프링은 <code class="language-plaintext highlighter-rouge">String</code>, <code class="language-plaintext highlighter-rouge">int</code>등 기본 타입은 <code class="language-plaintext highlighter-rouge">@RequetParam</code>이 생략된 것으로 보고, 그 외의 복잡한 오브젝트는 모두 <code class="language-plaintext highlighter-rouge">@ModelAttribute</code>가 생략됐다고 간주한다.</li>
      <li>가능한 <code class="language-plaintext highlighter-rouge">@ModelAttribute</code>, <code class="language-plaintext highlighter-rouge">@RequestParam</code>은 생략하지 않고 사용하는 것을 권장한다. (인자의 기능과 역할이 명시적이고 뚜렷하다.)</li>
    </ul>
  </li>
  <li><strong>컨트롤러가 리턴하는 모델에 파라미터로 전달된 오브젝트를 자동으로 추가한다. 이때 모델 이름은 파라미터 타입의 이름을 따른다.</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@ModelAttribute</code> 애노테이션만으로도 모델 오브젝트를 모델 맵에 추가해줌</li>
    </ul>
  </li>
</ul>

<h3 id="참고-modelattribute가-붙은-모델과-그-밖에-모델의-차이">[참고] @ModelAttribute가 붙은 모델과 그 밖에 모델의 차이</h3>
<ol>
  <li>웹 페이지의 폼 정보처럼 컨트롤러가 전달 받아 내부 로직에 사용하고, 필요에 따라 다시 화면에 출력하기도 하는 요청 정보이다.</li>
  <li>@ModelAttribute는 1과 같이 컨트롤러에 전달 받는 오브젝트의 형태의 정보를 가르킨다.</li>
  <li><strong>커맨드 오브젝트</strong> : 하나의 오브젝트에 클라이언트의 요청정보를 한번에 담아 전달하는 것을 커맨드 패턴에서 말하는 커맨트 오브젝트라 한다.</li>
</ol>

<h3 id="error-bindingresult">Error, BindingResult</h3>

<ul>
  <li>변환이 불가능한 타입의 요청 파라미터가 들어온 경우
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@RequestParam</code> → HTTP 400 - Bad Request 응답이 클라이언트로 전달한다.</li>
      <li><code class="language-plaintext highlighter-rouge">@ModelAttribute</code> → 타입 변환 중에 발생한 예외가 <code class="language-plaintext highlighter-rouge">BindException</code> 타입의 오브젝트에 담겨서 컨트롤러로 전달 된다. 즉, 타입 변환 문제를 바로 에러 처리하지 않는다.
        <ul>
          <li>컨트롤러는 적절한 에러 페이지를 출력하거나, 친절한 에러 메세지를 통해서 사용자가 폼을 다시 수정할 기회를 줘야 한다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">@ModelAttribute</code>를 통해 폼의 정보를 전달 받을 때는 <code class="language-plaintext highlighter-rouge">Errors</code> 또는 <code class="language-plaintext highlighter-rouge">BindingResult</code> 타입의 파라미터를 함께 사용함.
    <ul>
      <li>이 두 가지 타입의 파라미터는 반드시 <code class="language-plaintext highlighter-rouge">@ModelAttribute</code> 파라미터 뒤에 나와야 한다. 바로 앞에 있는 <code class="language-plaintext highlighter-rouge">@ModelAttribute</code> 파라미터 검증 작업에서 발생한 오류만 전달 해주기 때문이다.</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@GeteMapping</span><span class="o">(</span><span class="s">"/result"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">result</span><span class="o">(</span><span class="nd">@ModelAttribute</span> <span class="nc">ResultRequest</span> <span class="n">req</span><span class="o">,</span> <span class="nc">BindingResult</span> <span class="n">bindingResult</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">bindingResult</span><span class="o">.</span><span class="na">hasError</span><span class="o">()){</span>
      <span class="c1">// 에러 처리 메세지 출력</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="requestbody">@RequestBody</h3>

<ul>
  <li>이 애노테이션이 붙은 파라미터에는 HTTP 요청 Body 부분이 그대로 전달 된다.</li>
  <li>XML이나 JSON 기반의 메세지를 사용하는 요청의 경우에는 이 방법이 매우 유용</li>
  <li><code class="language-plaintext highlighter-rouge">AnnotationMethodHandlerAdapter</code>에는 <code class="language-plaintext highlighter-rouge">HttpMessageConverter</code> 타입의 “메세지 변환기”가 여러 개 등록되어 있다.
    <ol>
      <li><code class="language-plaintext highlighter-rouge">@RequestBody</code>가 붙은 파라미터가 있으면 HTTP 요청의 미디어 타입과 파라미터 타입을 우선 확인 한다.</li>
      <li>메세지 변환기 중에서 해당 미디어 타입과 파라미터 타입을 처리할 수 있는 것이 있다면, HTTP 요청의 본문 부분을 통째로 변환해서 지정된 메소드 파라미터로 전달해준다.</li>
    </ol>
  </li>
  <li><code class="language-plaintext highlighter-rouge">MessageConverter</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ByteArrayHttpMessageConverter</code></li>
      <li><code class="language-plaintext highlighter-rouge">StringHttpMessageConverter</code></li>
      <li><code class="language-plaintext highlighter-rouge">SourceHttpMessageConverter</code></li>
      <li><code class="language-plaintext highlighter-rouge">AllEncompassingFormHttpMessageConverter</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">@RequestBody</code>는 보통 <code class="language-plaintext highlighter-rouge">@ResponseBody</code>와 함께 사용된다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">RequestMappingHandlerAdapter</code></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// spring 5.3</span>
  <span class="kd">public</span> <span class="nf">RequestMappingHandlerAdapter</span><span class="o">()</span> <span class="o">{</span>
   <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="mi">4</span><span class="o">);</span>
   <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ByteArrayHttpMessageConverter</span><span class="o">());</span>
   <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringHttpMessageConverter</span><span class="o">());</span>
   <span class="k">if</span> <span class="o">(!</span><span class="n">shouldIgnoreXml</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">try</span> <span class="o">{</span>
     <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">SourceHttpMessageConverter</span><span class="o">&lt;&gt;());</span>
    <span class="o">}</span>
    <span class="k">catch</span> <span class="o">(</span><span class="nc">Error</span> <span class="n">err</span><span class="o">)</span> <span class="o">{</span>
  <span class="c1">// Ignore when no TransformerFactory implementation is available</span>
  <span class="o">}</span>
   <span class="o">}</span>
   <span class="k">this</span><span class="o">.</span><span class="na">messageConverters</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">AllEncompassingFormHttpMessageConverter</span><span class="o">());</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="참고-handleradapter-동작과정">[참고] HandlerAdapter 동작과정</h3>

<h3 id="요청-처리-시-handleradapter의-동작-과정">요청 처리 시 HandlerAdapter의 동작 과정</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">HandlerMapping</code>을 통해 적절한 <code class="language-plaintext highlighter-rouge">HandlerAdapter</code>를 찾으면 <code class="language-plaintext highlighter-rouge">HandlerAdapter</code>는 Controller로 넘겨줄 파라미터를 결정하기 위해 이 작업을 <code class="language-plaintext highlighter-rouge">HandlerMethodArgumentResolver</code>에게 위임합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">HandlerMethodArgumentResolver</code>는 <code class="language-plaintext highlighter-rouge">HttpMessageConverter</code>에게 HTTP Request Body를 특정 타입의 객체로 변환해주기를 요청합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">HttpMessageConverter</code>는 HTTP Request Body를 특정 타입의 객체로 변환합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">HandlerMethodArgumentResolver</code>는 변환된 데이터를 전달 받아서 이 데이터를 다시 <code class="language-plaintext highlighter-rouge">HandlerAdapter</code>에게 전달합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">HandlerAdapter</code>는 <code class="language-plaintext highlighter-rouge">HandlerMethodArgumentResolver</code>로부터 전달 받은 데이터를 핸들러 메서드의 파라미터로 포함 시킨 후, 핸들러 메서드를 호출합니다.</li>
</ul>

<h3 id="응답-처리-시-handleradapter의-동작-과정">응답 처리 시 HandlerAdapter의 동작 과정</h3>

<ul>
  <li>핸들러 메서드가 응답으로 전달할 데이터를 리턴합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">HandlerMethodReturnValueHandler</code>는 핸들러 메서드로부터 전달 받은 응답 데이터를 <code class="language-plaintext highlighter-rouge">HttpMessageConverter</code>에게 전달합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">HttpMessageConverter</code>는 <code class="language-plaintext highlighter-rouge">HandlerMethodReturnValueHandler</code>로부터 전달 받은 데이터를 HTTP Response Body에 포함되는 형식의 데이터로 변환합니다.</li>
  <li><code class="language-plaintext highlighter-rouge">HandlerMethodReturnValueHandler</code>는 <code class="language-plaintext highlighter-rouge">HttpMessageConverter</code>로부터 전달 받은 데이터를 <code class="language-plaintext highlighter-rouge">HandlerAdapter</code>에게 전달합니다.</li>
</ul>

<p><img src="/assets/images/posts/2023-06-12-post1/Untitled%202.png" alt="Untitled" /></p>

<p><em>출처 : <a href="https://velog.io/@yoho98/HTTP-%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%BB%A8%EB%B2%84%ED%84%B0HttpMessageConverterfeat.-Argumentresolver-ReturnValueHandler">https://velog.io/@yoho98/HTTP-메시지-컨버터HttpMessageConverterfeat.-Argumentresolver-ReturnValueHandler</a></em></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">HandlerAdapter</code> → <code class="language-plaintext highlighter-rouge">HandlerMethodArgumentResolver</code> 호출
    <ul>
      <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code> - <code class="language-plaintext highlighter-rouge">doService</code></li>
      <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code> - <code class="language-plaintext highlighter-rouge">doDispatch</code></li>
      <li><code class="language-plaintext highlighter-rouge">RequestMappingHandlerAdapter</code> - <code class="language-plaintext highlighter-rouge">handleInternal</code></li>
      <li><code class="language-plaintext highlighter-rouge">RequestMappingHandlerAdapter</code> - <code class="language-plaintext highlighter-rouge">invokeHandlerMethod</code></li>
      <li><code class="language-plaintext highlighter-rouge">ServletInvocableHandlerMethod</code> - <code class="language-plaintext highlighter-rouge">invokeAndHandle</code></li>
      <li><code class="language-plaintext highlighter-rouge">InvocableHandlerMethod</code> - <code class="language-plaintext highlighter-rouge">invokeForRequest</code></li>
      <li><code class="language-plaintext highlighter-rouge">InvocableHandlerMethod</code>  - <code class="language-plaintext highlighter-rouge">getMethodArgumentValues</code></li>
      <li><code class="language-plaintext highlighter-rouge">HandlerMethodArgumentResolverComposite</code> - <code class="language-plaintext highlighter-rouge">resolveArgument</code></li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Override</span>
  <span class="nd">@Nullable</span>
  <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">resolveArgument</span><span class="o">(</span><span class="nc">MethodParameter</span> <span class="n">parameter</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">ModelAndViewContainer</span> <span class="n">mavContainer</span><span class="o">,</span>
    <span class="nc">NativeWebRequest</span> <span class="n">webRequest</span><span class="o">,</span> <span class="nd">@Nullable</span> <span class="nc">WebDataBinderFactory</span> <span class="n">binderFactory</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
  
    <span class="nc">HandlerMethodArgumentResolver</span> <span class="n">resolver</span> <span class="o">=</span> <span class="n">getArgumentResolver</span><span class="o">(</span><span class="n">parameter</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">resolver</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Unsupported parameter type ["</span> <span class="o">+</span>
      <span class="n">parameter</span><span class="o">.</span><span class="na">getParameterType</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"]. supportsParameter should be called first."</span><span class="o">);</span>
     <span class="o">}</span>
    <span class="k">return</span> <span class="n">resolver</span><span class="o">.</span><span class="na">resolveArgument</span><span class="o">(</span><span class="n">parameter</span><span class="o">,</span> <span class="n">mavContainer</span><span class="o">,</span> <span class="n">webRequest</span><span class="o">,</span> <span class="n">binderFactory</span><span class="o">);</span>
<span class="o">}</span>                    
</code></pre></div>    </div>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@ModelAttribuite</code> 이용시 <code class="language-plaintext highlighter-rouge">ModelAttributeMethodProcessor</code> - <code class="language-plaintext highlighter-rouge">resolveArgument</code></li>
      <li><code class="language-plaintext highlighter-rouge">@ResponseBody</code> 이용시 <code class="language-plaintext highlighter-rouge">RequestResponseBodyMethodProcessor</code> - <code class="language-plaintext highlighter-rouge">resolveArgument</code></li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">ReturnValueHandler</code>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ServletInvocableHandlerMethod</code> - <code class="language-plaintext highlighter-rouge">invokeAndHandle</code></li>
      <li><code class="language-plaintext highlighter-rouge">HandlerMethodReturnValueHandlerComposite</code> - <code class="language-plaintext highlighter-rouge">handleReturnValue</code></li>
      <li><code class="language-plaintext highlighter-rouge">@ModelAttribuite</code> 이용시 <code class="language-plaintext highlighter-rouge">ModelAttributeMethodProcessor</code> - <code class="language-plaintext highlighter-rouge">handleReturnValue</code></li>
      <li><code class="language-plaintext highlighter-rouge">@ResponseBody</code> 이용시 <code class="language-plaintext highlighter-rouge">RequestResponseBodyMethodProcessor</code> - <code class="language-plaintext highlighter-rouge">handleReturnValue</code></li>
    </ul>
  </li>
</ul>

<h2 id="422-리턴-타입-종류">4.2.2 리턴 타입 종류</h2>

<p>컨트롤러가 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>에 돌려줘야 하는 정보는 모델과 뷰다.</p>

<p>핸들러 어댑터를 거쳐서 최종적으로 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>에 돌아갈 때는 <code class="language-plaintext highlighter-rouge">ModelAndView</code> 타입으로 리턴 값이 전달된다.</p>

<h3 id="자동-추가-모델-오브젝트와-자동생성-뷰-이름">자동 추가 모델 오브젝트와 자동생성 뷰 이름</h3>

<p>메소드 리턴 타입에 상관없이 조건에 맞으면 모델에 자동으로 추가 되는 오브젝트 목록</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ModelAttribute</code> 모델 오브젝트</li>
  <li><code class="language-plaintext highlighter-rouge">Map, Model, ModelMap</code> 파라미터 오브젝트
    <ul>
      <li>타입의 인자를 사용하면 미리 생성된 모델 맵 오브젝트를 전달 받아서 오브젝트를 추가할 수 있다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">@ModelAttribute</code> 메소드
    <ul>
      <li>오브젝트 클래스 내의 다른 컨트롤러 메소드의 모델에 자동으로 추가된다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">BindingResult</code>
    <ul>
      <li>모델 맵에 추가될 때 키는 <code class="language-plaintext highlighter-rouge">org.springframework.validation.BindingResult.모델이름</code></li>
      <li>핸들러 인터셉트를 이용해 바인딩 결과를 로깅하거나 분석할 때 사용할 수 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="responsebody">@ResponseBody</h3>

<p><code class="language-plaintext highlighter-rouge">@ReponseBody</code>가 메소드 레벨에 부여되면 메소드가 리턴하는 오브젝트는 메세지 컨버터를 통해  바로 HTTP 응답의 메세지 본문으로 전환된다.</p>]]></content><author><name>aken5887</name></author><category term="Spring" /><category term="토비의스프링" /><summary type="html"><![CDATA[스프링 MVC와 DispatcherServlet]]></summary></entry><entry><title type="html">토비의 스프링 - 2-3장 스프링 웹 기술과 스프링 MVC</title><link href="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/11/post1.html" rel="alternate" type="text/html" title="토비의 스프링 - 2-3장 스프링 웹 기술과 스프링 MVC" /><published>2023-06-11T00:00:00+00:00</published><updated>2023-06-11T00:00:00+00:00</updated><id>https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/11/post1</id><content type="html" xml:base="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/11/post1.html"><![CDATA[<h1 id="31-스프링의-웹-프레젠테이션-계층-기술">3.1 스프링의 웹 프레젠테이션 계층 기술</h1>

<hr />

<h2 id="312-스프링-mvc와-dispatcherservlet-전략">3.1.2 스프링 MVC와 DispatcherServlet 전략</h2>

<hr />

<h3 id="dispatcherservlet과-mvc-아키텍처"><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>과 MVC 아키텍처</h3>

<ul>
  <li>MVC 아키텍처는 보통 프론트 컨트롤러 패턴과 함께 사용한다.</li>
  <li>프론트 컨트롤러는 프레젠테이션 게층 제일 앞에 둬서 서버로 들어오는 모든 요청을 먼저 받아 처리한다.
    <ul>
      <li>요청 → 공통 작업 수행 → 세부 컨트롤러로 작업 위임 → 뷰 선택 → 최종 결과 생성</li>
      <li>예외가 발생했을 때 이를 일관된 방식으로 처리한다.</li>
    </ul>
  </li>
  <li>스프링 서블릿/MVC의 핵심은 <strong><code class="language-plaintext highlighter-rouge">DispatcherServlet</code></strong> 이라는 프론트 컨트롤러 이다.
    <ul>
      <li>MVC 아키텍처로 구성된 프레젠테이션 계층을 만들 수 있도록 설계되어 있다.</li>
    </ul>
  </li>
</ul>

<h3 id="http-요청-부터-결과-응답까지-구조"><strong>HTTP 요청 부터 결과 응답까지 구조</strong></h3>

<ol>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code> - HTTP 요청 접수
    <ul>
      <li>자바의 서블릿 컨테이너는 HTTP 프로토콜을 통해 들어오는 요청이 스프링의 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code> 에 할당된 것이라면(url pattern 등), HTTP 요청정보를 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code> 에 전달해준다.</li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">web.xml</code>에는 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>이 전달 받을 URL 패턴이 정의되어 있다.</p>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;servlet-mapping&gt;</span>
    <span class="nt">&lt;servlet-name&gt;</span>Spring MBC Dispatcher Servlet<span class="nt">&lt;/servlet-name&gt;</span>
    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-patter&gt;</span>
  <span class="nt">&lt;/servlet-mapping&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>에서 컨트롤러로 HTTP 요청 위임
    <ul>
      <li><strong>핸들러 매핑</strong>
        <ul>
          <li>핸들러 = 컨트롤러 or 컨트롤러의 메소드</li>
          <li>핸들러 매핑 전략은 DI를 통해 얼마든지 확장 가능하다.
            <ul>
              <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 그 자체로 스프링 컨텍스트에 등록된 빈은 아니라 DI가 일어나진 않지만, DI 가 적용되는 것처럼 서블릿 애플리케이션 컨텍스트의 빈을 가져와 사용할 수 있다.</li>
              <li>특정 인터페이스를 구현한 빈을 자동으로 찾아오는 <strong>자동 와이어링 기법</strong>을 이용한다.</li>
            </ul>
          </li>
        </ul>
      </li>
      <li><strong>핸들러 어댑터</strong>
        <ul>
          <li>핸들러 어댑터 전략을 통해 결정하고 DI를 통해 자유롭게 확장 가능하다.</li>
          <li>어댑터가 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>로 부터 전달받은 <code class="language-plaintext highlighter-rouge">HttpServletRequest</code>를 적절히 변환해서, 컨트롤러의 메소드가 받을 수 있는 파라미터로 변환해서 전달해준다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>컨트롤러 모델 생성과 정보 등록
    <ol>
      <li>사용자의 요청을 해석</li>
      <li>실제 비지니스 로직을 수행하도록 서비스 계층에 작업을 위임</li>
      <li>결과를 받아서 모델을 생성</li>
      <li>어떤 뷰를 사용할 지 결정</li>
    </ol>
  </li>
  <li>컨트롤러 결과 리턴 - 모델과 뷰
    <ul>
      <li>컨트롤러가 뷰 오브젝트를 직접 리턴한다.</li>
      <li>뷰의 논리적인 이름을 리턴하는 경우, DispatcherServlet의 전략인 뷰 리졸버가 이를 이용해 뷰 오브젝트를 생성하여 리턴한다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServleet</code>의 뷰 호출과 모델 참조
    <ul>
      <li>브라우저에 나타날 HTML을 생성
        <ul>
          <li>동적으로 생성되도록 표시된 부분을 모델의 내용을 참고해서 내용을 채움</li>
        </ul>
      </li>
      <li>뷰 작업을 통한 최종 결과물은 <code class="language-plaintext highlighter-rouge">HttpServletResponse</code> 오브젝트에 담긴다.</li>
    </ul>
  </li>
  <li>HTTP 응답 돌려주기
    <ul>
      <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 등록된 <strong>후 처리기</strong>가 있는지 확인
        <ul>
          <li>등록된 후 처리기가 있다면 후 처리기에서 후속작업을 진행한다.</li>
        </ul>
      </li>
      <li><code class="language-plaintext highlighter-rouge">HttpServletResponse</code>에 담긴 최종 결과를 서블릿 컨테이너에게 돌려준다.</li>
      <li>서블릿 컨테이너는 <code class="language-plaintext highlighter-rouge">HttpServletResponse</code>에 담긴 정보를 HTTP 응답으로 만들어 사용자의 브라우저에 전송 후 종료한다.</li>
    </ul>
  </li>
</ol>

<h3 id="dispatcherservlet의-di-가능한-전략"><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>의 DI 가능한 전략</h3>

<p>🏳  <strong>HandlerMapping</strong></p>

<ul>
  <li>핸들러 매핑은 URL과 요청 정보를 기준으로 어떤 <strong>핸들러 오브젝트(컨트롤러)</strong>를 사용할 것 인지를 결정하는 로직을 담당한다.</li>
  <li><code class="language-plaintext highlighter-rouge">HandlerMapping</code> 인터페이스를 구현해서 만들 수 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 하나 이상의 핸들러 매핑을 가질 수 있다.</li>
  <li>2가지 기본 전략
    <ul>
      <li>BeanNameUrlHandlerMapping</li>
      <li><del>DefaultAnnotationHandlerMapping</del> → <strong>RequestMappingHandlerMapping</strong></li>
    </ul>
  </li>
</ul>

<p>🏳 <strong>HandlerAdapter</strong></p>

<ul>
  <li>핸들러 어댑터는 핸들러 매핑으로 선택한 핸들러 오브젝트(컨트롤러)를 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>가 호출할 때 사용한다. 컨트롤러 타입에 적합한 어댑터를 가져다가 컨트롤러를 호출한다.</li>
  <li>3가지 기본 전략
    <ul>
      <li>HttpRequestHandlerAdapter</li>
      <li>SimpleControllerHandlerAdapter</li>
      <li><strong>RequestMappingHandlerAdapter</strong></li>
    </ul>
  </li>
  <li>핸들러 매핑과 어댑터는 서로 관련이 있을 수도 없을 수 도 있다.</li>
  <li><code class="language-plaintext highlighter-rouge">@RequestMapping</code>, <code class="language-plaintext highlighter-rouge">@Controller</code> 애노테이션을 통해 정의되는 컨트롤러의 경우 아래 두가지 핸들러 매핑 &amp; 핸들러만 적용된다. (⭐️)
    <ul>
      <li><strong>RequestMappingHandlerMapping</strong></li>
      <li><strong>RequestMappingHandlerAdapter</strong></li>
    </ul>
  </li>
</ul>

<p>🏳 <strong>HandlerExceptionResolver</strong></p>

<ul>
  <li>예외가 발생했을 때 이를 처리하는 로직을 갖고 있음</li>
  <li>기본 전략
    <ul>
      <li><strong>ExceptionHandlerExceptionResolver</strong></li>
      <li>ResponseStatusExceptionResolver</li>
      <li>DefaultHandlerExceptionResolver</li>
    </ul>
  </li>
</ul>

<p>🏳 <strong>ViewResolver</strong></p>

<ul>
  <li>뷰 리졸버는 컨트롤러가 리턴한 뷰 이름을 참고해서 적절한 뷰 오브젝트를 찾아주는 로직을 가진 전략 오브젝트 이다.</li>
  <li>디폴트 전략
    <ul>
      <li>InternalResourceViewResolver</li>
    </ul>
  </li>
</ul>

<p>🏳 기타 Resolver</p>

<ul>
  <li>LocaleResolver</li>
  <li>ThemeResolver</li>
  <li>RequestToViewNameTranslater
    <ul>
      <li>컨트롤러에서 뷰 이름이나 뷰 오브젝트를 제공해주지 않았을 때, URL과 같은 요청정보를 참고해서 자동으로 뷰 이름을 생성해주는 전략</li>
      <li>기본 전략
        <ul>
          <li>DefaultRequestToViewNameTranslator</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="dispatcherservlet">DispatcherServlet</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 각 전략의 디폴트 설정을 <code class="language-plaintext highlighter-rouge">DispatherServlet.properties</code>라는 전략 설정파일로 부터 가져와서 초기화 한다.</li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 서블릿 컨테이너가 생성하고 관리하는 오브젝트이지, 스프링의 컨텍스트에서 관리하는 빈 오브젝트가 아니다.
    <ul>
      <li>서블릿 컨텍스트 컨테이너 - Servlet Context Container</li>
      <li>빈 처럼 사용할 수는 있지만, 빈 오브젝트는 아니다.</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 내부에 서블릿 웹 애플리케이션 컨텍스트를 갖고 있고, 내부 컨텍스트로 부터 추가/수정한 전략이 담긴 빈 오브젝트가 있는지 찾아보고, 있다면 이를 가져와서 디폴트 전략을 대신하여 사용 한다.</li>
</ul>

<h1 id="32-스프링-웹-애플리케이션-환경-구성">3.2 스프링 웹 애플리케이션 환경 구성</h1>

<hr />

<h2 id="321-간단한-스프링-웹-프로젝트-생성">3.2.1 간단한 스프링 웹 프로젝트 생성</h2>

<hr />
<h3 id="참고">[참고]</h3>
<p>Q. 왜  <code class="language-plaintext highlighter-rouge">hello.jsp</code> 파일을 <code class="language-plaintext highlighter-rouge">WEB-INF</code> 아래에 넣을까?</p>

<p>A.  웹루트 <code class="language-plaintext highlighter-rouge">/WEB-INF/</code> 아래는 URL을 통해 직접 접근하기 불가능하기 때문에, JSP 파일을 해당 경로에 위치하는 것이 좋다. 
<code class="language-plaintext highlighter-rouge">InternalResourceView</code>는 내부적으로 WEB-INF 아래에 있는 JSP도 실행시킬 수 있다.</p>

<h1 id="33-컨트롤러">3.3 컨트롤러</h1>

<hr />

<h2 id="331-컨트롤러의-종류와-핸들러-어댑터">3.3.1 컨트롤러의 종류와 핸들러 어댑터</h2>

<hr />

<p>스프링 MVC가 지원하는 컨트롤러 종류는 4가지이다. 이에 따른 핸들러 어댑터도 4가지 종류가 존재한다.</p>

<p><strong>💡 디폴트 전략을 사용하는 경우 핸들러 어댑터를 별도로 빈으로 등록해 줄 필요가 없음</strong></p>

<h3 id="servlet과-simpleservlethandleradapter">Servlet과 SimpleServletHandlerAdapter</h3>

<p>서블릿을 스프링 MVC 컨트롤러로 사용한다.</p>

<h3 id="httprequesthandler와-httprequesthandleradapter">HttpRequestHandler와 HttpRequestHandlerAdapter</h3>

<p>모델과 뷰 개념이 없는 HTTP 기반의 로우레벨 서비스를 개발할 때 이용한다.</p>

<h3 id="controller와-simplecontrollerhandleradapter">Controller와 SimpleControllerHandlerAdapter</h3>

<p>Controller 인터페이스를 구현해서 만드는게 원칙이나, AbstractController를 상속해서 컨트롤러를 만드는 것을 권장한다.</p>

<h3 id="annotationmethodhandleradapter--requestmappinghandleradapter-스프링-31-이후"><del>AnnotationMethodHandlerAdapter</del> → <strong>RequestMappingHandlerAdapter (스프링 3.1 이후)</strong></h3>

<ul>
  <li>다른 핸들러 어댑터는 특정 인터페이스를 구현한 컨트롤러만 지원하지만, 이 핸들러 어댑터는 지원하는 컨트롤러 타입이 정해져 있지 않다.</li>
  <li>컨트롤러 타입에 제한이 없는 대신 클래스와 메소드에 붙은 애노테이션의 정보와 메소드 이름, 파라미터, 리턴 타입에 대한 규칙 등을 종합적으로 분석해서 컨트롤러를 선별하고 호출 방식을 결정한다.</li>
  <li>컨트롤러 하나가 하나 이상의 URL이 매핑 될 수 있있다.
    <ul>
      <li>URL의 매핑을 컨트롤러 단위가 아니라 메소드 단위로 가능하게 했다. (스프링 2.5 버전 이후)</li>
    </ul>
  </li>
  <li>다른 핸들러 어댑터와는 다르게 <strong><code class="language-plaintext highlighter-rouge">RequestMappingHandlerMapping</code></strong>과 함께 사용해야 한다.</li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">RequestMappingHandlerAdpater</code> → <code class="language-plaintext highlighter-rouge">handle(…)</code> 메소드</strong></p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Override</span>
  <span class="kd">protected</span> <span class="nc">ModelAndView</span> <span class="nf">handleInternal</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
    <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">HandlerMethod</span> <span class="n">handlerMethod</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    
     <span class="nc">ModelAndView</span> <span class="n">mav</span><span class="o">;</span>
     <span class="n">checkRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
  
    <span class="c1">// Execute invokeHandlerMethod in synchronized block if required.</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">synchronizeOnSession</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">HttpSession</span> <span class="n">session</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getSession</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">session</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
       <span class="nc">Object</span> <span class="n">mutex</span> <span class="o">=</span> <span class="nc">WebUtils</span><span class="o">.</span><span class="na">getSessionMutex</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
       <span class="kd">synchronized</span> <span class="o">(</span><span class="n">mutex</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">mav</span> <span class="o">=</span> <span class="n">invokeHandlerMethod</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handlerMethod</span><span class="o">);</span>
       <span class="o">}</span>
      <span class="o">}</span>
      <span class="k">else</span> <span class="o">{</span>
        <span class="c1">// No HttpSession available -&gt; no mutex necessary</span>
        <span class="n">mav</span> <span class="o">=</span> <span class="n">invokeHandlerMethod</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handlerMethod</span><span class="o">);</span>
      <span class="o">}</span>
     <span class="o">}</span>
     <span class="k">else</span> <span class="o">{</span>
        <span class="c1">// No synchronization on session demanded at all...</span>
        <span class="n">mav</span> <span class="o">=</span> <span class="n">invokeHandlerMethod</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">handlerMethod</span><span class="o">);</span>
     <span class="o">}</span>
    	
     <span class="k">if</span> <span class="o">(!</span><span class="n">response</span><span class="o">.</span><span class="na">containsHeader</span><span class="o">(</span><span class="no">HEADER_CACHE_CONTROL</span><span class="o">))</span> <span class="o">{</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">getSessionAttributesHandler</span><span class="o">(</span><span class="n">handlerMethod</span><span class="o">).</span><span class="na">hasSessionAttributes</span><span class="o">())</span> <span class="o">{</span>
       <span class="n">applyCacheSeconds</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">cacheSecondsForSessionAttributeHandlers</span><span class="o">);</span>
      <span class="o">}</span>
      <span class="k">else</span> <span class="o">{</span>
       <span class="n">prepareResponse</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
      <span class="o">}</span>
     <span class="o">}</span>
     <span class="k">return</span> <span class="n">mav</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="332-핸들러-매핑">3.3.2 핸들러 매핑</h2>

<hr />

<p>HTTP 요청정보를 이용해서 이를 처리할 핸들러 오브젝트인 컨트롤러를 찾아주는 기능을 가진 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>의 전략이다. 핸들러 매핑은 컨트롤러 타입과 상관 없고, 하나의 핸들러 매핑의 여러가지 타입의 컨트롤러를 선택할 수 있다.</p>

<h3 id="beannameurlhandlermapping">BeanNameUrlHandlerMapping</h3>

<p>디폴트 핸들러 매핑의 하나.</p>

<p>빈 이름에 들어 있는 URL을 HTTP 요청의 URL과 비교해서 일치하는 빈을 찾아준다.</p>

<h3 id="controllerbeannamehandlermapping">ControllerBeanNameHandlerMapping</h3>

<p>빈의 아이디나 빈 이름을 이용해 매핑해주는 핸들러 매핑 전략</p>

<p>ControllerBeanNameHandlerMapping은 디폴트 핸들러 매핑이 아니므로 사용하려면 전략 빈으로 등록해줘야 한다.</p>

<p><strong><em>💡</em> <em>특정 전략 클래스를 빈으로 등록 한 경우에는 기본 전략은 모두 무시되는 점 주의!</em></strong></p>

<h3 id="controllerclassnamehandlermapping">ControllerClassNameHandlerMapping</h3>

<p>빈 대신 클래스 이름을 URL에 매핑 해주는 핸들러 매핑 클래스.</p>

<p>디폴트 전략이 아니므로 빈으로 등록해줘야 한다.</p>

<h3 id="simpleurlhandlermapping">SimpleUrlHandlerMapping</h3>

<p>URL과 컨트롤러의 매핑정보를 한곳에 모아놓을 수 있는 핸들러 매핑 전략.</p>

<p>매핑정보는 <code class="language-plaintext highlighter-rouge">SimpleUrlHandlerMapping</code> 빈의 프로퍼티에 넣어 준다. 마찬가지로 디폴트 전략이 아니므로 빈을 등록해야 한다.</p>

<h3 id="defaultannotationhandlermapping--requestmappinghandlermapping"><del>DefaultAnnotationHandlerMapping</del> → <strong>RequestMappingHandlerMapping</strong></h3>

<p>핸들러 매핑의 기본적략 중 하나</p>

<p><code class="language-plaintext highlighter-rouge">@RequestMapping</code>이라는 애노테이션을 컨트롤러 클래스나 메소드에 직접 부여하고 이를 이용해 매핑하는 전략이다.</p>

<h2 id="333-핸들러-인터셉터">3.3.3 핸들러 인터셉터</h2>

<hr />

<aside>
  
    Q. 핸들러 매핑의 역할 
    A1. URL과 요청 정보로 부터 핸들러를 찾아주는 것
    A2. 핸들러 인터셉터를 적용해주는 것

</aside>

<p>핸들러 인터셉터는 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>이 컨트롤러를 호출하기 전과 후에 요청과 응답을 참조하거나 가공할 수 있는 일종의 필터이다. ⇒ 서블릿 필터와 유사한 개념이지만 다르다.</p>

<p>핸들러 매핑은 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code> 으로부터 매핑 요청 작업을 받으면</p>

<ol>
  <li>핸들러 실행 체인을 돌려준다.</li>
  <li>이 핸들러 실행체인은 하나 이상의 핸들러 인터셉터를 거쳐서 컨트롤러가 실행될 수 있도록 구성 되어 있다.</li>
  <li>핸들러 인터셉터를 등록하지 않았다면 바로 컨트롤러(컨트롤러 메소드)가 실행 된다.</li>
</ol>

<h3 id="서블릿-필터-vs-핸들러-인터셉터-">서블릿 필터 VS 핸들러 인터셉터 (⭐)</h3>

<p><code class="language-plaintext highlighter-rouge">ServletFilter</code> vs <code class="language-plaintext highlighter-rouge">HandlerInterceptor</code></p>

<p><strong>핸들러 인터셉터</strong></p>

<ul>
  <li>핸들러 인터셉터는 <code class="language-plaintext highlighter-rouge">HttpServletRequest</code>, <code class="language-plaintext highlighter-rouge">HttpServletResponse</code> 뿐 아니라 컨트롤러 빈 오브젝트, ModelAndView, 발생한 Exception 등 정보를 제공받기  때문에 서블릿 필터보다 더 정교하고 편리하게 만들 수 있다.</li>
  <li>핸들러 인터셉터 자체가 스프링 빈이기 때문에 DI를 통해 다른 빈을 활용할 수 있다.</li>
  <li>적용 대상이 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>의 특정 핸들러 매핑으로 제한된다.</li>
  <li>web.xml을 수정하지 않아도 되는 장점이 있다.</li>
  <li>요약 : 스프링 빈으로 등록할 수 있고, 컨트롤러 오브젝트에 접근 가능하며, ModelAndView와 같은 컨트롤러가 리턴하는 정보를 활용할 수 있다.</li>
</ul>

<p><strong>서블릿 필터</strong></p>

<ul>
  <li>서블릿 필터는 web.xml에 별도로 등록해줘야 하고 필터 자체는 스프링 빈이 아니다.</li>
  <li>서블릿 필터는 웹에 들어오는 모든 요청에 적용된다는 장점이 있다.</li>
</ul>

<h3 id="핸들러-인터셉터-적용">핸들러 인터셉터 적용</h3>

<ol>
  <li>먼저 핸들러 매핑 클래스를 빈으로 등록한다.</li>
  <li>핸들러 매핑 빈의 interceptors 프로퍼티를 이용해 핸들러 인터셉터 빈의 레퍼런스를 넣어준다.</li>
</ol>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"org...BeanNameUrlHandlerMapping"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"interceptors"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;list&gt;</span>
      <span class="nt">&lt;ref</span> <span class="na">bean=</span><span class="s">"simpleInterceptor"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/list&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"simpleInterceptor"</span> <span class="na">class=</span><span class="s">"..."</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<ul>
  <li>핸들러 인터셉터는 기본적으로 핸들러 매핑 단위로 등록된다.</li>
  <li>하나의 인터셉터를 여러개의 핸들러 매핑에 모두 적용하려면 핸들러 매핑마다 반복적으로 등록해줘야 한다.</li>
  <li><strong>스프링 3.0 이후로 URL 패턴을 이용해서 모든 핸들러 매핑에 일괄 적용하는 기능이 추가 되었다.</strong></li>
</ul>

<h3 id="핸들러-인터셉터-대신-컨트롤러에-aop-적용하면-어떨까">핸들러 인터셉터 대신 컨트롤러에 AOP 적용하면 어떨까?</h3>

<p>AOP를 이용해 컨트롤러에 적용할 부가기능을 어드바이스로 만들어서 적용할 수 있다.</p>

<p>하지만, 컨트롤러의 호출 과정에 적용되는 부가기능은 핸들러 인터셉터를 활용하는 편이 낫다.</p>

<ol>
  <li>포인트 컷 작성이 쉽지 않다.
    <ul>
      <li>컨트롤러 타입이 하나로 정해져 있지 않고, 실행 메소드 또한 제각각이다.</li>
    </ul>
  </li>
  <li>파라미터나 리턴 값 또한 일정치 않다.</li>
</ol>

<p>결론. 타입이 일정치 않고 호출 패턴도 정해져 있지 않은 컨트롤러에 AOP를 적용하기 쉽지 않다.스프링 MVC는 모든 종류의 컨트롤러에 동일한 핸들러 인터셉터를 적용할 수 있게 해주기 떄문에, 컨트롤러 호출에 관련된 부가기능은 핸들러 인터셉터를 활용하는 것이 적합하다.</p>

<h2 id="334-컨트롤러-확장">3.3.4 컨트롤러 확장</h2>

<hr />

<blockquote>
  <p><em>거추장스러운 클래스 상속보다는 인터페이스를 구현하는 깔끔한 방법으로 컨트롤러를 만들고 싶을 수도 있다. 이런 경우에는 핸들러 어댑터를 직접 구현해서 아예 새로운 컨트롤러 타입을 도입하는 방법을 고려해봐야 한다.</em></p>

</blockquote>

<h3 id="커스텀-컨트롤러-인터페이스와-핸들러-어댑터-개발">커스텀 컨트롤러 인터페이스와 핸들러 어댑터 개발</h3>

<ul>
  <li>
    <p>커스텀 핸들러 어댑터를 적용하는 방법은 서블릿 컨텍스트의 빈으로 등록하는 것 부터 시작한다.</p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"org.book.toby.controller.SimpleHandlerAdapter"</span><span class="nt">/&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>핸들러 매핑에서 커스텀 컨트롤러를 찾게 되면 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 현재 등록된 모든 핸들러 어댑터의 <code class="language-plaintext highlighter-rouge">supports(…)</code> 메소드를 호출해서 해당 컨트롤러 타입을 처리할 수 있는지 물어본다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">supports</span><span class="o">(</span><span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">handler</span> <span class="k">instanceof</span> <span class="nc">SimpleController</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>이때 처리할 수 있는 것이 확인되면  <code class="language-plaintext highlighter-rouge">handle(…)</code> 메소드를 호출해서 해당 컨트롤러를 실행할 것이다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
        <span class="nc">Object</span> <span class="n">handler</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
      <span class="nc">Method</span> <span class="n">m</span> <span class="o">=</span> <span class="nc">ReflectionUtils</span><span class="o">.</span><span class="na">findMethod</span><span class="o">(</span><span class="n">handler</span><span class="o">.</span><span class="na">getClass</span><span class="o">(),</span> <span class="s">"control"</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="nc">Map</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
      <span class="nc">ViewName</span> <span class="n">viewName</span> <span class="o">=</span> <span class="nc">AnnotationUtils</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="nc">ViewName</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
      <span class="nc">RequiredParams</span> <span class="n">requiredParams</span> <span class="o">=</span> <span class="nc">AnnotationUtils</span><span class="o">.</span><span class="na">getAnnotation</span><span class="o">(</span><span class="n">m</span><span class="o">,</span> <span class="nc">RequiredParams</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    
      <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
      <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="nl">param:</span><span class="n">requiredParams</span><span class="o">.</span><span class="na">value</span><span class="o">()){</span>
        <span class="nc">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">param</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="n">params</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">param</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
      <span class="o">}</span>
    
      <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">model</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
      <span class="o">((</span><span class="nc">SimpleController</span><span class="o">)</span><span class="n">handler</span><span class="o">).</span><span class="na">control</span><span class="o">(</span><span class="n">params</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>
    
       <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="n">viewName</span><span class="o">.</span><span class="na">value</span><span class="o">(),</span> <span class="n">model</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="34-뷰">3.4 뷰</h1>

<hr />

<p>컨트롤러가 작업을 마친 후 뷰 정보를 ModelAndView 타입 오브젝트에 담아서 <code class="language-plaintext highlighter-rouge">DispatacherServlet</code>에 돌려주는 방법은 2가지가 존재한다.</p>

<ol>
  <li>View 타입의 오브젝트를 돌려주는 방법</li>
  <li>View 이름을 돌려주는 방법
    <ul>
      <li>이 방법은 View 이름으로부터 실제 사용할 뷰를 결정 해주는 뷰 리졸버가 필요하다. 뷰 리졸버는 논리적인 뷰 이름을 실질적인 뷰 오브젝트로 전환하는 역할을 한다.</li>
    </ul>
  </li>
</ol>

<h2 id="341-뷰">3.4.1 뷰</h2>

<hr />

<p>뷰를 사용하는 방법은 두가지가 있음</p>

<ol>
  <li>스프링이 제공하는 기반 뷰 클래스를 확장해서 코드로 뷰를 만드는 방법</li>
  <li>스프링이 제공하는 뷰를 활용하되 뷰 클래스 자체를 상속하거나 코드를 작성하지 않고, JSP 같은 템플릿 파일을 사용하거나 모델을 자동으로 뷰로 전환하는 로직을 적용.</li>
</ol>

<h3 id="internalresourceview와-jstlview">InternalResourceView와 JstlView</h3>

<p>View Resolver 기본 전략</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">View</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">InternalResourceView</span><span class="o">(</span><span class="s">"/WEB-INF/view/hello.jsp"</span><span class="o">);</span>
<span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="n">view</span><span class="o">,</span> <span class="n">model</span><span class="o">);</span>
</code></pre></div></div>

<ul>
  <li>JSP 서블릿을 통해 JSP 뷰를 적용할 때 사용한다.</li>
  <li><code class="language-plaintext highlighter-rouge">JstlView</code>는 <code class="language-plaintext highlighter-rouge">InternalResourceView</code>의 서브 클래스이다.</li>
  <li>뷰 오브젝트 대신 뷰 이름이 <code class="language-plaintext highlighter-rouge">ModelAndView</code>에 담겨서 돌아오면, <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 뷰 리졸버의 기본 전략인 <code class="language-plaintext highlighter-rouge">InteralResourceViewResolver</code>를 통해 <code class="language-plaintext highlighter-rouge">InternalResourceView</code>를 가져와 사용할 것이다.
    <ul>
      <li>뷰 리졸버는 보통 뷰 오브젝트를 캐싱하기 때문에 같은 URL의 뷰가 반복적으로 만들어지지 않아 성능 면에서도 유리하다.</li>
    </ul>
  </li>
</ul>

<h3 id="redirectview">RedirectView</h3>

<p>실제 뷰가 생성되는 것이 아니라, URL만 만들어져 다른 페이지로 리다이렉트 된다.</p>

<h2 id="342-뷰-리졸버">3.4.2 뷰 리졸버</h2>

<ul>
  <li>뷰 리졸버는 뷰 이름으로부터 사용할 뷰 오브젝트를 찾아준다. (핸들러 매핑이 URL로 부터 컨트롤러를 찾아주는 것과 동일함)</li>
  <li><code class="language-plaintext highlighter-rouge">ViewResolver</code> 인터페이스를 구현해서 만든다.</li>
  <li>별도의 뷰 리졸버가 빈으로 등록되지 않는다면 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>의 기본 전략 뷰 리졸버인 <code class="language-plaintext highlighter-rouge">InternalResourceViewResolver</code>가 사용된다.</li>
  <li>하나 이상의 뷰 리졸버를 등록할 때, order 프로퍼티를 이용해 뷰 리졸버의 적용 순서를 지정해주는 게 좋다.</li>
</ul>

<h3 id="internalresourceviewresolver">InternalResourceViewResolver</h3>

<ul>
  <li>별도의 설정없이 해당 뷰 리졸버를 그대로 사용하는 것은 불편한 점이 있다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">/WEB-INF/view/hello.jsp</code> 와 같이 전체 경로를 다 적어줘야 한다는 것이다.</li>
      <li>
        <p>prefix, suffix 프로퍼티를 이용해 앞 뒤에 붙는 내용을 생략할 수 있다.</p>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"..InternalResourceViewResolver"</span><span class="nt">&gt;</span>
  	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"prefix"</span> <span class="na">value=</span><span class="s">"/WEB-INF/view"</span><span class="nt">/&gt;</span>
  	<span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"suffix"</span> <span class="na">value=</span><span class="s">".jsp"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/bean&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><strong><code class="language-plaintext highlighter-rouge">RequestToViewNameTranslator</code></strong>
    <ul>
      <li>뷰와 관련된 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>의 전략</li>
      <li>뷰 이름을 컨트롤러가 넘겨주지 않는 경우 URL을 이용해 자동으로 뷰 이름을 생성함</li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">InternalResourceViewResolver</code>는 <strong>JSTL 라이브러리가 클래스패스에 존재하면</strong> JSTL의 부가기능을 지원하는 <code class="language-plaintext highlighter-rouge">JstlView</code>를 사용하고, 존재하지 않으면 <code class="language-plaintext highlighter-rouge">InternalResourceView</code>를 사용한다.</li>
  <li>order 프로퍼티는 기본적으로 <code class="language-plaintext highlighter-rouge">Integer.MAX</code>(2^31-1) 값이 들어 있음</li>
</ul>

<h1 id="35-기타-전략">3.5 기타 전략</h1>

<hr />

<p><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>의 남은 전략</p>

<h2 id="351-핸들러-예외-리졸버">3.5.1 핸들러 예외 리졸버</h2>

<hr />

<p><code class="language-plaintext highlighter-rouge">HandlerExceptionResolver</code>는 컨트롤러의 작업 중에 발생한 예외를 어떻게 처리할지 결정하는 전략이다.</p>

<ul>
  <li>컨트롤러나 그 뒤의 계층에서 던저진 예외는 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>이 일단 전달 받는다.
    <ol>
      <li>핸들러 예외 리졸버가 등록되어 있는 경우
        <ul>
          <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 먼저 등록된 핸들러 예외 리졸버가 해당 예외를 처리할 수 있는지 확인한다.</li>
          <li>처리가능 하면 해당 핸들러 예외 리졸버가 처리를 위임한다.</li>
        </ul>
      </li>
      <li>핸들러 예외 리졸버가 등록되어 있지 않은 경우
        <ul>
          <li>서블릿 밖으로 던저서 서블릿 컨테이너가 처리하게 된다.</li>
          <li>브라우저에 <em>HTTP Status 500</em> 내부 서버 오류 같은 메세지가 출력됨</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>핸들러 예외 리졸버는 <code class="language-plaintext highlighter-rouge">HandlerExceptionResolver</code> 인터페이스를 구현한다.</li>
  <li>스프링은 총 4가지의 <code class="language-plaintext highlighter-rouge">HandlerExceptionResolver</code> 구현 전략을 제공한다. 그 중 3가지는 기본 전략으로 등록 되어있다.</li>
</ul>

<h3 id="annotationmethodhandlerexceptionresolver--exceptionhandlerexceptionresolver"><del>AnnotationMethodHandlerExceptionResolver</del> → <strong>ExceptionHandlerExceptionResolver</strong></h3>

<p>핸들러 예외 리졸버 기본 전략 중 하나</p>

<ul>
  <li>특정 컨트롤러의 작업 중에 발생하는 예외만 처리하기에 적합하다.</li>
  <li>
    <p>예외가 발생한 컨트롤러 내 메소드 중 @ExceptionHandler 애노테이션이 붙은 메소드를 찾아 예외처리를 맡아주는 핸들러 예외 리졸버 이다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Controller</span>
  <span class="kd">class</span> <span class="nc">HelloController</span><span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="n">url</span><span class="o">=</span><span class="s">""</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">hello</span><span class="o">(...)</span> <span class="o">{</span>
      <span class="o">...</span>
    <span class="o">}</span>
    <span class="c1">// 이 컨트롤러에서 DataAccessException이 발생한 경우 호출</span>
    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">DataAccessException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ModelAndView</span> <span class="nf">dataAccessExceptionHandler</span><span class="o">(</span><span class="nc">DataAccessException</span> <span class="n">e</span><span class="o">){</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nf">ModelAndView</span><span class="o">(</span><span class="s">"dataexception"</span><span class="o">).</span><span class="na">addObject</span><span class="o">(</span><span class="s">"msg"</span><span class="o">,</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
    <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="responsestatusexceptionresolver">ResponseStatusExceptionResolver</h3>

<p>핸들러 예외 리졸버 기본 전략 중 하나</p>

<ul>
  <li>HTTP 500 에러 대신 의미 있는 HTTP 응답 상태코드로 전환해준다.</li>
</ul>

<aside>


    ✨ HttpStatus 클래스 안에는 40여 개의 사용 가능한 HTTP 응답 상태 상수가 정의 되어있다.

</aside>

<ul>
  <li>
    <p><code class="language-plaintext highlighter-rouge">@ResponseStatus</code>를 붙여줄 수 있는 예외 클래스를 만들어 사용해야 한다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="n">value</span><span class="o">=</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">SERVICE_UNAVALABLE</span><span class="o">,</span><span class="n">reason</span><span class="o">=</span><span class="s">"서비스 일시 중지"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">NotInServiceeException</span> <span class="kd">extends</span> <span class="nc">RuntimeException</span><span class="o">{}</span>
</code></pre></div>    </div>

    <ul>
      <li>기존의 예외 클래스에는 사용할 수 없음 → 사용하려면 <code class="language-plaintext highlighter-rouge">@ExceptionHandler</code> 사용</li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">ResponseStatusExceptionResolver</code>는 발생한 예외의 클래스에 <code class="language-plaintext highlighter-rouge">@ResponseStatus</code>가 있는지 확인하고, 만약 있다면 애노테이션에 지정해둔 HTTP 응답 상태 코드를 클라이언트 에 전달한다.</p>
  </li>
</ul>

<h3 id="defaulthandlerexceptionresolver"><code class="language-plaintext highlighter-rouge">DefaultHandlerExceptionResolver</code></h3>

<p>핸들러 예외 리졸버 기본 전략 중 하나</p>

<ul>
  <li>위 두가지 예외 리졸버에서 처리하지 못한 예외를 다루는 마지막 핸들러 예외 리졸버이다.</li>
  <li>스프링에서 내부적으로 발생하는 주요 예외를 처리해주는 표준 예외처리 로직을 담고 있다.</li>
  <li>핸들러 예외 리졸버를 따로 빈으로 등록하는 경우에 함께 등록해주는 것이 좋다. (따로 빈으로 등록하는 경우 기본 전략이 무시되기 때문에)</li>
</ul>

<h3 id="simplemappingexceptionresolver">SimpleMappingExceptionResolver</h3>

<ul>
  <li>예외를 처리할 뷰를 지정할 수 있다.</li>
  <li>기본 전략이 아니므로 직접 빈으로 등록 해줘야 한다.</li>
  <li>모든 컨트롤러에서 발생하는 예외가 일괄 적용된다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"org...SimpleMappingExceptionResolver"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"mappedHandlers"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;props&gt;</span>
      <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"DataAccessException"</span><span class="nt">&gt;</span>error/data<span class="nt">&lt;/prop&gt;</span>
      <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"BusinessLoginException"</span><span class="nt">&gt;</span>error/login<span class="nt">&lt;/prop&gt;</span>
    <span class="nt">&lt;/props&gt;</span>
  <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"defaultErrorView"</span><span class="nt">&gt;</span>error/default<span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>
<h3 id="참고-1">[참고]</h3>
<p>예외가 발생했을 때 로그를 남기거나 관리자에게 통보하는 작업이 필요한 경우에는, 핸들러 인터셉터의 <code class="language-plaintext highlighter-rouge">afterCompletion(…)</code> 메소드가 담당하는 것이 좋다.</p>

<h2 id="353-멀티파트-리졸버">3.5.3 멀티파트 리졸버</h2>

<hr />

<p>파일 업로드와 같이 <code class="language-plaintext highlighter-rouge">multipart</code> 포맷의 요청정보를 처리하는 전략을 설정할 수 있다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">CommonsMultipartResolver</code> 를 지원한다.</li>
  <li>
    <p>스프링의 경우에는 멀티파트 리졸버에 대한 기본 전략이 없다. 따라서 빈을 별도로 등록해야 파일 업로드 기능을 사용할 수 있다.</p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"multipartResolver"</span>
    <span class="na">class =</span><span class="s">"org....CommonsMultipartResolver"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"maxUploadSize"</span> <span class="na">value=</span><span class="s">"100000"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/bean&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>스프링 부트는 멀티파트 리졸버를 자동 등록해준다.
    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration</code></p>

        <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Bean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="nc">DispatcherServlet</span><span class="o">.</span><span class="na">MULTIPART_RESOLVER_BEAN_NAME</span><span class="o">)</span>
  <span class="nd">@ConditionalOnMissingBean</span><span class="o">(</span><span class="nc">MultipartResolver</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">StandardServletMultipartResolver</span> <span class="nf">multipartResolver</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">StandardServletMultipartResolver</span> <span class="n">multipartResolver</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StandardServletMultipartResolver</span><span class="o">();</span>
    <span class="n">multipartResolver</span><span class="o">.</span><span class="na">setResolveLazily</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">multipartProperties</span><span class="o">.</span><span class="na">isResolveLazily</span><span class="o">());</span>
    <span class="k">return</span> <span class="n">multipartResolver</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 클라이언트로 부터 멀티파트 요청을 받으면 멀티파트 리졸버에게 요청해서 <code class="language-plaintext highlighter-rouge">MultipartHttpServletRequest</code> 오브젝트로 (자동) 전환된다.</li>
</ul>

<h3 id="requesttoviewnametranslator">RequestToViewNameTranslator</h3>

<p>컨트롤러에서 뷰 이름이나 뷰 오브젝트를 돌려주지 않았을 경우 HTTP 요청정보를 참고해서 뷰 이름을 생성해주는 로직을 담고 있다.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">DefaultRequestViewNameTranslator</code>가 기본전략으로 등록되어 있다.
    <ul>
      <li>URL을 기준으로 해서 뷰 이름을 결정한다.</li>
    </ul>
  </li>
</ul>

<h3 id="dispatcherservletproperties-기본-전략">DispatcherServlet.properties (기본 전략)</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Default implementation classes for 
DispatcherServlet's strategy interfaces.

**org.springframework.web.servlet.LocaleResolver**
= o.s.web.servlet.i18n.AcceptHeaderLocaleResolver

**org.springframework.web.servlet.ThemeResolver**
= o.s.web.servlet.theme.FixedThemeResolver

**org.springframework.web.servlet.HandlerMapping**
= o.s.web.servlet.handler.BeanNameUrlHandlerMapping,
  o.s.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping,\
  o.s.web.servlet.function.support.RouterFunctionMapping

**org.springframework.web.servlet.HandlerAdapter**
= o.s.web.servlet.mvc.HttpRequestHandlerAdapter,\
  o.s.web.servlet.mvc.SimpleControllerHandlerAdapter,\
  o.s.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter,\
  o.s.web.servlet.function.support.HandlerFunctionAdapter

**org.springframework.web.servlet.HandlerExceptionResolver**
= o.s.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver,\
  o.s.web.servlet.mvc.annotation.ResponseStatusExceptionResolver,\
  o.s.web.servlet.mvc.support.DefaultHandlerExceptionResolver

**org.springframework.web.servlet.RequestToViewNameTranslator**
= o.s.web.servlet.view.DefaultRequestToViewNameTranslator

**org.springframework.web.servlet.ViewResolver**
= o.s.web.servlet.view.InternalResourceViewResolver

**org.springframework.web.servlet.FlashMapManager**
= o.s.web.servlet.support.SessionFlashMapManager
</code></pre></div></div>

<h1 id="36-스프링-31의-mvc">3.6 스프링 3.1의 MVC</h1>

<hr />

<h2 id="361-플래시-맵-매니저-전략">3.6.1 플래시 맵 매니저 전략</h2>

<hr />

<h3 id="플래시-맵-flashmapmananger">플래시 맵 (FlashMapMananger)</h3>

<ul>
  <li>플래시 애트리뷰트를 저장하는 맵.</li>
  <li>플래시 애트리뷰트는 하나의 요청에서 생성되어 다음 요청으로 전달되는 정보이다.</li>
  <li>일반 HTTP 세션에 저장되는 정보처럼 오래 유지되지는 않고, 다음 요청에서 한번 사용되고 바로 제거되는 특징이 있다.</li>
  <li>주로 POST 단계의 작업 결과 메세지를 <strong>리다이렉트</strong> 된 페이지로 전달할 때 주로 사용한다.</li>
  <li>Post / Redirect / Get 패턴
    <ul>
      <li>POST 작업을 마친 후에는 <code class="language-plaintext highlighter-rouge">RedirectView</code>를 이용해 아예 다른 URL을 가진 GET 방식의 새로운 페이지로 이동시키는 것이 권장된다.</li>
    </ul>
  </li>
</ul>]]></content><author><name>aken5887</name></author><category term="Spring" /><category term="토비의스프링" /><summary type="html"><![CDATA[3.1 스프링의 웹 프레젠테이션 계층 기술]]></summary></entry><entry><title type="html">토비의 스프링 - 2-1장 IoC 컨테이너와 DI</title><link href="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/10/post1.html" rel="alternate" type="text/html" title="토비의 스프링 - 2-1장 IoC 컨테이너와 DI" /><published>2023-06-10T00:00:00+00:00</published><updated>2023-06-10T00:00:00+00:00</updated><id>https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/10/post1</id><content type="html" xml:base="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/10/post1.html"><![CDATA[<h1 id="11-ioc-컨테이너">1.1 IoC 컨테이너</h1>
<hr />
<p><em>빈 팩토리와 애플리케이션 컨텍스트</em></p>

<h3 id="ioc-컨테이너-스프링-컨테이너">IoC 컨테이너 (스프링 컨테이너)</h3>

<p><em>Inversion Of Control Container</em></p>

<ul>
  <li>컨테이너가 코드 대신 오브젝트에 대한 제어권을 가지고 있다.</li>
  <li>제어권 이란?  오브젝트의 생성과 관계설정, 사용, 제거를 포함한다.</li>
  <li>빈 팩토리, 애플리케이션 컨텍스트 (🌟둘은 동의어다.)
    <ul>
      <li>빈 팩토리 : 오브젝트의 생성과 오브젝트 사이의 런타임 관계를 설정하는 DI 관점의 컨테이너</li>
      <li><strong>애플리케이션 컨텍스트 : 빈 팩토리 개념 + 엔터프라이즈 애플리케이션을 개발하는 데 필요한 여러가지 컨테이너 기능을 추가한 것</strong></li>
    </ul>
  </li>
</ul>

<h3 id="애플리케이션-컨텍스트">애플리케이션 컨텍스트</h3>

<ul>
  <li>그 자체로 IoC와 DI를 위한 빈 팩토리이면서 그 이상의 기능을 가진다.</li>
  <li>스프링의 IoC 컨테이너는 일반적으로 <strong>애플리케이션 컨텍스트</strong>를 뜻한다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">ApplicationContext</code> 인터페이스를 구현한 클래스의 오브젝트</li>
    </ul>
  </li>
  <li>스프링 애플리케이션은 <strong>최소한 하나 이상의 IoC 컨테이너, 애플리케이션 컨텍스트 오브젝트</strong>를 가지고 있다.</li>
</ul>

<h2 id="111-ioc-컨테이너를-이용해-애플리케이션-만들기">1.1.1 IoC 컨테이너를 이용해 애플리케이션 만들기</h2>

<hr />

<p>본격적인 IoC 컨테이너로서 동작하라면 두 가지가 필요하다. 그 둘은 POJO 클래스와 설정 메타정보이다.</p>

<h3 id="pojo-클래스">POJO 클래스</h3>

<p>각자 기능에 충실하게 독립적으로 설계된 POJO 클래스를 만들고, 결합도가 낮은 유연한 관계를 가질수 있도록 인터페이스를 이용해 연결해준다.</p>

<h3 id="설정-메타정보">설정 메타정보</h3>

<ul>
  <li>IoC 컨테이너가 필요로 하는 설정 메타정보는 <strong>Bean</strong>을 어떻게 만들고 어떻게 동작할 것인가에 관한 정보이다.</li>
  <li>스프링의 설정 메타정보는 <code class="language-plaintext highlighter-rouge">BeanDefinition</code> 인터페이스로 표현되는 순수한 추상정보다.</li>
  <li>스프링 IoC 컨테이너는 각 빈에 대한 정보를 담은 설정 메타정보를 읽어들인 뒤에, 이를 참고해서 빈 오브젝트를 생성하고 프로퍼티나 생성자를 통해 의존 오브젝트를 주입해주는 DI 작업을 수행한다.</li>
</ul>

<p>스프링 애플리케이션이란 POJO 클래스와 설정 메타정보를 이용해 IoC 컨테이너가 만들어주는 오브젝트의 조합이라고 할 수 있다.</p>

<h2 id="112-ioc-컨테이너-종류와-사용방법">1.1.2 IoC 컨테이너 종류와 사용방법</h2>

<hr />

<h3 id="staticapplicationcontext"><code class="language-plaintext highlighter-rouge">StaticApplicationContext</code></h3>

<p>코드를 통해 빈 메타정보를 등록하기 위해 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">StaticApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StaticApplicationContext</span><span class="o">();</span>
<span class="n">ac</span><span class="o">.</span><span class="na">registerSingleton</span><span class="o">(</span><span class="s">"hello"</span><span class="o">,</span> <span class="nc">Hello</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">ac</span><span class="o">.</span><span class="na">registerBeanDefinition</span><span class="o">(</span><span class="s">"printer"</span><span class="o">,</span> <span class="k">new</span> <span class="nc">RootBeanDefinition</span><span class="o">(</span><span class="nc">StringPrinter</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</code></pre></div></div>

<h3 id="genericapplicationcontext"><code class="language-plaintext highlighter-rouge">GenericApplicationContext</code></h3>

<p>가장 일반적인 애플리케이션 컨텍스트의 구현 클래스</p>

<ul>
  <li>XML 파일과 같은 외부 리소스에 있는 빈 설정 메타정보를 리더를 통해 읽어들여서 메타정보로 전화하여 사용한다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">XmlBeanDefinitionReader</code> → XML로 작성된 빈 설정정보를 읽어서 컨테이너에게 전달하는 리더 객체이다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nc">GenericApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GenericApplicationContext</span><span class="o">();</span>
  <span class="nc">XmlBeanDefinitionReader</span> <span class="n">reader</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">XmlBeanDefineitionReader</span><span class="o">(</span><span class="n">ac</span><span class="o">);</span>
  <span class="n">reader</span><span class="o">.</span><span class="na">loadBeanDefinitions</span><span class="o">(</span><span class="s">".../genericApplicationContext.xml"</span><span class="o">);</span>
    
  <span class="n">ac</span><span class="o">.</span><span class="na">refresh</span><span class="o">();</span> <span class="c1">// 리더를 사용해서 설정을 읽은 경우에는 반드시 초기화 해줘야 함</span>
</code></pre></div>    </div>
  </li>
  <li>스프링에서는 대표적으로 XML 파일, 자바 소스 애노테이션, 자바 클래스 3 가지 방식으로 빈 설정 메타정보를 작성 할 수 있다.</li>
  <li>
    <p>JUnit 테스트 시 생성되는 애플리케이션 컨텍스트가 바로 <code class="language-plaintext highlighter-rouge">GenericApplicationContext</code> 이다.</p>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@ContextConfiguration</span><span class="o">(</span><span class="n">locations</span><span class="o">=</span><span class="s">"/test-applicationContext.xml"</span><span class="o">)</span>
</code></pre></div>    </div>

    <ul>
      <li>애플리케이션 컨텍스트 생성과 동시에 XML 파일을 읽어오고 초기화 까지 수행한다.</li>
    </ul>
  </li>
</ul>

<h3 id="genericxmlapplicationcontext">GenericXmlApplicationContext</h3>

<p><code class="language-plaintext highlighter-rouge">GenericApplicationContext</code> 와 <code class="language-plaintext highlighter-rouge">XmlBeanDefinitionReader</code> 클래스가 결합된 형태</p>

<p>xml 파일을 읽어들이고 초기화 까지 한번에 끝난다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">GenericApplicationContext</span> <span class="n">ac</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GenericXmlApplicationContext</span><span class="o">(</span><span class="s">".../genericApplicationContext.xml"</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="webapplicationcontext----ioc-container">WebApplicationContext (⭐) - IoC Container</h3>

<p>웹 환경에서 사용할 때 필요한 기능이 추가된 애플리케이션 컨텍스트 인터페이스</p>

<ul>
  <li><em>(Default)</em> XML 설정파일을 사용하도록 만들어진 <code class="language-plaintext highlighter-rouge">XmlWebApplicationContext</code></li>
  <li>애노테이션을 이용한 설정 리소스만 사용 <code class="language-plaintext highlighter-rouge">AnnotationConfigWebApplicationContext</code></li>
  <li><code class="language-plaintext highlighter-rouge">DispatcherSevlet</code>
    <ul>
      <li>웹 환경에서 애플리케이션 컨텍스트를 생성하고 설정 메타정보로 초기화해주고, 클라이언트로 부터 들어오는 요청마다 적절한 빈을 찾아서 이를 실행해주는 기능을 가진 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code> 이라는 이름의 서블릿을 제공한다.</li>
    </ul>
  </li>
</ul>

<h2 id="113-ioc-컨테이너-계층구조">1.1.3 IoC 컨테이너 계층구조</h2>

<hr />

<p>자식 애플리케이션 켄텍스트에 검색하는 이름에 해당하는 빈이 없으면 부모 애플리케이션 컨텍스트에서 검색하고, 동일한 이름의 빈이 존재한다면 자식 (본인) 애플리케이션 컨텍스트에 정의된 빈을 사용한다.</p>

<p>👉 서블릿의 컨텍스트 빈은 루트 애플리케이션 컨텍스트의 빈을 참조 할 수 있지만, 그 반대는 참조가 불가능하다.</p>

<h2 id="114-웹-애플리케이션의-ioc-컨테이너-구성">1.1.4 웹 애플리케이션의 IoC 컨테이너 구성</h2>

<hr />

<p>웹 어플리케이션 안에서 동작하는 IoC 컨테이너는 두 가지 방법으로 만들어진다. 스프링 웹 어플리케이션에서는 두 개의 컨테이너(<code class="language-plaintext highlighter-rouge">WebApplicationContext</code> 오브젝트)가 만들어진다.</p>

<ul>
  <li>웹 애플리케이션 레벨에서 만들어지는 컨테이너</li>
  <li>스프링 애플리케이션의 요청을 처리하는 서블릿 만들어지는 컨테이너</li>
</ul>

<h3 id="웹-애플리케이션의-컨텍스트-계층구조">웹 애플리케이션의 컨텍스트 계층구조</h3>

<p>웹 애플리케이션 레벨에서 등록되는 컨테이너는 루트 컨텍스트라고 불린다.</p>

<p>루트 컨텍스트는 서블릿 레벨에서 등록되는 컨테이너들의 <strong>부모 컨테이너</strong>가 되고, 일반적으로 전체 계층구조 내에서 가장 최상단에 위치한 루트 컨텍스트가 된다. 따라서 각 서블릿이 공유하게 되는 공통적인 빈들이 루트 컨텍스트에 등록 된다.</p>

<h3 id="서블릿과-컨텍스트">서블릿과 컨텍스트</h3>
<p>서블릿은 각각 독립적으로 애플리케이션 컨텍스트가 만들어 진다.</p>

<p>일반적으로는 스프링의 애플리케이션 컨텍스트를 가지면서 프론트 컨트롤러 역할을 하는 서블릿은 하나만 만들어 사용한다. (<code class="language-plaintext highlighter-rouge">DispatcherServlet</code>)</p>

<h3 id="참고">[참고]</h3>
<p>Q. 여러 개의 자식 컨텍스트를 두고 공통적인 빈을 부모 컨텍스트로 뽑아내서 공유하는게 아니라면 (하나의 루트 컨텍스트와 하나의 서블릿 컨텍스트만 사용하는 경우) 왜 이런 계층 구조로 만들까?</p>

<p>A. 전체 애플리케이션에서 웹 기술에 의존적인 부분과 그렇지 않은 부분을 구분하기 위해서 계층 구조로 분리하여 사용한다.</p>

<p>이렇게 프레젠테이션 계층을 분리해서 계층구조로 애플리케이션 컨텍스트를 구성해두면 변경과 확장에 용이하다.</p>

<h3 id="루트-애플리케이션-컨텍스트-등록">루트 애플리케이션 컨텍스트 등록</h3>

<p><code class="language-plaintext highlighter-rouge">ContextLoaderListner</code> 를 리스너로 등록한다.</p>

<p><code class="language-plaintext highlighter-rouge">ContextLoaderLisnter</code> 는 웹 애플리케이션이 시작할 때 자동으로 루트 애플리케이션 컨텍스트를 만들고 초기화 해준다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;listener&gt;</span> 
  <span class="nt">&lt;listener-class&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="nt">&lt;/listener-class&gt;</span>
<span class="nt">&lt;/listener&gt;</span>
</code></pre></div></div>

<ul>
  <li>기본 값
    <ul>
      <li>애플리케이션 컨텍스트 클래스 :  <code class="language-plaintext highlighter-rouge">XmlWebApplicationContext</code></li>
      <li>XML 설정파일 위치 :  <code class="language-plaintext highlighter-rouge">/WEB-INF/applicationContext.xml</code></li>
    </ul>
  </li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">contextConfigLocation</code></p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;context-param&gt;</span>
    <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
    <span class="nt">&lt;param-value&gt;</span>
      /WEB-INF/dataContext.xml
      /WEB-INF/applicationContext.xml
      ...
      classpath:applicationContext.xml
      ...
      /WEB-INF/*Context.xml
      ...
    /WEB-INF/**/*Context.xml
    <span class="nt">&lt;/param-value&gt;</span>
  <span class="nt">&lt;/context-param&gt;</span>
</code></pre></div>    </div>
  </li>
  <li><code class="language-plaintext highlighter-rouge">contextClass</code>
    <ul>
      <li>기본 값 <code class="language-plaintext highlighter-rouge">XmlWebApplicationContext</code></li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">XmlWebApplicationContext</code> 외 스프링이 제공하는 대체 가능한 컨텍스트 클래스를 추가하고 싶은 경우 아래 설정을 추가한다.</p>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;context-param&gt;</span>
    <span class="nt">&lt;param-name&gt;</span>contextClass<span class="nt">&lt;/param-name&gt;</span>
    <span class="nt">&lt;param-value&gt;</span>org.springframework.web.context
      .AnnotationConfigWebApplicationContext<span class="nt">&lt;/param-value&gt;</span>
  <span class="nt">&lt;/context-param&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="서블릿-애플리케이션-컨텍스트-등록">서블릿 애플리케이션 컨텍스트 등록</h3>

<p><code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 스프링의 웹 기능을 지원하는 프론트 컨트롤러 서블릿이다.</p>

<p>각 <code class="language-plaintext highlighter-rouge">DispatcherServlet</code>은 서블릿이 초기화 될 때 자신만의 컨텍스트를 생성하고 초기화 한다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;servlet&gt;</span>
  <span class="nt">&lt;servlet-name&gt;</span>spring<span class="nt">&lt;/servlet-name&gt;</span>
  <span class="nt">&lt;servlet-class&gt;</span>
    org.springframework.web.servlet.DispatcherServlet
  <span class="nt">&lt;/servlet-class&gt;</span>
  <span class="nt">&lt;init-param&gt;</span>
    <span class="nt">&lt;param-name&gt;</span>contextConfigLocation<span class="nt">&lt;/param-name&gt;</span>
    <span class="nt">&lt;param-value&gt;</span>
      /WEB-INF/dataContext.xml
      /WEB-INF/applicationContext.xml
    <span class="nt">&lt;/param-value&gt;</span>
  <span class="nt">&lt;/init-param&gt;</span>
  <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
<span class="nt">&lt;/servlet&gt;</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">&lt;servlet-name&gt;</code>
    <ul>
      <li>독립적인 네임스페이스</li>
      <li>설정파일 위치를 네임 스페이스를 이용해 생성한다.
        <ul>
          <li><code class="language-plaintext highlighter-rouge">servlet-name</code> : spring</li>
          <li>설정파일 : <code class="language-plaintext highlighter-rouge">/WEB-INF/spring-servlet.xml</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="12-iocdi를-위한-빈-설정-메타정보-작성">1.2 IoC/DI를 위한 빈 설정 메타정보 작성</h1>

<hr />

<ol>
  <li>XML 문서 / 애노테이션 / 자바 코드</li>
  <li>BeanDefinition 메타정보</li>
  <li>IoC 컨테이너 (애플리케이션)</li>
</ol>

<h2 id="122-빈-등록방법">1.2.2 빈 등록방법</h2>

<hr />

<h3 id="xml----태그">XML - <bean> 태그</bean></h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"..."</span> <span class="na">class=</span><span class="s">"...."</span><span class="nt">&gt;</span>  
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"..."</span> <span class="na">value=</span><span class="s">""</span><span class="nt">&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="xml---네임스페이스와-전용태그">XML - 네임스페이스와 전용태그</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;aop:pointcut</span> <span class="na">id=</span><span class="s">""</span> <span class="na">expression=</span><span class="s">""</span><span class="nt">/&gt;</span>
<span class="nt">&lt;app:module</span> <span class="na">id-prefix=</span><span class="s">"user"</span> <span class="na">class-prefix=</span><span class="s">"User"</span> <span class="na">package=</span><span class="s">"com...."</span><span class="nt">/&gt;</span>
</code></pre></div></div>

<ul>
  <li>스프링 컨테이너가 빈을 만들 때 사용하는 설정 메타정보가 특정 XML 문서나 태그, 포캣에 종속되지 않는 독립적인 오브젝트이기 때문에 전용태그 사용이 가능하다.</li>
</ul>]]></content><author><name>aken5887</name></author><category term="Spring" /><category term="토비의스프링" /><summary type="html"><![CDATA[1.1 IoC 컨테이너 빈 팩토리와 애플리케이션 컨텍스트]]></summary></entry><entry><title type="html">토비의 스프링 - 8장 스프링이란 무엇인가?</title><link href="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/09/post1.html" rel="alternate" type="text/html" title="토비의 스프링 - 8장 스프링이란 무엇인가?" /><published>2023-06-09T00:00:00+00:00</published><updated>2023-06-09T00:00:00+00:00</updated><id>https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/09/post1</id><content type="html" xml:base="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/09/post1.html"><![CDATA[<h1 id="83-pojo-프로그래밍">8.3 POJO 프로그래밍</h1>

<hr />

<p><strong>스프링의 POJO 방식의 개발을 돕기위해 IoC/DI, AOP, PSA와 같은 가능기술을 프레임워크와 컨테이너라는 방식을 통해 제공한다.</strong></p>

<h2 id="831-스프링의-핵심-pojo">8.3.1 스프링의 핵심 POJO</h2>

<hr />

<p><img src="/assets/images/posts/2023-06-09-post1/Untitled.png" alt="Untitled" /></p>

<p>스프링의 주요 기술인 <strong>IoC/DI, AOP, PSA</strong>는 애플리케이션을 POJO로 개발할 수 있게 해주는 가능 기술이라고 불린다.</p>

<h2 id="833-pojo의-조건">8.3.3 POJO의 조건</h2>

<hr />

<h3 id="특정-규약에-종속되지-않는다">특정 규약에 종속되지 않는다.</h3>

<p>POJO는 자바 언어와 꼭 필요한 API 외에는 종속되지 않아야 한다. 특정 규약을 따라 만들게 하는 경우는 대부분 규약에서 제시하는 특정 클래스를 상속하도록 요구한다. 객체지향 설계의 자유로운 적용이 가능한 오브젝트여야만 POJO라 불릴 수 있다.</p>

<h3 id="특정-환경에-종속되지-않는다">특정 환경에 종속되지 않는다.</h3>

<p>특정 비지니스 로직을 담고 있는 POJO 클래스는 웹이라는 환경정보나 웹 기술을 담고 있는 클래스나 인터페이스를 사용해서는 안된다. (웹이라는 환경으로 제한 해버리는 오브젝트나 API에 의존하기 때문이다.)</p>

<ul>
  <li>비지니스 로직을 담은 코드에 <code class="language-plaintext highlighter-rouge">HttpServletRequest</code>나 <code class="language-plaintext highlighter-rouge">HttpSession</code>, 캐시와 관련된 API가 등장하거나 웹 프레임워크의 클래스를 직접 이용하는 부분이 있다면 그것은 진정한 POJO라 볼 수 없다.</li>
</ul>

<p>진정한 POJO란 객체지향적인 원리에 충실하면서, 환경과 기술에 종속되지 않고 필요에 따라 재활용 될 수 있는 방식으로 설계된 오브젝트를 말한다.</p>

<h1 id="84-스프링의-기술">8.4 스프링의 기술</h1>

<hr />

<p>스프링의 기술들은 스프링 프레임워크가 만들어진 진정한 목표인 POJO 기반 엔터프라이즈 개발을 편리하게 해주는 도구일 뿐이다.</p>

<h2 id="841-제어의-역전--의존-관계-주입-ioc--di">8.4.1 제어의 역전 / 의존 관계 주입 (IoC / DI)</h2>

<hr />

<p>나머지 두가지 기술인 AOP와 PSA도 IOC/DI에 바탕을 두고 있다. 자주 등장하는 템플릿 / 콜백 패턴이 적용된 부분도 IOC/DI가 핵심 원리다.</p>

<ul>
  <li>두 개의 오브젝트를 분리해서 만들고, 인터페이스를 두고 느슨하게 연결한 뒤, 실제 사용할 대상은 DI를 통해 외부에서 주입하는 것이 핵심이다.</li>
  <li>“유연한 확장”이 핵심 목적이다.</li>
</ul>

<h3 id="di-활용-방법">DI 활용 방법</h3>

<ul>
  <li>핵심기능의 변경
    <ul>
      <li>의존 대상의 구현을 외부에서 바꾼다.</li>
      <li>전략 패턴
        <ul>
          <li>A → B 구조에서 B의 구현 방식을 필요에 따라 B1, B2, B3로 바꿀 수 있다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>부가기능의 추가
    <ul>
      <li>데코레이터 패턴</li>
      <li>AOP</li>
    </ul>
  </li>
  <li>인터페이스 변경
    <ul>
      <li>PSA는 클라이언트가 일관성 있게 사용할 수 있는 인터페이스를 정의해주고 DI를 통해 어댑터 역할을 하는 오브젝트를 이용하게 해준다.</li>
    </ul>
  </li>
  <li>프록시</li>
  <li>템플릿과 콜백
    <ul>
      <li>반복적으로 등장하지만 항상 고정적인 작업 흐름과 그 사이에 자주 바뀌는 부분을 분리해서 템플릿과 콜백으로 만들고 이를 DI 원리를 응용해서 구성한다.</li>
    </ul>
  </li>
  <li>싱글톤과 오브젝트 스코프
    <ul>
      <li>DI를 프레임워크로 사용한다는 것은 DI 되는 오브젝트의 생명주기를 DI 컨테이너가 제어할 수 있다는 의미도 내포하고 있다.</li>
    </ul>
  </li>
  <li>고립된 테스트
    <ul>
      <li>DI를 위해 만든 수정자 메소드를 사용하면 테스트 코드 안에서 수동적으로 목 오브젝트를 주입할 수 있다.</li>
    </ul>
  </li>
</ul>

<h2 id="842-에스팩트-지향-프로그래밍-aop">8.4.2 에스팩트 지향 프로그래밍 (AOP)</h2>

<hr />

<p>스프링의 목적인 POJO만으로 선언적인 엔터프라이즈 애플리케이션을 개발하면서도 엔터프라이즈 서비스를 선언적으로 제공하는 데 반드시 필요한 것이 AOP 기술이다.</p>

<p>→ [높은 응집도] 공통 관심사를 따로 횡단 분리하여 관리</p>

<h3 id="aop의-적용-기법">AOP의 적용 기법</h3>

<ul>
  <li>다이내믹 프록시
    <ul>
      <li>기존 코드에 영향을 주지 않고 부가기능을 적용하게 해주는 데코레이터 패턴을 응용한 것 이다.</li>
      <li>인터페이스와 DI를 활용하는 데코레이터 패턴이 기반이다.</li>
      <li><strong>스프링의 기본 AOP 구현 방법은 다이내믹 프록시를 이용하는 프록시 AOP 방식이다.</strong></li>
    </ul>
  </li>
  <li><strong>AspectJ</strong>
    <ul>
      <li>AspectJ는 <strong>프록시 방식의 AOP에서는 불가능한</strong> 다양한 조인 포인트를 제공한다.
        <ul>
          <li>특정 조건에 맞는 대상에 시점별로(실행 전, 실행 후, 정상 실행 후 예외 발생 후, 모든 시점) 일괄 적용 가능하다.</li>
        </ul>
      </li>
      <li>메소드 호출 뿐만 아니라 인스턴스 생성, 필드 액세스, 특정 호출 경로를 가진 메소드 호출도 가능하다.</li>
    </ul>
  </li>
</ul>

<h3 id="aop의-적용-단계">AOP의 적용 단계</h3>

<ul>
  <li>미리 준비된 AOP 이용
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@Transactional</code>, <code class="language-plaintext highlighter-rouge">@Configurable</code> …</li>
    </ul>
  </li>
</ul>

<h2 id="843-포터블-서비스-추상화-psa">8.4.3 포터블 서비스 추상화 (PSA)</h2>

<hr />

<p><strong>환경과 세부 기술의 변화에 관계없이 일관된 방식으로 기술에 접근할 수 있게 해주는 PSA이다.</strong></p>

<p>POJO코드가 세부 기술 변화에 직접 노출되어 만들어 지지 않게 된다.</p>

<h3 id="트랜잭션-서비스-추상화">트랜잭션 서비스 추상화</h3>

<p>트랜잭션은 대부분 AOP를 이용해 만들기 때문에 직접 사용할 일이 없다. 설정에서 스프링의 트랜잭션 추상화 인터페이스인 <code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>를 구현한 구체적인 서비스 클래스를 빈으로 등록해줘야 한다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"transactionManager"</span>
      <span class="na">class=</span><span class="s">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="직접-스프링이-제공하는-api">직접 스프링이 제공하는 API</h3>

<p>스프링이 정의한 추상 API를 이용해 코드를 작성하고, 구체적인 기술과 설정은 XML 파일 안에서 지정한다.</p>

<h3 id="서비스-추상화와-di">서비스 추상화와 DI</h3>

<p>서비스 추상화를 위해 필요한 기술은 DI 뿐이다.</p>]]></content><author><name>aken5887</name></author><category term="Spring" /><category term="토비의스프링" /><summary type="html"><![CDATA[8.3 POJO 프로그래밍]]></summary></entry><entry><title type="html">토비의 스프링 - 7장 스프링 핵심 기술의 응용</title><link href="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/08/post1.html" rel="alternate" type="text/html" title="토비의 스프링 - 7장 스프링 핵심 기술의 응용" /><published>2023-06-08T00:00:00+00:00</published><updated>2023-06-08T00:00:00+00:00</updated><id>https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/08/post1</id><content type="html" xml:base="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/08/post1.html"><![CDATA[<h3 id="스프링의-3대-핵심기술">스프링의 3대 핵심기술</h3>
<ul>
  <li>IOC / DI</li>
  <li>AOP</li>
  <li>PSA (서비스 추상화)</li>
</ul>

<h1 id="71-sql과-dao의-분리">7.1 SQL과 DAO의 분리</h1>

<hr />

<h3 id="sql-맵-프로퍼티-방식">SQL 맵 프로퍼티 방식</h3>

<p>외부에서 Map 형태로 사용할 쿼리를 주입 받는다.</p>

<h2 id="711-xml-설정을-이용한-분리">7.1.1 XML 설정을 이용한 분리</h2>

<hr />

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="n">bean</span> <span class="n">id</span><span class="o">=</span><span class="s">"userDao"</span> <span class="kd">class</span><span class="err">="</span><span class="nc">me</span><span class="o">.</span><span class="na">toby</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">user</span><span class="o">.</span><span class="na">dao</span><span class="o">.</span><span class="na">UserDaoJdbc</span><span class="s">"&gt;
    &lt;property name="</span><span class="n">dataSource</span><span class="s">" ref="</span><span class="n">dataSource</span><span class="s">"/&gt;
    &lt;property name="</span><span class="n">sqlMap</span><span class="s">"&gt;
        &lt;map&gt;
            &lt;entry key="</span><span class="n">add</span><span class="s">" value="</span><span class="n">insert</span> <span class="n">into</span> <span class="nf">users</span> <span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">password</span><span class="o">,</span> <span class="n">email</span><span class="o">,</span> <span class="n">level</span><span class="o">,</span> <span class="n">login</span><span class="o">,</span> <span class="n">recommend</span><span class="o">)</span>
            <span class="n">values</span><span class="o">(?,?,?,?,?,?,?)</span><span class="err">"</span><span class="o">/&gt;</span>
        <span class="o">&lt;/</span><span class="n">map</span><span class="o">&gt;</span>
    <span class="o">&lt;/</span><span class="n">property</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">bean</span><span class="o">&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDaoJdbc</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">sqlMap</span><span class="o">;</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSqlMap</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">sqlMap</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">sqlMap</span> <span class="o">=</span> <span class="n">sqlMap</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">add</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">...</span>
    <span class="k">this</span><span class="o">.</span><span class="na">jdbcTemplate</span><span class="o">.</span><span class="na">update</span><span class="o">(</span><span class="n">sqlMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"add"</span><span class="o">),...)</span>
    <span class="o">...</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="712-sql-제공-서비스">7.1.2 SQL 제공 서비스</h2>

<hr />

<h3 id="sql-서비스-인터페이스">SQL 서비스 인터페이스</h3>

<p>⚡ 인터페이스 설계 아이디어</p>

<ul>
  <li>DAO를 SQL 서비스의 구현에서 독립적으로 만들도록 인터페이스 사용한다.</li>
  <li>DI로 구현 클래스의 오브젝트를 주입해주어야 한다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"userDao"</span> <span class="na">class=</span><span class="s">"me.toby.spring.user.dao.UserDaoJdbc"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"sqlService"</span> <span class="na">ref=</span><span class="s">"sqlService"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>

<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"sqlService"</span> <span class="na">class=</span><span class="s">"me.toby.spring.user.service.sqlService.UserSqlServiceImpl"</span><span class="nt">&gt;</span>**
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"sqlMap"</span><span class="nt">&gt;</span>
        <span class="nt">&lt;map&gt;</span>
            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"userAdd"</span> <span class="na">value=</span><span class="s">"insert into users (id, name, password, email, level, login, recommend)
            values(?,?,?,?,?,?,?)"</span><span class="nt">/&gt;</span>
            <span class="nt">&lt;entry</span> <span class="na">key=</span><span class="s">"userGet"</span>
                <span class="na">value=</span><span class="s">"select * from users where id = ?"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;/map&gt;</span>
    <span class="nt">&lt;/property&gt;</span>
<span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserSqlServiceImpl</span> <span class="kd">implements</span> <span class="nc">SqlService</span><span class="o">{</span>
  <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">sqlMap</span><span class="o">;</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSqlMap</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">sqlMap</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">sqlMap</span> <span class="o">=</span> <span class="n">sqlMap</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getSql</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SqlRetrievalFailureException</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="n">sqlMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
    <span class="k">if</span><span class="o">(</span><span class="n">sql</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nf">SqlRetrievalFailureException</span><span class="o">(</span><span class="n">key</span><span class="o">+</span><span class="s">"에 대한 SQL을 찾을 수 없습니다."</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">sql</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="72-인터페이스의-분리와-자기-참조-빈">7.2 인터페이스의 분리와 자기 참조 빈</h1>

<hr />

<p>전용 키와 SQL 문장 두 가지를 담을 수 있는 간단한 XML 문서와 이 XML 파일에서 SQL을 읽어뒀다가 DAO에게 제공해주는 SQL 서비스 구현 클래스를 JAXB를 이용해 만들 수 있다.</p>

<h3 id="jaxb">JAXB</h3>

<p>Java Architecture for XML Binding / <code class="language-plaintext highlighter-rouge">java.xml.bind</code></p>

<p>XML 문서정보를 거의 동일한 구조의 오브젝트로 직접 매핑해준다.</p>

<p><strong>[참고] 마샬링/언 마샬링/직렬화</strong></p>
<ul>
  <li>언 마샬링 → XML 문서를 읽어서 자바의 오브젝트로 변환하는 것 을 뜻한다.</li>
  <li>마샬링 → 바인딩 오브젝트를 XML 문서로 변환하는 것 을 뜻한다.</li>
  <li>직렬화 → 자바 오브젝트를 바이트 스트림으로 바꾸는 것 을 뜻한다.</li>
</ul>

<p>** JAXB 실습은 시간되면 해볼 것</p>

<h2 id="723-빈의-초기화-작업">7.2.3 빈의 초기화 작업</h2>

<hr />

<p>“빈에 대한 생성 및 초기화 제어권은 스프링에 있다. 스프링은 빈 오브젝트를 생성하고 DI 작업을 수행해서 프로퍼티를 모두 주입해준 뒤에 미리 지정한 초기화 메소드를 호출해 주는 기능을 가지고 있다.“</p>

<h3 id="빈-후처리기">빈 후처리기</h3>

<p>스프링 컨테이너가 <strong>빈을 생성한 뒤에 부가적인 작업을 수행할 수 있게 해주는</strong> 특별한 기능이다.</p>

<ul>
  <li>AOP를 위한 프록시 자동생성기
    <ul>
      <li><code class="language-plaintext highlighter-rouge">@Transactional</code>이 붙은 타입 메소드에 트랜잭션 부가기능을 담은 프록시를 추가하도록 만들어주는 후처리기를 등록하는 설정은 아래와 같다.</li>
    </ul>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;tx:annotation-driven&gt;</span>
</code></pre></div>    </div>
  </li>
  <li>빈 설정기능에 사용할 수 있는 특별한 애노테이션 기능을 부여해주는 빈 후처리기 등록하는 설정은 아래와 같다.
    <ul>
      <li>코드 애노테이션을 이용해서 부가적인 빈 설정 또는 초기화 작업을 해주는 후 처리기 등록한다.</li>
    </ul>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;context:annotation-config/&gt;</span>
</code></pre></div>    </div>

    <ul>
      <li><code class="language-plaintext highlighter-rouge">@PostConstruct</code>
        <ul>
          <li>빈 오브젝트를 생성하고 DI 작업을 마친 뒤에 <code class="language-plaintext highlighter-rouge">@PostContruct</code>가 붙은 메소드를 자동으로 실행 해 준다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="76-스프링-31-di">7.6 스프링 3.1 DI</h1>

<hr />

<h2 id="762-빈-스캐닝과-자동-와이어링">7.6.2 빈 스캐닝과 자동 와이어링</h2>

<hr />

<h3 id="autowired를-이용한-자동-와이어링">@Autowired를 이용한 자동 와이어링</h3>

<p>자동 와이어링 기법을 이용해서 조건에 맞는 빈을 찾아 자동으로 수정자 메소드나 필드에 넣어준다. 컨테이너가 <strong>이름이나 타입을 기준으로 주입될 빈을 찾아주기 때문에(<code class="language-plaintext highlighter-rouge">@Autowired</code>, <code class="language-plaintext highlighter-rouge">@Resource</code>)</strong> 자바코드나 XML 작성이 필요없다.</p>

<h3 id="component를-이용한-자동-빈-등록">@Component를 이용한 자동 빈 등록</h3>

<p><code class="language-plaintext highlighter-rouge">@Component</code> 또는 <code class="language-plaintext highlighter-rouge">@Component</code>를 메타 애노테이션으로 갖고 있는 애노테이션(<code class="language-plaintext highlighter-rouge">@Servcie</code>, <code class="language-plaintext highlighter-rouge">@Repository</code>, <code class="language-plaintext highlighter-rouge">@Controller</code> 등)이 붙은 클래스는 빈 스캐너를 통해 자동으로 검색되고 빈으로 등록된다.</p>

<ul>
  <li>빈의 아이디는 따로 지정하지 않았으면 클래스의 첫 글자를 소문자로 바꿔서 사용한다.</li>
  <li>@Repository → 데이터 엑세스 서비스를 제공하는 빈을 자동 등록하기 위해 사용하는 애노테이션</li>
</ul>

<h3 id="componentscan">@ComponentScan</h3>

<p><code class="language-plaintext highlighter-rouge">@Component</code> 애노테이션이 달린 클래스를 자동으로 찾아서 빈을 등록해주게 하려면 <strong>빈 스캔 기능을 사용하겠다는 애노테이션 정의</strong>가 필요하다. (빈 자동등록이 컨테이너가 디폴트로 제공하는 기능은 아니기 때문에)</p>

<h3 id="컨테이너-빈-등록정보-확인">컨테이너 빈 등록정보 확인</h3>

<p>스프링 컨테이너는 모두 <code class="language-plaintext highlighter-rouge">BeanFactory</code> 인터페이스를 구현하고 있다. <code class="language-plaintext highlighter-rouge">BeanFactory</code>의 구현 클래스 중 <code class="language-plaintext highlighter-rouge">DefaultListableBeanFactory</code> 클래스를 이용해서 스프링 컨테이너는 빈을 등록하고 관리한다.</p>

<h3 id="등록된-빈을-출력하는-테스트-코드">등록된 빈을 출력하는 테스트 코드</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Autowired</span>
<span class="nc">DefaultListableBeanFactory</span> <span class="n">beanFactory</span><span class="o">;</span>

<span class="nd">@Test</span>
 <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beans</span><span class="o">(){</span>
    <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">b</span> <span class="o">:</span> <span class="n">beanFactory</span><span class="o">.</span><span class="na">getBeanDefinitionNames</span><span class="o">()){</span>
       <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">+</span> <span class="s">"\t"</span> <span class="o">+</span> <span class="n">beanFactory</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">b</span><span class="o">).</span><span class="na">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
 <span class="o">}</span>
</code></pre></div></div>

<h2 id="765-프로퍼티-소스">7.6.5 프로퍼티 소스</h2>

<hr />

<h3 id="propertysource">@PropertySource</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PropertySource</span><span class="o">(</span><span class="s">"/database.properties"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppContext</span> <span class="o">{</span>
	<span class="nd">@Autowired</span>
  <span class="kd">private</span> <span class="nc">Environment</span> <span class="n">env</span><span class="o">;</span>
	<span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">DataSource</span> <span class="nf">dataSource</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">SimpleDriverDataSource</span> <span class="n">dataSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SimpleDriverDataSource</span><span class="o">();</span>

    <span class="k">try</span> <span class="o">{</span>
      <span class="n">dataSource</span>
          <span class="o">.</span><span class="na">setDriverClass</span><span class="o">((</span><span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">Driver</span><span class="o">&gt;)</span> <span class="nc">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"jdbc.driver"</span><span class="o">)));</span>
    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">dataSource</span><span class="o">.</span><span class="na">setUrl</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"jdbc.url"</span><span class="o">));</span>
    <span class="n">dataSource</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"jdbc.name"</span><span class="o">));</span>
    <span class="n">dataSource</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">env</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"jdbc.password"</span><span class="o">));</span>
    <span class="k">return</span> <span class="n">dataSource</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="propertysourcesplaceholderconfigurer">PropertySourcesPlaceholderConfigurer</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.driver}"</span><span class="o">)</span> <span class="nc">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">Driver</span><span class="o">&gt;</span> <span class="n">driverClass</span><span class="o">;</span>
<span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.url}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">url</span><span class="o">;</span>
<span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.name}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
<span class="nd">@Value</span><span class="o">(</span><span class="s">"${jdbc.password}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
</code></pre></div></div>]]></content><author><name>aken5887</name></author><category term="Spring" /><category term="토비의스프링" /><summary type="html"><![CDATA[스프링의 3대 핵심기술 IOC / DI AOP PSA (서비스 추상화)]]></summary></entry><entry><title type="html">토비의 스프링 - 6장 AOP 2</title><link href="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/07/post1.html" rel="alternate" type="text/html" title="토비의 스프링 - 6장 AOP 2" /><published>2023-06-07T00:00:00+00:00</published><updated>2023-06-07T00:00:00+00:00</updated><id>https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/07/post1</id><content type="html" xml:base="https://aken5887.github.io/jekyll-theme-yat/spring/2023/06/07/post1.html"><![CDATA[<h1 id="65-스프링-aop">6.5 스프링 AOP</h1>

<hr />

<h2 id="651-자동-프록시생성">6.5.1 자동 프록시생성</h2>

<hr />

<h3 id="자동-프록시-생성기">자동 프록시 생성기</h3>

<ul>
  <li>프록시 팩토리 빈의 설정이 반복되는 문제를 해결하기 위해 <strong>자동 프록시 생성기와 포인트 컷</strong>을 활용할 수 있다.</li>
  <li>자동 프록시 생성기는 부가기능이 담긴 어드바이스를 제공하는 프록시를 스프링 컨테이너 초기화 시점에서 자동으로 만들어 준다.</li>
</ul>

<h3 id="빈-후처리기">빈 후처리기</h3>

<ul>
  <li>예) 스프링이 제공하는 빈 후처리기 중에 하나인 <code class="language-plaintext highlighter-rouge">DefaultAdvisorAUtoProxyCreator</code>
    <ul>
      <li>
        <p><code class="language-plaintext highlighter-rouge">ApplicationContext</code>에 아래 빈 후처리기을 등록하면 어드바이저를 이용하여, 포인트 컷에 맞는 어드바이스 내용의 프록시를 자동으로 생성 해준다.</p>

        <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"</span><span class="nt">/&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h3 id="빈-후처리기를-이용한-프록시-자동생성-순서">빈 후처리기를 이용한 프록시 자동생성 순서</h3>

<p><img src="/assets/images/posts/2023-06-07-post1/1B9F11AB-3160-4EAC-8EF1-413A74F05878.jpeg" alt="1B9F11AB-3160-4EAC-8EF1-413A74F05878.jpeg" /></p>

<p>⭐️ <strong>빈 후처리기 → DefaultAdvisorAutoProxyCreator</strong></p>

<ol>
  <li>빈 후처리기가 등록되어 있으면 스프링은 빈 오브젝트를 만들 때 마다 후처리기에 빈을 보낸다.</li>
  <li>빈 후처리기는 빈으로 등록된 모든 어드바이저 내의 포인트 컷을 이용해 전달받은 빈이 프록시 적용 대상인지 확인한다.</li>
  <li>프록시 적용 대상이면 내장된 프록시 생성기에 현재 빈에 대한 프록시를 만들게 하고, 만들어진 프록시에 어드바이저를 연결 해 준다.</li>
  <li>빈 후 처리기는 프록시가 생성되면 현재 컨테이너가 전달해준 빈 오브젝트 대신 프록시 오브젝트를 컨테이너에게 돌려준다.</li>
  <li>컨테이너는 최종적으로 빈 후처리기가 돌려준 오브젝트를 빈으로 등록하고 사용한다.</li>
</ol>

<h2 id="653-포인트컷-표현식을-이용한-포인트-컷">6.5.3 포인트컷 표현식을 이용한 포인트 컷</h2>

<hr />

<h3 id="포인트-컷-표현식">포인트 컷 표현식</h3>

<ul>
  <li>AspectJExcpression Pointcut 을 사용한다.</li>
  <li>포인트컷 지시자 → <code class="language-plaintext highlighter-rouge">execution(…)</code>
    <ul>
      <li>Method 오브젝트를 출력했을 때 나오는 메소드 시그니처와 동일한 구조를 가지고 비교한다.</li>
    </ul>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  execution([(1)접근제한자 패턴] (2)타입패턴 [(3)타입패턴.] (4)이름패턴 ((5)타입패턴 | "..",...) 
  [(6)throws 예외 패턴])
</code></pre></div>    </div>

    <ol>
      <li>접근 제한자 (생략가능)</li>
      <li><strong>리턴 값의 타입 패턴</strong></li>
      <li>패키지와 클래스 이름에 대한 패턴 (생략가능)</li>
      <li><strong>메소드 이름 패턴</strong></li>
      <li>파라미터의 타입 패턴을 순서대로 넣을 수 있다.</li>
      <li>예외 이름 패턴</li>
    </ol>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c">&lt;!-- full --&gt;</span>
  execution(public int me.toby~.pointcut.Target.minus(int, int) throws java.lang.RuntimeException)
  <span class="c">&lt;!-- simple --&gt;</span>
  execution(int minus(int, int))
  <span class="c">&lt;!-- return 타입 상관 없는 경우 --&gt;</span>
  execution(* minus(int, int))
  <span class="c">&lt;!-- 파라미터의 개수와 타입 까지 무시 --&gt;</span>
  execution(* minus(..))
  <span class="c">&lt;!-- 리턴타입, 파라미터, 메소드 이름에 상관없이 모든 메소드 조건을 허용--&gt;</span>
  execution(* *(..))
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="654-aop란-무엇인가">6.5.4 AOP란 무엇인가?</h2>

<hr />

<h3 id="트랜잭션-서비스-추상화">트랜잭션 서비스 추상화</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code></li>
  <li>작업 내용은 유지하고 구체적인 구현 방법을 자유롭게 바꿀 수 있다.</li>
  <li>비지니스 로직은 트랜잭션 적용 구체적인 방법과 서버환경에 종속되지 않는다.</li>
</ul>

<h3 id="프록시와-데코레이터-패턴">프록시와 데코레이터 패턴</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">UserServiceTx</code></li>
  <li>DI를 이용해 데코레이터 패턴을 적용 하였다.</li>
  <li>트랜잭션을 처리하는 코드를 클라이언트와 타깃 클래스 사이에 존재하도록 한다.</li>
  <li>비지니스 클래스에 영향을 주지 않고 트랜잭션 부가기능 자유롭게 사용한다.</li>
</ul>

<h3 id="다이내믹-프록시와-프록시-팩토리-빈">다이내믹 프록시와 프록시 팩토리 빈</h3>

<ul>
  <li>프록시 클래스 없이 프록시 오브젝트를 런터임시에 만들어주는 <code class="language-plaintext highlighter-rouge">JDK 다이내믹 프록시 기술</code> 을 사용한다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">FactoryBean</code> 인터페이스 구현 클래스 bean 으로 등록 한다.</li>
    </ul>
  </li>
  <li>스프링의 프록시 팩토리 빈 을 이용해서 다이내믹 프록시 생성 방법에 DI를 도입하였다.
    <ul>
      <li>advice → <code class="language-plaintext highlighter-rouge">MethodInterceptor</code> 인터페이스 구현 클래스 (bean)</li>
      <li>pointcut (bean)</li>
      <li>advisor → advice + pointcut (bean)</li>
      <li><code class="language-plaintext highlighter-rouge">proxyfactorybean</code> (bean)</li>
    </ul>
  </li>
</ul>

<h3 id="자동-프록시-생성-방법과-포인트-컷">자동 프록시 생성 방법과 포인트 컷</h3>

<ul>
  <li>스프링 컨테이너의 빈 생성 후처리 기법을 활용해 컨테이너 초기화 시점에서 자동으로 프록시를 만들어주는 방법을 도입하였다.</li>
  <li>프록시를 적용할 대상을 일일이 지정하지 않고 패턴을 이용해 자동으로 선정할 수 있도록, 클래스를 선정하는 기능을 담은 확장된 포인트 컷 사용한다.</li>
</ul>

<h3 id="부가기능의-모듈화">부가기능의 모듈화</h3>

<ul>
  <li><strong>관심사가 같은 코드를 객체지향 설계 원칙에 따라 분리하고, 서로 낮은 결합도를 가진 채로 독립적이고 유연하게 확장할 수 있는 모듈로 만드는 것 !</strong>
    <ul>
      <li>코드를 분리하고, 공통적인 것을 모으고, 인터페이스를 도입하고, DI를 통해 런타임 시에 의존관계를 만들어줌으로써 대부분의 문제를 해결할 수 있다.</li>
    </ul>
  </li>
  <li>부가기능의 모듈화 → <strong>Aspect</strong>
    <ul>
      <li>어드바이스 + 포인트 컷 = 어드바아저 (가장 단순한 형태의 애스팩트)</li>
    </ul>
  </li>
  <li>애플리케이션을 특정 관점을 기준으로 바라볼 수 있게 해준다.
    <ul>
      <li>트랜잭션 기술에 적용에 주목하고 싶은 경우 <code class="language-plaintext highlighter-rouge">transactionAdvice</code>에만 집중 한다.</li>
      <li>적용될 대상을 결정하는 기준을 변경하고 싶은 경우 <code class="language-plaintext highlighter-rouge">transactionPointcut</code>빈의 설정에 집중하면 된다.</li>
    </ul>
  </li>
</ul>

<h2 id="655-aop-적용기술">6.5.5 AOP 적용기술</h2>

<hr />

<h3 id="프록시를-이용한-aop">프록시를 이용한 AOP</h3>

<ul>
  <li>프록시로 만들어서 DI로 연결된 빈 사이에 적용해 타깃의 메소드 호출 과정에 참여해서 부가기능을 제공한다.</li>
  <li><strong>데코레이터 패턴, 다이내믹 프록시, 자동 프록시 생성 기법, 빈 오브젝트의 후처리 조작 기법</strong>이 이에 해당 된다.</li>
</ul>

<h3 id="aspectj">AspectJ</h3>

<ul>
  <li>컴파일 된 타깃 클래스 파일 자체를 수정하거나 클래스가 JVM에 로딩되는 시점을 가로채서 바이트 코드를 조작하는 방법을 사용한다.</li>
</ul>

<h2 id="657-aop-네임스페이스">6.5.7 AOP 네임스페이스</h2>

<hr />

<p>스프링의 프록시 방식 AOP를 적용하기 위해선 최소한 네 가지 빈을 등록해야 한다.</p>

<ul>
  <li>자동 프록시 생성기 <strong>(스프링이 제공)</strong>
    <ul>
      <li>스프링의 <code class="language-plaintext highlighter-rouge">DefaultAdvisorAutoProxyCreator</code></li>
      <li>애플리케이션 컨텍스트가 빈 오브젝트를 생성하는 과정에서 빈 후처리기로 참여한다.</li>
      <li><strong>빈으로 등록된 어드바이저</strong>를 이용해서 프록시를 자동으로 생성하는 기능을 담당한다.</li>
    </ul>
  </li>
  <li>어드바이스 (직접 등록)
    <ul>
      <li><strong>부가기능을 구현한 클래스</strong>를 빈으로 등록한다.</li>
    </ul>
  </li>
  <li>포인트 컷 <strong>(스프링이 제공)</strong>
    <ul>
      <li>스프링의 <code class="language-plaintext highlighter-rouge">AspectExpressionPointcut</code>을 빈으로 등록한다.</li>
    </ul>
  </li>
  <li>어드바이저 <strong>(스프링이 제공)</strong>
    <ul>
      <li>스프링의 <code class="language-plaintext highlighter-rouge">DefaultPointcutAdvisor</code>클래스를 빈으로 등록한다.</li>
      <li>자동 프록시 생성기에 의해 자동 검색되어 사용된다.</li>
    </ul>
  </li>
</ul>

<p>스프링에서는 AOP를 위해서 기계적으로 적용하는 빈들을 간편한 방법으로 등록 가능하다.</p>

<ul>
  <li>스프링은 AOP와 관련된 태그(독립된 전용태그)를 정의해둔 aop 스키마를 제공한다.</li>
  <li>
    <p><code class="language-plaintext highlighter-rouge">&lt;aop:config&gt;, &lt;aop:pointcut&gt;, &lt;aop:advisor&gt;</code> 태그를 사용하면 3개의 빈이 자동으로 등록된다.</p>

    <div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nt">&lt;aop:config&gt;</span>
    <span class="nt">&lt;aop:advisor</span> <span class="na">advice-ref=</span><span class="s">"simpleAdvice"</span> 
      <span class="na">pointcut=</span><span class="s">"execution(* *..Simple*.print*(..))"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;/aop:config&gt;</span>
</code></pre></div>    </div>
  </li>
</ul>

<h1 id="66-트랜잭션-속성">6.6 트랜잭션 속성</h1>

<hr />

<h2 id="661-트랜잭션-정의">6.6.1 트랜잭션 정의</h2>

<hr />

<p><strong>트랜잭션 전파</strong></p>

<p>트랜잭션의 경계에서 이미 진행 중인 트랜잭션이 있을 때 또는 없을 때 어떻게 동작할 것인가를 결정하는 방식</p>

<ul>
  <li><strong>PROPAGATION_REQUIRED</strong> : 진행중인 트랜잭션이 없으면 새로 시작하고, 이미 시작된 트랜잭션이 있으면 이에 참여한다. → <code class="language-plaintext highlighter-rouge">DefaultTransactionDefinition</code>의 트랜잭션 전파 속성이다.</li>
  <li>PROPRAGION_REQUIRES_NEW : 항상 새로운 트랜잭션을 시작한다.</li>
  <li>PROPAGATION_NOT_SUPPORTED : 진행 중인 트랜잭션이 있어도 무시한다. 트랜잭션 없이 동작 한다.</li>
</ul>

<p><strong>[참고] <code class="language-plaintext highlighter-rouge">getTransction(..)</code> 메소드를 사용하는 이유</strong></p>

<p>항상 트랜잭션을 새로 시작하는 것이 아니라, 트랜잭션 전파 속성과 현재 진행 중인 트랜잭션이 존재하는지 여부에 따라서 새로운 트랜잭션을 시도 할 수도 있고, 이미 진행 중인 트랜잭션에 참가할 수 도 있다.</p>

<p><strong>격리수준</strong></p>

<p>모든 DB 트랜잭션은 격리수준을 갖고 있다. 적절하게 격리수준을 조정해서 가능한 한 많은 트랜잭션을 동시에 진행하면서 문제가 발생하지 않게 하는 제어가 필요하다.</p>

<ul>
  <li>ISOLATION_DEFAULT : <code class="language-plaintext highlighter-rouge">DefaultTransactionDefinition</code>의 격리수준. <code class="language-plaintext highlighter-rouge">Datasource</code>에 설정되어 있는 디폴트 격리수준을 그대로 따른다는 것</li>
  <li>
    <p>제한시간</p>

    <p>트랜잭션을 수행하는 제한시간을 설정. <code class="language-plaintext highlighter-rouge">DefaultTransactionDefinition</code>의 기본 설정은 제한시간이 없다.</p>
  </li>
  <li>
    <p>읽기전용</p>

    <p>트랜잭션 내에서 데이터를 조작하는 시도를 막아줄 수 있다.</p>
  </li>
</ul>

<h2 id="662-트랜잭션-인터셉터와-트랜잭션-속성">6.6.2 트랜잭션 인터셉터와 트랜잭션 속성</h2>

<hr />

<blockquote>
  <p><strong>스프링은 언체크(런타임) 예외가 발생하면 트랜잭션은 롤백되고, 타깃 메소드가 체크 예외를 던지는 경우에는 예외상황으로 인식하지 않아 자동으로 롤백 하지 않는다. 체크 예외는 의미있는 리턴방식으로 인식하여 트랜잭션을 커밋한다.“</strong></p>

</blockquote>

<h3 id="메소드-이름-패턴을-이용한-트랜잭션-속성-지정-transactionatrributes">메소드 이름 패턴을 이용한 트랜잭션 속성 지정 (transactionAtrributes)</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PROPAGATION_NAME, ISOLATION_NAME, readOnly, timeout_NNMM, -Exception1, +Exception2
</code></pre></div></div>

<ul>
  <li>-Exception1 : 체크 예외 중에서 롤백 대상으로 추가하는 예외</li>
  <li>+Exception2 : 런타임 예외이지만 롤백시키지 않을 예외</li>
  <li>트랜잭션 전파 항목만 필수이고 나머지는 생략가능하다.</li>
  <li>메소드 이름이 하나 이상의 패턴과 일치하는 경우에는 패턴 중에서 가장 정확히 일치하는 것이 적용된다.</li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"transactionAdvice"</span> <span class="na">class=</span><span class="s">"org.springframework.transaction.interceptor.TransactionInterceptor"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"transactionManager"</span> <span class="na">ref=</span><span class="s">"transactionManager"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"transactionAttributes"</span><span class="nt">&gt;</span>
      <span class="nt">&lt;props&gt;</span>
        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"get*"</span><span class="nt">&gt;</span>PROPAGATION_REQUIRED,readOnly,timeout_30<span class="nt">&lt;/prop&gt;</span> 
				<span class="c">&lt;!--읽기전용, 시간제한 30초 --&gt;</span>
        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"upgrade*"</span><span class="nt">&gt;</span>PROPAGATION_REQUIRES_NEW,ISOLATION_SERIALIZABLE<span class="nt">&lt;/prop&gt;</span>
        <span class="nt">&lt;prop</span> <span class="na">key=</span><span class="s">"*"</span><span class="nt">&gt;</span>PROPAGATION_REQUIRED<span class="nt">&lt;/prop&gt;</span>
      <span class="nt">&lt;/props&gt;</span>
    <span class="nt">&lt;/property&gt;</span>
  <span class="nt">&lt;/bean&gt;</span>
</code></pre></div></div>

<h3 id="tx-네임스페이스를-이용한-설정-방법">tx 네임스페이스를 이용한 설정 방법</h3>

<p>TransactionInterceptor 타입의 어드바이스 빈과 TransactionAttribute 타입의 속성 정보를 tx 스키마 전용태그를 이용해 정의할 수 있다.</p>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;tx:advice</span> <span class="na">id=</span><span class="s">"transactionAdvice"</span> <span class="na">transaction-manager=</span><span class="s">"transactionManager"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tx:attributes&gt;</span>
      <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"get*"</span> <span class="na">propagation=</span><span class="s">"REQUIRED"</span> <span class="na">read-only=</span><span class="s">"true"</span> <span class="na">timeout=</span><span class="s">"30"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"upgrade*"</span> <span class="na">propagation=</span><span class="s">"REQUIRES_NEW"</span> <span class="na">isolation=</span><span class="s">"SERIALIZABLE"</span><span class="nt">/&gt;</span>
      <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"*"</span> <span class="na">propagation=</span><span class="s">"REQUIRED"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/tx:attributes&gt;</span>
  <span class="nt">&lt;/tx:advice&gt;</span>
</code></pre></div></div>

<h3 id="트랜잭션-포인트-컷-표현식">트랜잭션 포인트 컷 표현식</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">bean(…)</code> 표현식
    <ul>
      <li>빈의 아이디가 <code class="language-plaintext highlighter-rouge">Service</code>로 끝나는 모든 빈에 대해 트랜잭션을 적용하고 싶은 경우 : <code class="language-plaintext highlighter-rouge">bean(*Service)</code></li>
    </ul>
  </li>
</ul>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;aop:config&gt;</span>
  <span class="nt">&lt;aop:advisor</span> <span class="na">advice-ref=</span><span class="s">"txAdvice"</span> <span class="na">pointcut=</span><span class="s">"bean(*Service)"</span><span class="nt">/&gt;</span>
  <span class="nt">&lt;aop:advisor</span> <span class="na">advice-ref=</span><span class="s">"batchTxAdvice"</span> <span class="na">pointcut=</span><span class="s">"execution(me.toby.**.batchJob.*.*(..))"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/aop:config&gt;</span>
</code></pre></div></div>

<h3 id="참고">[참고]</h3>

<p>같은 타깃 오브젝트 안에서 메소드 호출이 일어나는 경우에는 프록시 AOP를 통해 부여해준 부가가능이 적용되지 않는다. 따라서 같은 오브젝트 안에서의 호출은 새로운 트랜잭션 속성을 부여하지 못한다.</p>

<h2 id="664-트랜잭션-속성-적용">6.6.4 트랜잭션 속성 적용</h2>

<hr />

<h3 id="트랜잭션-경계설정의-일원화">트랜잭션 경계설정의 일원화</h3>

<p>일반적으로 비지니스 로직이 있는 서비스 계층의 오브젝트에 트랜잭션 경계를 부여한다. 따라서 직접 DAO에 접근하는 것을 차단해야 한다. 안전하게 사용하려면 해당 모듈의 서비스 계층을 통해서 DAO에 접근하는 것이 좋다.</p>

<p>→ 컨트롤러 클래스에서 dao 클래스에 직접 접근하는 것은 지양하자.</p>

<h3 id="tx-스키마-태그를-이용한-트랜잭션-어드바이스-정의">tx 스키마 태그를 이용한 트랜잭션 어드바이스 정의</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">&lt;!-- aop --&gt;</span>
<span class="nt">&lt;aop:config&gt;</span>
    <span class="nt">&lt;aop:advisor</span> <span class="na">advice-ref=</span><span class="s">"txAdvice"</span> <span class="na">pointcut=</span><span class="s">"bean(*Service)"</span><span class="nt">/&gt;</span>
<span class="nt">&lt;/aop:config&gt;</span>

<span class="c">&lt;!-- 스프링의 TransactionInterceptor --&gt;</span>
<span class="nt">&lt;tx:advice</span> <span class="na">id=</span><span class="s">"txAdvice"</span> <span class="na">transaction-manager=</span><span class="s">"transactionManager"</span><span class="nt">&gt;</span>
    <span class="nt">&lt;tx:attributes&gt;</span>
        <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"get*"</span> <span class="na">propagation=</span><span class="s">"REQUIRED"</span> <span class="na">read-only=</span><span class="s">"true"</span><span class="nt">/&gt;</span>
        <span class="nt">&lt;tx:method</span> <span class="na">name=</span><span class="s">"*"</span><span class="nt">/&gt;</span>
    <span class="nt">&lt;/tx:attributes&gt;</span>
<span class="nt">&lt;/tx:advice&gt;</span>
</code></pre></div></div>

<h1 id="67-애노테이션-트랜잭션-속성과-포인트-컷">6.7 애노테이션 트랜잭션 속성과 포인트 컷</h1>

<hr />

<p>세밀한 트랜잭션 속성 제어가 필요한 경우를 위해 스프링이 제공하는 방법으로서, 직접 타깃에 트랜잭션 속성정보를 가진 애노테이션을 지정하는 방법이다.</p>

<h2 id="671-트랜잭션-애노테이션">6.7.1 트랜잭션 애노테이션</h2>

<hr />

<h3 id="transactional">@Transactional</h3>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@Transactional</code>이 부여된 모든 오브젝트를 자동으로 타깃 오브젝트로 인식한다.</li>
  <li>사용되는 포인트 컷 : <code class="language-plaintext highlighter-rouge">TransactionAttributeSourcePointcut</code>
    <ul>
      <li>타입, 메소드 레발 상관없이 해당 애노테이션이 부여된 모든 빈 오브젝트를 찾아서 포인트 컷의 선정 결과로 돌려준다.</li>
    </ul>
  </li>
  <li>트랜잭션 속성 정의 + 포인트 컷의 자동등록</li>
</ul>

<p><img src="/assets/images/posts/2023-06-07-post1/39374351-B406-4351-98E1-0622C17149E4.jpeg" alt="39374351-B406-4351-98E1-0622C17149E4.jpeg" /></p>

<h3 id="대체-정책">대체 정책</h3>

<p>타깃 메소드 &gt; 타깃 클래스 &gt;  선언 메소드(인터페이스) &gt; 선언 타입(인터페이스)의 순서에 따라 <code class="language-plaintext highlighter-rouge">@Transactional</code>이 적용됐는지 차례대로 확인하고, 먼저 발견되는 속성정보를 사용한다.</p>

<h3 id="트랜잭션-어노테이션-사용을-위한-설정">트랜잭션 어노테이션 사용을 위한 설정</h3>

<div class="language-xml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;tx:annotation-driven/&gt;</span>
</code></pre></div></div>

<h1 id="68-트랜잭션-지원-테스트">6.8 트랜잭션 지원 테스트</h1>

<hr />

<h2 id="681-선언적-트랜잭션과-트랜잭션-전파-속성">6.8.1 선언적 트랜잭션과 트랜잭션 전파 속성</h2>

<hr />

<h3 id="선언적-트랜잭션-transactional">선언적 트랜잭션 (<code class="language-plaintext highlighter-rouge">@Transactional</code>)</h3>

<p>AOP를 이용해 코드 외부에서 트랜잭션의 기능을 부여해주고 속성을 지정할 수 있게 하는 방법이다.</p>

<h3 id="프로그램에-의한-트랜잭션">프로그램에 의한 트랜잭션</h3>

<p><code class="language-plaintext highlighter-rouge">TransactionTemplate</code>나 개별 데이터 기술의 트랜잭션 API를 사용해 직접 코드 안에서 사용하는 방법이다.</p>

<p>(<code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code>, <code class="language-plaintext highlighter-rouge">DataSourceTransactionManager</code>)</p>

<h3 id="트랜잭션-추상화">트랜잭션 추상화</h3>

<p>트랜잭션 추상화 기술의 핵심은 트랜잭션 매니저와 트랜잭션 동기화 이다. <code class="language-plaintext highlighter-rouge">PlatformTransactionManager</code> 인터페이스를 구현한 트랜잭션 매니저를 통해 구체적인 트랜잭션 기술의 종류와 상관없이 일관된 트랜잭션 제어가 가능해진다.</p>

<h2 id="682-트랜잭션-동기화와-테스트">6.8.2 트랜잭션 동기화와 테스트</h2>

<hr />

<h3 id="트랜잭션-매니저를-이용한-테스트용-트랜잭션-제어">트랜잭션 매니저를 이용한 테스트용 트랜잭션 제어</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Autowired</span>
<span class="nc">PlatformTransactionManager</span> <span class="n">transactionManager</span><span class="o">;</span>

<span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">transactionSync</span><span class="o">(){</span>
    <span class="nc">DefaultTransactionDefinition</span> <span class="n">definition</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DefaultTransactionDefinition</span><span class="o">();</span> 
    <span class="nc">TransactionStatus</span> <span class="n">status</span> <span class="o">=</span> <span class="n">transactionManager</span><span class="o">.</span><span class="na">getTransaction</span><span class="o">(</span><span class="n">definition</span><span class="o">);</span>
    <span class="o">...</span>
    <span class="n">transactionManager</span><span class="o">.</span><span class="na">commit</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
    <span class="o">...</span>
    <span class="n">transactionManager</span><span class="o">.</span><span class="na">rollback</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="683-테스트를-위한-트랜잭션-애노테이션">6.8.3 테스트를 위한 트랜잭션 애노테이션</h2>

<hr />

<h3 id="transactional-1">@Transactional</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span><span class="o">(</span><span class="n">expected</span> <span class="o">=</span> <span class="nc">TransientDataAccessResourceException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">transactionAnnoSync</span><span class="o">(){</span>
  <span class="n">userService</span><span class="o">.</span><span class="na">deleteAll</span><span class="o">();</span>
  <span class="n">userService</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">users</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">));</span>
  <span class="n">userService</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">users</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="rollback">@Rollback</h3>

<ul>
  <li>테스트에 적용된 <code class="language-plaintext highlighter-rouge">@Transactional</code>은 기본적으로 트랜잭션을 강제 롤백시키도록 설정 되어있다.</li>
  <li><code class="language-plaintext highlighter-rouge">@Rollback(false)</code>를 사용하면 트랜잭션이 커밋된다.</li>
  <li>메소드 레벨에만 적용된다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span><span class="c1">//(expected = TransientDataAccessResourceException.class)</span>
<span class="nd">@Transactional</span><span class="c1">//(readOnly = true)</span>
<span class="nd">@Rollback</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">transactionAnnoSync</span><span class="o">(){</span>
  <span class="n">userService</span><span class="o">.</span><span class="na">deleteAll</span><span class="o">();</span>
  <span class="n">userService</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">users</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
  <span class="n">userService</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">users</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">4</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>aken5887</name></author><category term="Spring" /><category term="토비의스프링" /><summary type="html"><![CDATA[6.5 스프링 AOP]]></summary></entry></feed>