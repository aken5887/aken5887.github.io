---
layout: post
title:  "1장 오브젝트와 의존관계"
date:   2023-07-01
categories: Spring
tags : 토비의스프링
---

> 확장과 변화를 고려한 객체지향적 설계와 그것을 효과적으로 담아낼 수 있는 IoC/DI
>

# 1.3 DAO의 확장

---

## 1.3.4 원칙과 패턴

---

### 개방폐쇄원칙

클래스나 모듈은 **확장**에는 열려 있어야 하고 **변경**에는 닫혀 있어야 한다.

### 5가지 객체지향 설계 원칙

- 단일 책임 원칙(SPR)
- 개방 폐쇄 원칙(OCP)
- 리스코프 치환 원칙(LSP)
- 인터페이스 분리 원칙(ISP)
- 의존관계 역전 원칙(DIP)

# 1.4 제어의 역전(IoC)

---

## 1.4.3 제어권의 이전을 통한 제어관계 역전

---

### 제어의 역전 개념

서블릿에 대한 제어 권한을 가진 컨테이너가 적절한 시점에 서블릿 클래스의 오브젝트를 만들고 그 안의 메소드를 호출하는 개념이다. 서블릿이나 JSP 처럼 컨테이너 안에서 동작하는 구조는 간단한 방식이지만 이미 제어의 역전 개념이 적용 되어 있다.

### 디자인 패턴

소프트웨어 설계 시 특정 상황에서 자주 만나는 문제를 해결하기 위해 사용할 수 있는 재사용 가능한 솔루션을 일컫는 단어이다.

- 템플릿 메소드 패턴
    - 상속을 통해 기능을 확장할 때 사용하는 가장 대표적인 방법
    - 슈퍼 클래스에 기본적인 로직의 흐름을 만들고, 그 기능의 일부를 추상 메소드나 오버라이딩이 가능한 protected 메소드 등으로 만든 뒤 서브 클래스에서 이런 **메소드를 필요에 맞게 구현**해서 사용하도록 하는 방법이다.
- 팩토리 메소드 패턴
    - 상속을 통해 기능(오브젝트의 생성)을 확장
    - 슈퍼클래스의 메소드는 주로 인터페이스 타입으로 오브젝트를 리턴, 서브 클래스에서 구체적인 **오브잭트 생성 방법을 결정한다.**
- 전략 패턴
    - 자신의 기능 맥락(context)에서, 필요에 따라 변경이 필요한 알고리즘을 인터페이스를 통해 통째로 외부로 분리시키고, 이를 구현한 구체적인 알고리즘 클래스를 필요에 따라 바꿔서 사용할 수 있게 하는 디자인 패턴.
        - 구체적인 알고리즘이란? 독립적인 책임으로 분리 가능한 기능을 대체 가능한 전략이라고 보기 때문에 패턴 이름이 전략 패턴이다.
    - 전략 패턴의 컨텍스트(UserDao)
        - 컨텍스트는 자신의 기능을 수행하는데 필요한 기능 중에 변경 가능한, DB 연결 방식이라는 알고리즘을 ConnectionMaker라는 인터페이스로 정의하고, 이를 구현한 클래스, 즉 전략을 바꿔가면서 사용할 수 있게 분리하였다.

            ```java
            // 기능 인터페이스
            public interface ConnectionMaker {
            	void connect();
            	void disconnect();
            }
            // 전략 클래스
            public class UserDao {
            	private ConnectionMaker connectionMaker;
            	public UserDao(ConnectionMaker connectionMaker) {
            		this.connectionMaker = connectionMaker;
            	}
            }
            ```

    - 클라이언트의 역할(UserDaoTest)
        - 컨텍스트(UserDao)를 사용하는 클라이언트(UserDaoTest)는 컨텍스트가 사용할 전략(ConnectionMaker 구현 클래스)을 컨텍스트 생성자들을 통해서 제공해주는 것이 일반적임

            ```java
            public class UserDaoTest {
            	@Test
            	void someTest() {
            		ConnectionMaker dConnectionMaker = new DConnectionMaker();
            		UserDao userDao = new UserDao(dConnectionMaker);
            	}
            }
            ```


### 프레임워크와 라이브러리의 차이는 무엇일까?

라이브러리

- 해당 라이브러리가 사용하는 애플리케이션 코드는 애플리케이션 흐름을 직접 제어한다.
- 개발자가 개발 중에 필요한 기능이 있을 때 능동적으로 라이브러리를 사용한다.

프레임워크

- 애플리케이션 코드가 프레임워크에 의해 사용 되고, 프레임워크가 짜놓은 틀에서 수동적을 동작한다.
- 바꿔말하면 프레임워크가 흐름을 주도하는 중에 개발자가 만든 애플리케이션 코드를 사용하도록 만드는 방식이다.
- 제어의 역전 개념이 적용되어 있다. → 컴포넌트의 생명주기를 관장

### 제어의 역전 (IoC)

- 설계가 깔끔해지고 유연성이 증가하며 확장성이 좋아진다.
- 프레임워크 또는 컨테이너 같이 애플리케이션 **컴포넌트의 생성과 관계설정, 사용, 생명주기 관리 등을 관장하는 존재가 필요하다.**
- 스프링은 대표적인 IoC 프레임워크이다.

# 1.5 스프링의 IoC

---

## 1.5.1 오브젝트 팩토리를 이용한 스프링 IoC

---

### 애플리케이션 컨텍스트와 설정정보

스프링 빈(bean)

- 스프링에서 제어권을 가지고 직접 만들고 관계를 부여하는 오브젝트를 뜻한다.
- 스프링 컨테이너가 생성과 관계설정, 사용 등을 제어해주는 제어의 역전이 적용된다.

빈 팩토리(bean factory)

- 스프링 빈의 생성과 관계 설정 같은 제어를 담당하는 IoC 오브젝트를 뜻한다.
- 보통 빈 팩토리보다는 이를 **좀 더 확장한 애플리케이션 컨텍스트**를 주로 사용한다.

**애플리케이션 컨텍스트 = 빈팩토리 + 스프링 부가서비스**

- IoC 방식을 따라 만들어진 일종의 빈 팩토리이다.
- 애플리케이션 전반에 걸쳐 모든 구성요소의 제어 작업을 담당하는 IoC 엔진이다.
- 별도의 정보를 참고해서 빈의 생성 및 관계설정 등의 제어 작업을 총괄한다.

IoC 컨테이너?

- IoC 방식으로 빈을 관리한다는 의미의 애플리케이션 컨텍스트를 뜻한다.
- 컨테이너라는 단어는 애플리케이션 컨텍스트 보다 추상적인 표현이다.
- 하나의 어플리케이션에는 여러개의 어플리케이션 컨텍스트로 구성된다.
    - 스프링의 경우 보통 2개 이다. → Root ApplicationContext, Web ApplicationContext

# 1.6 싱글톤 레지스트리와 오브젝트 스코프

---

### 오브젝트의 동일성과 동등성

동일성

- 완전히 동일한 오브젝트를 뜻한다.
- 두개의 오브젝트 레퍼런스가 하나의 객체를 가르키고 있다.
- == 로 비교한다.

동등성

- 두 개의 각기 다른 오브젝트가 메모리상에 존재한다.
- 오브젝트의 동등성 기준에 따라 두 오브젝가 동등하다고 판단한다.
- Object 클래스의 equals 메소드를 사용한다.

## 1.6.1 싱글톤 레지스트리로서의 애플리케이션 컨텍스트

---

### 서버 애플리케이션과 싱글톤

싱글톤 레지스트리

- 애플리케이션 컨텍스트는 싱글톤을 저장하고 관리하는 **싱글톤 레지스트리**이다.
- 내부에서 생성하는 빈 오브젝트를 모두 싱글톤으로 생성한다.

서비스 오브젝트

- 서블릿은 자바 엔터프라이즈 기술의 가장 기본이 되는 서비스 오브젝트이다.
- 서블릿은 대부분 멀티스레드 환경에서 싱글톤으로 동작한다.
- 서블릿 클래스당 하나의 오브젝트만 만들어두고, 사용자의 요청을 담당하는 여러 스레드에서 하나의 오브젝트를 공유해 동시에 사용한다.

### 싱글톤 패턴의 한계

- private 생성자를 갖고 있기 때문에 상속이 불가능 하다.
- 싱글톤은 테스트하기 힘들다.
- 서버환경에서는 싱글톤이 하나만 만들어 지는 것을 보장하지 못한다.
    - 서버의 클래스 로더의 구성에 따라 싱글톤임에도 하나 이상의 오브젝트가 만들어질 가능성이 존재한다.
    - 여러개의 JVM에 분산되어 설치되는 경우에도 각각 독립적으로 오브젝트가 생성되므로 싱글톤의 가치가 떨어진다.
- 싱글톤의 사용은 전역 상태를 만들 수 있기 때문에 바람직하지 못함
    - 싱글톤의 static 메소드를 이용해 언제든지 싱글톤에 접근 가능 하다. (전역 상태)

### 싱글톤 레지스트리

- 스프링은 직접 싱글톤 형태의 오브젝트를 만들고 관리하는 기능을 제공한다.
- 스프링 컨테이너는 싱글톤을 생성하고, 관리하고, 공급하는 싱글톤 관리 컨테이너 이기도 하다.
- 싱글톤 레지스트리의 장점은 static 메소드와 private 생성자를 사용하지 않는 평범한 자바클래스를 싱글톤으로 활용할 수 있다.

## 1.6.3 스프링 빈의 스코프

빈이 생성되고, 존재하고, 적용되는 범위를 빈의 스코프라고 한다. 스프링에서 만들어지는 빈은 대부분 싱글톤 스코프를 갖는다.

### 싱글톤이 아닌 스코프

1. 프로토타입 스코프

    프로토타입은 싱글톤과 달리 컨테이너에 빈을 요청할 때 마다 매번 새로운 오브젝트를 생성한다.

2. 요청 스코프

    웹을 통해 새로운 HTTP 요청이 생길 때마다 생성되됨

3. 세션 스코프

    웹의 세션과 스코프가 유사함


# 1.7 의존관계 주입(DI)

---

DI는 오브젝트 레퍼런스를 외부로 부터 주입 받고 이를 통해 여타 오브젝트와 다이내믹하게 의존관계가 만들어지는 것이 핵심이다. **(오브젝트를 전달 받는 것이 아니라 오브젝트의 레퍼런스를 전달 받는 것!)**

DI에서 말하는 주입은 다이내믹하게 구현 클래스를 결정해서 제공받을 수 있도록 인터페이스 타입의 파라미터를 통해 이뤄져야 한다.

## 1.7.2 런타임 의존관계 설정

---

### 의존관계 주입의 세가지 조건

1. 클래스 모델이나 코드에는 런타임 시점의 의존관계가 드러나지 않고, 인터페이스에만 의존하고 있어야 한다.
2. 런타임 시점의 의존관계는 컨테이너나 팩토리 같은 제 3의 존재가 결정한다.
3. 의존관계는 사용할 오브젝트에 대한 레퍼런스를 외부에서 제공해줌으로서 만들어진다.

## 1.7.4 의존관계 주입의 응용

---

런타임 시에 사용 의존관계를 맺을 오브젝트를 주입해준다는 DI 기술의 장점

1. 코드에는 런타입 클래스에 대한 의존관계가 나타나지 않는다.
2. 인터페이스를 통해 결합도가 낮은 코드를 만들므로, 다른 책임을 가진 사용 의존관계에 있는 대상이 바뀌거나 변경되더라도 자신은 영향을 받지 않는다.
3. 변경을 통한 다양한 확장 방법에는 자유롭다(💡)는 장점이 있다.

# 1.8 XML을 이용한 설정

---

## 1.8.1 XML 설정

---

### DTD와 스키마

- XML 문서는 미리 정해진 구조를 따라서 작성됐는지 검사할 수 있다. 그 방법엔 DTD와 스키마가 있다.
- 스키마
    - 스프링은 특별한 목적으로 사용할 수 있는 태그 들이 존재한다.
        - DI → <beans>, <bean>
    - 이 태그들은 각각 별개의 스키마 파일에 정의되어 있고, 독립적인 네임스페이스를 사용해야만 한다.
    - 이런 태그를 사용하려면 DTD 대신 네임스페이스가 지원되는 스키마를 사용해야 한다.

## 1.8.4  프로퍼티 값 주입

---

### value 값의 자동변환

- 스프링이 프로퍼티 값을, 수정자 메소드의 파라미터 타입을 참고로 해서 적절한 형태로 변환해준다.

    ```java
    Class driverClass = Class.forName("com.jdbc.Driver");
    dataSource.setDriverClass(driverClass);
    ```

- 자바 리플랙션 사용
