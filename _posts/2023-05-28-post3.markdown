---
layout: post
title:  "Java 컴파일과 JVM 메모리 영역"
date:   2023-05-28 10:04 +0900
categories: Java
tags : TIL
---

`.java` 확장자 파일이 바이트 코드인 `.class` 확장자 파일로 컴파일 되어, 클래스 로더에 의해 JVM 메모리 영역에 올라가는 과정을 알아보도록 하자.

## Java 컴파일
1. java 확장자 파일을 java 컴파일러가 바이트 코드인 class 확장자 파일로 변경한다.
2. 이후에 반기계어인 class 확장자 파일이 클래스 로더에 의해 JVM 내로 로드된다.
3. 이때 실행엔진에 의해 기계어로 해석되어 메모리 상(Runtime Data Area)에 배치된다.
4. 실행엔진은 인터프리터와 JIT 컴파일러가 있으며, 두 엔진의 실행방식이 상이하다. Interpreter는 코드를 한줄씩 실행하며, JIT 컴파일러는 적절한 시점에 코드 전체를 컴파일 하여 캐시에 저장해두었다가 해당 코드를 직접 실행한다.
5. 한번만 실행되는 코드는 인터프리팅만 하는 것이 유리하다. (굳이 JIT 컴파일러 사용할 필요 없음)

>**💡 런타임 이란?**
>- 컴파일 과정을 마친 응용 프로그램이 사용자에 의해 실행되어 지는 때

## JVM 메모리 영역

### Stack Area (임시 저장공간)

- 클래스 내 메소드에서 사용되는 정보들이 저장되는 공간
- 매개변수, 지역변수, 리턴 값 들이 저장
- LIFO 방식으로 메소드 실행 시 저장, 실행 완료 후 제거

### Method Area

- 클래스와 메소드 정보 저장
- 클래스 변수, 인스턴스 변수 (멤버 변수) 정보 저장
- 상수(final) 정보 저장

### Heap Area

- 참조변수 저장
  - new 명령어를 통해 생성한 인스턴스와 배열 등
- Method Area에 올라온 클래스들만 생성이 가능하다.
- GC의 대상이 된다.
  - Stack Area에서 더이상 참조하지 않는 객체들
  - 즉, 참조되지 않는 객체들의 메모리를 회수하는 역할을 한다.

### Native Method Stack Area

- 자바 외 다른 언어의 호출을 위해 할당되는 영역
  - ex) C/C++의 메소드를 호출할 때 사용하는 Stack 영역

### 사용 예

![img1.daumcdn.jpg](/assets/images/posts/img1.daumcdn.jpg)

그림 - Runtime Data Area ([출처](https://aljjabaegi.tistory.com/387))

> **💡 get, insert, update, delete 등 CRUD 메소드가 있는 서비스 클래스가 있을 때**
> - 이 클래스와 메소드의 정보는 실행 엔진에 의해 Method Area 에 올라가며
> - 클래스의 메소드 호출이 발생하면 Method Area의 정보를 읽어 해당 메소드의 매개변수, 지역변수 리턴 값 등이 Stack 영역에 올려 처리하게 된다.
> - 메소드의 실행이 끝나면 Stack Area에서는 자동으로 제거된다.
> - 메소드 내에서 new 명령어로 생성한 인스턴스나 배열이 있을 경우 해당 값은 Heap Area에 저장되고 Stack Area에서는 이 Heap Area의 값을 참조할 수 있는 메모리 주소 값만 저장하게 된다.

📍 참고 : [링크](https://aljjabaegi.tistory.com/387)
