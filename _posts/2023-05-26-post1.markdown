---
layout: post
title:  "Java 8에서 Java 17로 마이그레이션 해야 하는 7가지 이유"
date:   2023-05-26 21:12 +0900
categories: Java
tags : 개발
---

2014년에 Java 8이 출시된 이후로 Java는 7개월 단위로 지속적으로 업데이트 되고있다.
Java 8에서 Java 17로 마이그레이션 해야 하는 7가지 이유에 대해서 알아보자

## 짧아진 Java 릴리즈 주기

- Java 8은 2014년에 출시되었고 Java 17은 2021년에 출시됨.
- Java 8 이후 Java는 6개월마다 릴리즈 되므로, 6개월 마다 새로운 Java를 기대할 수 있음

## Java 8 이후 Java에 추가된 개발자 사이 인기 있는 기능 목록

### 1. 지역 변수 타입 추론

- Java 10 이후에 추가된 가장 인기 있는 기능 중 하나
- 타입을 정하지 않고 로컬 변수를 선언할 수 있음 → 타입을 유추 함
- `var` 을 사용함
- 예시
  - Java 8

      ```java
      URL url = new URL("https://google.com");
      System.out.println(url.getClass());
      ```

  - Java 10

      ```java
      var url = new URL("https://google.com");
      System.out.println(url.getClass());
      ```

  - 동일한 결과를 출력 함

    > class java.net.URL
>

### 2. 향상된 스위치 표현

- Java 14 이후 스위치 표현식을 사용하는 경우 스위치 문 `case` 안에서 `break`나 `return` 키워들 사용하여 값을 반환할 필요가 없다.
- 대신에 전체 스위치 식을 반환할 수 있다.
- 예시
  - Java 8

      ```java
      swtich(x) {
          case "cat":
              return "야옹";
          case "dog":
              return "멍멍";
          default:
              throw new IlleagalArgumentException("존재하지 않는 유형입니다");
      }
      ```

  - Java 14

      ```java
      return switch(x) {
          case "cat" -> "야옹";
          case "dog" -> "멍멍";
          default ->  throw new IlleagalArgumentException("존재하지 않는 유형입니다");
      }
      ```

  - 결과

    > Input : cat
    Output : 야옹
>

### 3. 텍스트 블록

- Java 15 이후 이스케이프 시퀀스를 사용하지 않고 여러 줄 문자열을 만들 수 있음.
- SQL 쿼리 혹은 JSON 문자열을 생성할 때 매우 유용하다.
- 예시
  - Java 8

      ```java
      private static final String queryString
                                  = "SELECT *\n"+
                                      "FROM CUSTOMER \n"+
                                      "WHERE NAME = '영희';";
      ```

  - Java 15

      ```java
      private static final String queryString = """
            SELECT *
            FROM CUSTOMER
            WHERE CUSTOMER_ID = '1';
            """;
      ```


### 4. Record

- Record는 Java 14이후에 추가된 새로운 기능
- 데이터를 저장하는데 사용되는 클래스를 만들 수 있다.
- POJO 클래스와 비슷하지만 코드량은 훨씬 작음
- Lombok이라는 외부 라이브러리에 의존하지 않고 코드양을 줄일 수 있다.
- 예시
  - Java 8

      ```java
      @Getter
      @Setter
      @ToString
      public class PostRequest {
          private Long id;
          private String name;
          private String content;
      }
      ```

  - Java 14

      ```java
      public record PostRequest (Long id, String title, String content){
      }
      ```

  - 테스트 코드

      ```java
      @DisplayName("record 테스트")
        @Test
        void test1() {
          // given
          PostRequest postRequest
              = new PostRequest(1L, "왕관", "거미식당");
          // then
          Assertions.assertThat(postRequest.id()).isEqualTo(1L);
          Assertions.assertThat(postRequest.title()).isEqualTo("왕관");
        }
      ```


### 5. instanceof

- Java 16 이후에 추가된 새로운 기능
- instanceof 연산자를 캐스트된 객체를 반환하는 표현식으로 이용할 수 있음.
- 명식적인 캐스팅을 사용하는 대신 instanceof를 사용하여 변환할 객체를 캐치할 수 있다.
- 예시
  - Java 8

      ```java
      if(obj instanceof PostRequest) {
          PostRequest req = (PostRequest) obj;
          return req.getId();
      }
      ```

  - Java 16

      ```java
      public Long findPostId(Object obj){
        if(obj instanceof PostRequest req){
          return req.id();
        }
        return null;
      }
      ```

  - 테스트 코드

      ```java
      @DisplayName("PostRequest id를 가져온다.")
      @Test
      void test2() {
        // given
        PostRequest postRequest
            = new PostRequest(1L, "왕관", "거미식당");
        // when
        PostRequestFinder finder = new PostRequestFinder();
        Long reqId = finder.findPostId(postRequest);
        // then
        assertThat(reqId).isEqualTo(1L);
      }
      ```


### 6. sealed class

- Java 17 이후에 추가된 기능.
- 클래스 또는 인터페이스의 상속을 제한된 하위 클래스의 집합으로 제한할 수 있다.

    ```java
    public sealed interface Ev permits Hyundai, Kia {
    }

    // Valid sub-class
    public non-sealed class Hyundai implements Ev{} // 봉인되지 않은 하위 클래스
    public final class Kia implements Ev{} // 최종 하위 클래스 (상속 불가능)

    // 컴파일 오류 발생
    public non-sealed class Madza extends Ev{}
    ```

- `sealed` 클래스의 하위 클래스는 final로 선언할 수 있다.
- 최종 하위 클래스는 더 이상 상속이 불가능 하지만, 봉인되지 않은 하위 클래스는 추가로 상속이 가능하다.

### 7. 유용한 NullPointerException

- Java 14 이후로 NullPointerExcpetion 예외에 대한 자세한 정보를 얻을 수 있다.
- 예외 메세지 중 because 이후에 어떤 값이 null 이라는 것을 알려준다.
- 예시
  - Java 14

      ```java
      PostRequest req = new PostRequest(null, null, null);
      req.id().toString();
      ```

  - 예외 메세지 Java 8

    > Exception in thread "main" java.lang.NullPointerException
    at com.ex.App.main(App.java:14)
  >
  - 예외 메세지 Java 14

    > Exception in thread "main" java.lang.NullPointerException: Cannot invoke "java.lang.Long.toString()" because the return value of "[com.ex.PostRequest.id](http://com.ex.postrequest.id/)()" is null
    at com.ex.App.main(App.java:14)
>
- _원문 : [https://levelup.gitconnected.com/7-reasons-to-migrate-from-java-8-to-java-17-b8cb031b7af8](https://levelup.gitconnected.com/7-reasons-to-migrate-from-java-8-to-java-17-b8cb031b7af8)_
