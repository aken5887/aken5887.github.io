---
layout: post
title:  "Proxy와 Spring"
date:   2023-05-27 22:30 +0900
categories: Spring
tags : TIL
---
Proxy란 “대리인” 클라이언트와 타깃 오브젝트 사이에 끼어서, 타깃 오브젝트를 대신 호출하는 것.

그 와중에 부가 기능이 추가 되고, 타깃은 자신의 기능에만 집중하고 부가기능은 프록시에 위임한다.

### Reflection API

구체적인 클래스 타입을 알지 못해도 “런타임”에 클래스 정보를 접근할 수 있게 해주는 자바에서 제공하는 API

- 단점
    - 리플렉션은 동적일 때, 해결되는 타입을 포함하므로 JVM의 optimization이작동하지 않아 성능상 **느리다**.

### JDK Dynamic Proxy

프록시 팩토리에 의해 런타임 시 다이나믹 하게 만들어지는 오브젝트

프록시 팩토리에 인터페이스 정보를 제공해주면 해당 인터페이스를 구현한 클래스 오브젝트를 자동으로 생성함

- 특징
    - JDK에서 지원하는 프록시 생성 방법
    - Reflection API 를사용한다.
    - **“인터페이스”가 반드시 필요함, 부가 기능코드는 직접 작성해야 함**
    - InvocationHandler를 재정의한 invoke를 구현해줘야 부가기능이 추가된다.
- 호출순서

  client -1→ [JDK Dynamic Proxy] -2→ InvocationHandler -3→ Target

    1. 메소드 요청
    2. 메소드 처리
    3. 부가기능 수행
- 구조
    - OrderService
    - OrderServiceImpl
    - LoggingHandler implements InvocationHandler
- Proxy Instance 생성

```java
OrderService orderService
		= (OrderService) Proxy.newProxyInstance(
		ProxyTest.class.getClassLoader(),
		new Class[]{OrderService.class},
		new LoggingHandler(new OrderServiceImpl)));
```

### CGLIB Proxy

ex) @Transactional 같이 인터페이스를 따로 정의하지 않고 사용하는 프록시

- 스프링의 ProxyFactoryBean
    - 인터페이스가 존재하면 JDK Dynamic Proxy를
    - 인터페이스가 없으면 CGLIB Proxy를 사용한다.
- 특징
    - 클래스 상속을 통한 프록시 구현
        - 메서드에 final을 포함할 수 없다(상속이 불가능하기 때문)
    - 바이트 코드를 조작해서 프록시를 생성 → 빠르다.
        - 메소드가 처음 호출되었을 때 동적으로 타깃의 클래스의 바이트 코드를 조작
        - 이후 호출 시엔 조작된 바이트 코드를 재사용 함
    - MethodInterceptor를 재정의한 Interceptor를 구현해야 부가기능이 추가된다.
- 호출순서

  client → CGLIB → Method Interceptor → Target

    1. 메소드 요청
    2. 메소드 처리
    3. 부가기능 수행
- 구조
    - ProductService
    - LoggingMethodInterceptor implements MethodInterceptor
- Proxy Instance 생성

    ```java
    ProductService productService =
    	(ProductService) Enhancer.create(
    	ProductService.class,
    	new LoggingMethodInterceptor(new ProductService());
    ```

- Spring 3.2부터 Spring Core 라이브러리에 포함되었다.
- Spring 4.3 & Spring boot 1.4 이후로 CGLIB Proxy를 디폴트 Proxy로 사용하게 되었다.
- Dynamic Proxy보다 3배는 빠르다.

### Spring Boot와 CGLIB

스프링부트에서는 spring-aop-proxy-target-class의 default 값이 true이다.

이 값이 true이면 CGLIB를 이용해서 프록시를 생성함

“왜 스프링 부트는 CGLIB를 기본값으로 사용할까?”

1. 인터페이스 기반 프록시는 때때로 ClassCastExceptions 를 추적하기 어렵게 한다.

### Spring ProxyFactoryBean

Spring에서는 프록시를 빈으로 만들어주는 ProxyFactoryBean을 제공한다.

ProxyFactoryBean을 통해 Proxy를 생성할 수 있다.

- 특징
    - 타깃의 인터페이스 정보가 필요없다
    - 프록시 빈을 생성해준다
    - 부가기능을 MethodInterceptor로 구현 (CGLIB의 것과 다름)
- 프록시 생성 매커니즘
    - ProxyFactoryBean → Proxy → MethodInterceptor → Target
- 중요! MethodInterceptor는 타깃을 가지고 있지 않음. → 부가기능을 독립적으로 유지하기 위해서. → 부가기능을 싱글톤으로 이용할 수 있음
- 자동 프록시 생성기 → @Transactional
    - 자동 프록시 생성기가 스프링 컨테이너 내의 모든 Advisor를 조회함
    - Advisor내에 있는 Pointcut을 이용해 모든 클래스와 메서드를 하나하나 매칭함. 이때 조건이 만족되면 프록시 적용대상이 됨
    - 프록시 적용 대상이면 프록시를 생성하고 반환해서 프록시를 스프링 빈으로 등록한다.
